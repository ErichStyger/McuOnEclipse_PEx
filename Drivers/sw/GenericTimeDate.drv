%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    22.07.2012
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\GenericTimeDateSettings.Inc
%define! Abstract Common\GenericTimeDateAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif

%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#if %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC_BEAN
  #define %'ModuleName'%.HAS_SEC100_IN_TIMEREC                   %>60 (0) /* Bean version have no Sec100!  */
#else
  #define %'ModuleName'%.HAS_SEC100_IN_TIMEREC                   %>60 (1) /* non-Bean version have Sec100  */
#endif
/* internal configuration for the API used: */
%if defined(LDDRTC)
#define %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC_LDD            %>60 (1)  /* set to 1 if using HW RTC using LDD driver, 0 otherwise */
%else
#define %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC_LDD            %>60 (0)  /* set to 1 if using HW RTC using LDD driver, 0 otherwise */
%endif
%if defined(RTC)
#define %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC_BEAN           %>60 (1)  /* set to 1 if using HW RTC using normal bean driver, 0 otherwise */
%else
#define %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC_BEAN           %>60 (0)  /* set to 1 if using HW RTC using normal bean driver, 0 otherwise */
%endif


#define %'ModuleName'%.PARSE_COMMAND_ENABLED    %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED

/* user events */
%if defined(OnDateGet)
#define %'ModuleName'%.ON_DATE_GET_EVENT                         %>60 1 /* 1: enabled user event */
#define %'ModuleName'%.ON_DATE_GET_EVENT_NAME                    %>60 %OnDateGet /* name of user event*/
%else
#define %'ModuleName'%.ON_DATE_GET_EVENT                         %>60 0 /* 1: enabled user event */
#define %'ModuleName'%.ON_DATE_GET_EVENT_NAME                    %>60 %'ModuleName'%.OnDateGet /* name of user event*/
%endif
%if defined(OnTimeGet)
#define %'ModuleName'%.ON_TIME_GET_EVENT                         %>60 1 /* 1: enabled user event */
#define %'ModuleName'%.ON_TIME_GET_EVENT_NAME                    %>60 %OnTimeGet /* name of user event*/
%else
#define %'ModuleName'%.ON_TIME_GET_EVENT                         %>60 0 /* 1: enabled user event */
#define %'ModuleName'%.ON_TIME_GET_EVENT_NAME                    %>60 %'ModuleName'%.OnTimeGet /* name of user event*/
%endif
%if defined(OnDateSet)
#define %'ModuleName'%.ON_DATE_SET_EVENT                         %>60 1 /* 1: enabled user event */
#define %'ModuleName'%.ON_DATE_SET_EVENT_NAME                    %>60 %OnDateSet /* name of user event*/
%else
#define %'ModuleName'%.ON_DATE_SET_EVENT                         %>60 0 /* 1: enabled user event */
#define %'ModuleName'%.ON_DATE_SET_EVENT_NAME                    %>60 %'ModuleName'%.OnDateSet /* name of user event*/
%endif
%if defined(OnTimeSet)
#define %'ModuleName'%.ON_TIME_SET_EVENT                         %>60 1 /* 1: enabled user event */
#define %'ModuleName'%.ON_TIME_SET_EVENT_NAME                    %>60 %OnTimeSet /* name of user event*/
%else
#define %'ModuleName'%.ON_TIME_SET_EVENT                         %>60 0 /* 1: enabled user event */
#define %'ModuleName'%.ON_TIME_SET_EVENT_NAME                    %>60 %'ModuleName'%.OnTimeSet /* name of user event*/
%endif


#ifndef __BWUserType_TIMEREC
#define __BWUserType_TIMEREC
  typedef struct {                                               %>40/* It contains actual number of hours, minutes, seconds and hundreth of seconds. */
    uint8_t Hour;                                                %>40/* hours (0 - 23) */
    uint8_t Min;                                                 %>40/* minutes (0 - 59) */
    uint8_t Sec;                                                 %>40/* seconds (0 - 59) */
  #if %'ModuleName'%.HAS_SEC100_IN_TIMEREC /* does not exist for Bean version */
    uint8_t Sec100;                                              %>40/* hundredth of seconds (0 - 99) */
  #endif
  } TIMEREC;
#endif
#ifndef __BWUserType_DATEREC
#define __BWUserType_DATEREC
  typedef struct {                                               %>40/* It contains actual year, month, and day description. */
    uint16_t Year;                                               %>40/* years (1998 - 2099) */
    uint8_t Month;                                               %>40/* months (1 - 12) */
    uint8_t Day;                                                 %>40/* days (1 - 31) */
  } DATEREC;
#endif

#define %'ModuleName'%.TICK_TIME_MS  %'ModuleName'%.CONFIG_TICK_TIME_MS /* period of AddTick() */

%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetTime
%ifdef SetTime
uint8_t %'ModuleName'%.%SetTime(uint8_t Hour, uint8_t Min, uint8_t Sec, uint8_t Sec100);
%define! ParHour
%define! ParMin
%define! ParSec
%define! ParSec100
%define! RetVal
%include Common\GenericTimeDateSetTime.Inc

%endif %- SetTime
%-BW_METHOD_END SetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTick
%ifdef AddTick
void %'ModuleName'%.%AddTick(void);
%include Common\GenericTimeDateAddTick.Inc

%endif %- AddTick
%-BW_METHOD_END AddTick
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTime
%ifdef GetTime
uint8_t %'ModuleName'%.%GetTime(TIMEREC *time);
%define! Partime
%define! RetVal
%include Common\GenericTimeDateGetTime.Inc

%endif %- GetTime
%-BW_METHOD_END GetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDate
%ifdef SetDate
uint8_t %'ModuleName'%.%SetDate(uint16_t Year, uint8_t Month, uint8_t Day);
%define! ParYear
%define! ParMonth
%define! ParDay
%define! RetVal
%include Common\GenericTimeDateSetDate.Inc

%endif %- SetDate
%-BW_METHOD_END SetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDate
%ifdef GetDate
uint8_t %'ModuleName'%.%GetDate(DATEREC *date);
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateGetDate.Inc

%endif %- GetDate
%-BW_METHOD_END GetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
uint8_t %'ModuleName'%.%Init(void);
%define! RetVal
%include Common\GenericTimeDateInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io);
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\GenericTimeDateParseCommand.Inc

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN DeInit
%ifdef DeInit
void %'ModuleName'%.%DeInit(void);
%include Common\GenericTimeDateDeInit.Inc

%endif %- DeInit
%-BW_METHOD_END DeInit
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTicks
%ifdef AddTicks
void %'ModuleName'%.%AddTicks(uint16_t nofTicks);
%define! ParnofTicks
%include Common\GenericTimeDateAddTicks.Inc

%endif %- AddTicks
%-BW_METHOD_END AddTicks
%-************************************************************************************************************
%-BW_METHOD_BEGIN TicksToTime
%ifdef TicksToTime
uint8_t %'ModuleName'%.%TicksToTime(uint32_t ticks, TIMEREC *time);
%define! Particks
%define! Partime
%define! RetVal
%include Common\GenericTimeDateTicksToTime.Inc

%endif %- TicksToTime
%-BW_METHOD_END TicksToTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN TimeToTicks
%ifdef TimeToTicks
uint8_t %'ModuleName'%.%TimeToTicks(TIMEREC *time, uint32_t *ticks);
%define! Particks
%define! Partime
%define! RetVal
%include Common\GenericTimeDateTimeToTicks.Inc

%endif %- TimeToTicks
%-BW_METHOD_END TimeToTicks
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetInternalRTCTimeDate
%ifdef SetInternalRTCTimeDate
uint8_t %'ModuleName'%.%SetInternalRTCTimeDate(TIMEREC *time, DATEREC *date);
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateSetInternalRTCTimeDate.Inc

%endif %- SetInternalRTCTimeDate
%-BW_METHOD_END SetInternalRTCTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetInternalRTCTimeDate
%ifdef GetInternalRTCTimeDate
uint8_t %'ModuleName'%.%GetInternalRTCTimeDate(TIMEREC *time, DATEREC *date);
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateGetInternalRTCTimeDate.Inc

%endif %- GetInternalRTCTimeDate
%-BW_METHOD_END GetInternalRTCTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalculateDayOfWeek
%ifdef CalculateDayOfWeek
uint8_t %'ModuleName'%.%CalculateDayOfWeek(uint16_t Year, uint8_t Month, uint8_t Day);
%define! ParYear
%define! ParMonth
%define! ParDay
%define! RetVal
%include Common\GenericTimeDateCalculateDayOfWeek.Inc

%endif %- CalculateDayOfWeek
%-BW_METHOD_END CalculateDayOfWeek
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetSWTimeDate
%ifdef SetSWTimeDate
uint8_t %'ModuleName'%.%SetSWTimeDate(TIMEREC *time, DATEREC *date);
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateSetSWTimeDate.Inc

%endif %- SetSWTimeDate
%-BW_METHOD_END SetSWTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetSWTimeDate
%ifdef GetSWTimeDate
uint8_t %'ModuleName'%.%GetSWTimeDate(TIMEREC *time, DATEREC *date);
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateGetSWTimeDate.Inc

%endif %- GetSWTimeDate
%-BW_METHOD_END GetSWTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN SyncWithInternalRTC
%ifdef SyncWithInternalRTC
uint8_t %'ModuleName'%.%SyncWithInternalRTC(void);
%define! RetVal
%include Common\GenericTimeDateSyncWithInternalRTC.Inc

%endif %- SyncWithInternalRTC
%-BW_METHOD_END SyncWithInternalRTC
%-************************************************************************************************************
%-BW_METHOD_BEGIN SyncWithExternalRTC
%ifdef SyncWithExternalRTC
uint8_t %'ModuleName'%.%SyncWithExternalRTC(void);
%define! RetVal
%include Common\GenericTimeDateSyncWithExternalRTC.Inc

%endif %- SyncWithExternalRTC
%-BW_METHOD_END SyncWithExternalRTC
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetExternalRTCTimeDate
%ifdef SetExternalRTCTimeDate
uint8_t %'ModuleName'%.%SetExternalRTCTimeDate(TIMEREC *time, DATEREC *date);
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateSetExternalRTCTimeDate.Inc

%endif %- SetExternalRTCTimeDate
%-BW_METHOD_END SetExternalRTCTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetExternalRTCTimeDate
%ifdef GetExternalRTCTimeDate
uint8_t %'ModuleName'%.%GetExternalRTCTimeDate(TIMEREC *time, DATEREC *date);
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateGetExternalRTCTimeDate.Inc

%endif %- GetExternalRTCTimeDate
%-BW_METHOD_END GetExternalRTCTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetTimeDate
%ifdef SetTimeDate
uint8_t %'ModuleName'%.%SetTimeDate(TIMEREC *time, DATEREC *date);
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateSetTimeDate.Inc

%endif %- SetTimeDate
%-BW_METHOD_END SetTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTimeDate
%ifdef GetTimeDate
uint8_t %'ModuleName'%.%GetTimeDate(TIMEREC *time, DATEREC *date);
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateGetTimeDate.Inc

%endif %- GetTimeDate
%-BW_METHOD_END GetTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN UnixSecondsToTimeDateCustom
%ifdef UnixSecondsToTimeDateCustom
void %'ModuleName'%.%UnixSecondsToTimeDateCustom(int32_t seconds, int8_t offset_hours, TIMEREC *time, DATEREC *date, uint16_t baseYear);
%define! Parseconds
%define! Paroffset_hours
%define! Pardate
%define! Partime
%define! ParbaseYear
%include Common\GenericTimeDateUnixSecondsToTimeDateCustom.Inc

%endif %- UnixSecondsToTimeDateCustom
%-BW_METHOD_END UnixSecondsToTimeDateCustom
%-************************************************************************************************************
%-BW_METHOD_BEGIN TimeDateToUnixSecondsCustom
%ifdef TimeDateToUnixSecondsCustom
int32_t %'ModuleName'%.%TimeDateToUnixSecondsCustom(TIMEREC *time, DATEREC *date, int8_t offset_hours, uint16_t baseYear);
%define! Partime
%define! Pardate
%define! Paroffset_hours
%define! ParbaseYear
%define! RetVal
%include Common\GenericTimeDateTimeDateToUnixSecondsCustom.Inc

%endif %- TimeDateToUnixSecondsCustom
%-BW_METHOD_END TimeDateToUnixSecondsCustom
%-************************************************************************************************************
%-BW_METHOD_BEGIN UnixSecondsToTimeDate
%ifdef UnixSecondsToTimeDate
void %'ModuleName'%.%UnixSecondsToTimeDate(int32_t seconds, int8_t offset_hours, TIMEREC *time, DATEREC *date);
%define! Parseconds
%define! Paroffset_hours
%define! Pardate
%define! Partime
%include Common\GenericTimeDateUnixSecondsToTimeDate.Inc

%endif %- UnixSecondsToTimeDate
%-BW_METHOD_END UnixSecondsToTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN TimeDateToUnixSeconds
%ifdef TimeDateToUnixSeconds
int32_t %'ModuleName'%.%TimeDateToUnixSeconds(TIMEREC *time, DATEREC *date, int8_t offset_hours);
%define! Partime
%define! Pardate
%define! Paroffset_hours
%define! RetVal
%include Common\GenericTimeDateTimeDateToUnixSeconds.Inc

%endif %- TimeDateToUnixSeconds
%-BW_METHOD_END TimeDateToUnixSeconds
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddDateString
%ifdef AddDateString
uint8_t %'ModuleName'%.%AddDateString(uint8_t *buf, size_t bufSize, DATEREC *date, uint8_t *format);
%define! Parbuf
%define! ParbufSize
%define! Pardate
%define! Parformat
%define! RetVal
%include Common\GenericTimeDateAddDateString.Inc

%endif %- AddDateString
%-BW_METHOD_END AddDateString
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTimeString
%ifdef AddTimeString
uint8_t %'ModuleName'%.%AddTimeString(uint8_t *buf, size_t bufSize, TIMEREC *time, uint8_t *format);
%define! Parbuf
%define! ParbufSize
%define! Parformat
%define! Partime
%define! RetVal
%include Common\GenericTimeDateAddTimeString.Inc

%endif %- AddTimeString
%-BW_METHOD_END AddTimeString
%-************************************************************************************************************
%-BW_METHOD_BEGIN SyncSWtimeToInternalRTCsec
%ifdef SyncSWtimeToInternalRTCsec
uint8_t %'ModuleName'%.%SyncSWtimeToInternalRTCsec(void);
%define! RetVal
%include Common\GenericTimeDateSyncSWtimeToInternalRTCsec.Inc

%endif %- SyncSWtimeToInternalRTCsec
%-BW_METHOD_END SyncSWtimeToInternalRTCsec
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnDateSet
%ifdef OnDateSet
%INTERFACE OnDateSet
void %OnDateSet(uint8_t day, uint8_t month, uint16_t year);
%define! Parday
%define! Parmonth
%define! Paryear
%include Common\GenericTimeDateOnDateSet.Inc

%endif %- OnDateSet
%-BW_METHOD_END OnDateSet
%-BW_METHOD_BEGIN OnTimeSet
%ifdef OnTimeSet
%INTERFACE OnTimeSet
void %OnTimeSet(uint8_t hour, uint8_t minute, uint8_t second, uint8_t hSecond);
%define! Parhour
%define! Parminute
%define! Parsecond
%define! ParhSecond
%include Common\GenericTimeDateOnTimeSet.Inc

%endif %- OnTimeSet
%-BW_METHOD_END OnTimeSet
%-BW_METHOD_BEGIN OnTimeGet
%ifdef OnTimeGet
%INTERFACE OnTimeGet
void %OnTimeGet(uint8_t *hour, uint8_t *minute, uint8_t *second, uint8_t *hSecond);
%define! Parhour
%define! Parminute
%define! Parsecond
%define! ParhSecond
%include Common\GenericTimeDateOnTimeGet.Inc

%endif %- OnTimeGet
%-BW_METHOD_END OnTimeGet
%-BW_METHOD_BEGIN OnDateGet
%ifdef OnDateGet
%INTERFACE OnDateGet
void %OnDateGet(uint8_t *day, uint8_t *month, uint16_t *year);
%define! Parday
%define! Parmonth
%define! Paryear
%include Common\GenericTimeDateOnDateGet.Inc

%endif %- OnDateGet
%-BW_METHOD_END OnDateGet
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\GenericTimeDateSettings.Inc
%define! Abstract Common\GenericTimeDateAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
#include <stdlib.h> /* for NULL */
#if %'ModuleName'%.CONFIG_USE_EXTERNAL_HW_RTC
%if defined(ExternalRTC)
  #include "%@ExternalRTC@'ModuleName'.h"
%else
  #include "McuExtRTC.h"
%endif
#endif

%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
/* default time/date values */
static const TIMEREC %'ModuleName'%.DefaultTime = {
  %'ModuleName'%.CONFIG_DEFAULT_INITIAL_TIME_HOUR, /* hour */
  %'ModuleName'%.CONFIG_DEFAULT_INITIAL_TIME_MIN,  /* minute */
  %'ModuleName'%.CONFIG_DEFAULT_INITIAL_TIME_SEC,  /* second */
#if %'ModuleName'%.HAS_SEC100_IN_TIMEREC
  0 /* h-second */
#endif
};
static const DATEREC %'ModuleName'%.DefaultDate = {
  %'ModuleName'%.CONFIG_DEFAULT_INITIAL_DATE_YEAR, /* year */
  %'ModuleName'%.CONFIG_DEFAULT_INITIAL_DATE_MONTH,  /* month */
  %'ModuleName'%.CONFIG_DEFAULT_INITIAL_DATE_DAY /* day */
};

#if %'ModuleName'%.TICK_TIME_MS==0
  #error "Tick period cannot be zero!"
#endif
#define %'ModuleName'%.TICKS_PER_S  (1000/%'ModuleName'%.TICK_TIME_MS)%>40/* number of timer ticks per second */

#if %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC
  /* counters used by software RTC */
  static uint8_t CntDay;                                         %>40/* Day counter */
  static uint8_t CntMonth;                                       %>40/* Month counter */
  static uint16_t CntYear;                                       %>40/* Year Counter */
  static uint32_t tickCntr;                                      %>40/* Software tick counter (1 tick = %'ModuleName'%.TICK_TIME_MS ms) */
#endif

/* Table of month length (in days) */
static const uint8_t ULY[12] = {31U,28U,31U,30U,31U,30U,31U,31U,30U,31U,30U,31U}; /* Un-leap-year */
static const uint8_t  LY[12] = {31U,29U,31U,30U,31U,30U,31U,31U,30U,31U,30U,31U}; /* Leap-year */

%ifdef ParseCommand
static uint8_t AddDateToBuf(uint8_t *buf, uint16_t bufSize, DATEREC *tdate) {
  %@Utility@'ModuleName'%.strcatNum16uFormatted(buf, bufSize, tdate->Day, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, '.');
  %@Utility@'ModuleName'%.strcatNum16uFormatted(buf, bufSize, tdate->Month, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, '.');
  %@Utility@'ModuleName'%.strcatNum16u(buf, bufSize, (uint16_t)tdate->Year);
  return ERR_OK;
}

static uint8_t AddTimeToBuf(uint8_t *buf, uint16_t bufSize, TIMEREC *ttime) {
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, ttime->Hour, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, ':');
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, ttime->Min, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, ':');
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, ttime->Sec, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, ',');
#if %'ModuleName'%.HAS_SEC100_IN_TIMEREC
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, ttime->Sec100, '0', 2);
#else
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, 0, '0', 2);
#endif
  return ERR_OK;
}

static uint8_t AddDate(uint8_t *buf, uint16_t bufSize, uint8_t (*GetTimeDateFn)(TIMEREC*, DATEREC*)) {
  DATEREC tdate;

  if (GetTimeDateFn(NULL, &tdate)!=ERR_OK) {
    return ERR_FAILED;
  }
  return AddDateToBuf(buf, bufSize, &tdate);
}

static uint8_t AddTime(uint8_t *buf, uint16_t bufSize, uint8_t (*GetTimeDateFn)(TIMEREC*, DATEREC*)) {
  TIMEREC ttime;

  if (GetTimeDateFn(&ttime, NULL)!=ERR_OK) {
    return ERR_FAILED;
  }
  return AddTimeToBuf(buf, bufSize, &ttime);
}

static uint8_t DateCmd(const unsigned char *cmd, %@Shell@'ModuleName'%.ConstStdIOType *io) {
  /* precondition: cmd points to "%'ModuleName' date" */
  uint8_t day, month;
  uint16_t year;
  const unsigned char *p;
  uint8_t res = ERR_OK;

  p = cmd + sizeof("%'ModuleName' date")-1;
  if (*p==' ') { /* ok, have an argument */
    if (%@Utility@'ModuleName'%.ScanDate(&p, &day, &month, &year) == ERR_OK) { /* ok, format fine */
      /* update software real time clock */
      res = %'ModuleName'%.%SetDate(year, month, day);
      if (res != ERR_OK) {
        %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** Failure setting date\r\n", io->stdErr);
        res = ERR_FAILED;
      }
    } else {
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** error while reading command! ***", io->stdErr);
      %@Shell@'ModuleName'%.SendStr((void *)cmd, io->stdErr);
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdErr);
      res = ERR_FAILED;
    }
  } /* has an argument */
  /* print now current date */
  if (res==ERR_OK) {
    unsigned char buf[sizeof("RTC: Wednesday dd:mm:yyyy\\r\\n")];

    %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"RTC: ");
    if (AddDate(buf, sizeof(buf), %'ModuleName'%.%GetTimeDate)!=ERR_OK) {
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"***Failed to get date\r\n", io->stdErr);
      res = ERR_FAILED;
    } else {
      %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)"\r\n");
      %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
    }
  }
  return res;
}

static uint8_t TimeCmd(const unsigned char *cmd, %@Shell@'ModuleName'%.ConstStdIOType *io) {
  uint8_t hour, minute, second, hSecond;
  const unsigned char *p;
  uint8_t res = ERR_OK;

  p = cmd + sizeof("%'ModuleName' time")-1;
  if (*p==' ') { /* has an argument */
    if (%@Utility@'ModuleName'%.ScanTime(&p, &hour, &minute, &second, &hSecond)==ERR_OK) { /* format fine */
      /* set SW RTC time */
      res = %'ModuleName'%.%SetTime(hour, minute, second, hSecond);
      if (res != ERR_OK) {
        %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** Failure setting time\r\n", io->stdErr);
        res = ERR_FAILED;
      }
    } else {
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** Error while reading command: ", io->stdErr);
      %@Shell@'ModuleName'%.SendStr(cmd, io->stdErr);
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdErr);
      res = ERR_FAILED;
    }
  }
  /* print now current time */
  if (res==ERR_OK) {
    unsigned char buf[sizeof("RTC: hh:mm:ss.hh\\r\\n")+5];

    %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"RTC: ");
    if (AddTime(buf, sizeof(buf), %'ModuleName'%.%GetTimeDate)!=ERR_OK) {
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"***Failed to get time\r\n", io->stdErr);
      res = ERR_FAILED;
    } else {
      %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)"\r\n");
      %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
    }
  }
  return res;
}

static uint8_t PrintStatus(%@Shell@'ModuleName'%.ConstStdIOType *io) {
  uint8_t buf[24];

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"%'ModuleName'", (const unsigned char*)"\r\n", io->stdOut);
#if %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  SW RTC", (const unsigned char*)"", io->stdOut);
  buf[0] = '\0';
  if (AddDate(buf, sizeof(buf), %'ModuleName'%.%GetSWTimeDate)!=ERR_OK) {
    %@Shell@'ModuleName'%.SendStr((unsigned char*)"***Failed to get date!\r\n", io->stdErr);
    return ERR_FAILED;
  }
  %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)", ");
  if (AddTime(buf, sizeof(buf), %'ModuleName'%.%GetSWTimeDate)!=ERR_OK) {
    %@Shell@'ModuleName'%.SendStr((unsigned char*)"***Failed to get time!\r\n", io->stdErr);
    return ERR_FAILED;
  } else {
    %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  }
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);
#endif
#if %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC_LDD || %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC_BEAN
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  HW RTC", (const unsigned char*)"", io->stdOut);
  buf[0] = '\0';
  if (AddDate(buf, sizeof(buf), %'ModuleName'%.%GetInternalRTCTimeDate)!=ERR_OK) {
    %@Shell@'ModuleName'%.SendStr((unsigned char*)"***Failed to get internal RTC date!\r\n", io->stdErr);
    return ERR_FAILED;
  }
  %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)", ");
  if (AddTime(buf, sizeof(buf), %'ModuleName'%.%GetInternalRTCTimeDate)!=ERR_OK) {
    %@Shell@'ModuleName'%.SendStr((unsigned char*)"***Failed to get internal RTC time!\r\n", io->stdErr);
    return ERR_FAILED;
  } else {
    %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  }
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);
#endif
#if %'ModuleName'%.CONFIG_USE_EXTERNAL_HW_RTC
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  Ext. RTC", (const unsigned char*)"", io->stdOut);
  buf[0] = '\0';
  if (AddDate(buf, sizeof(buf), %'ModuleName'%.%GetExternalRTCTimeDate)!=ERR_OK) {
    %@Shell@'ModuleName'%.SendStr((unsigned char*)"***Failed to get external RTC date!\r\n", io->stdErr);
    return ERR_FAILED;
  }
  %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)", ");
  if (AddTime(buf, sizeof(buf), %'ModuleName'%.%GetExternalRTCTimeDate)!=ERR_OK) {
    %@Shell@'ModuleName'%.SendStr((unsigned char*)"***Failed to get external RTC time!\r\n", io->stdErr);
    return ERR_FAILED;
  } else {
    %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  }
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);
#endif
  return ERR_OK;
}

%endif %- ParseCommand
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTick
%ifdef AddTick
%include Common\GenericTimeDateAddTick.Inc
void %'ModuleName'%.%AddTick(void)
{
#if %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC
  const uint8_t *ptr;                                            %>40/* Pointer to ULY/LY table */
  %@CriticalSection@'ModuleName'%.CriticalVariable()

  %@CriticalSection@'ModuleName'%.EnterCritical();               %>40/* need exclusive access to tick counter */
  tickCntr++;                                                    %>40/* Software timer counter increment by timer period */
  %@CriticalSection@'ModuleName'%.ExitCritical();                %>40/* end of critical section */
  if (tickCntr >= 24*3600UL*%'ModuleName'%.TICKS_PER_S) {        %>40/* Does the counter reach 24 hours? */
    tickCntr -= 24*3600UL*%'ModuleName'%.TICKS_PER_S;            %>40/* If yes then reset it by subtracting exactly 24 hours */
    %@CriticalSection@'ModuleName'%.EnterCritical();
    CntDay++;                                                    %>40/* Increment day counter */
    %@CriticalSection@'ModuleName'%.ExitCritical();
    if (CntYear & 0x03U) {                                       %>40/* Is this year un-leap-one? */
      ptr = ULY;                                                 %>40/* Set pointer to un-leap-year day table */
    } else {                                                     %>40/* Is this year leap-one? */
      ptr = LY;                                                  %>40/* Set pointer to leap-year day table */
    }
    ptr--;                                                       %>40/* Decrement the pointer */
    if (CntDay > ptr[CntMonth]) {                                %>40/* Day counter overflow? */
      CntDay = 1U;                                               %>40/* Set day counter on 1 */
      %@CriticalSection@'ModuleName'%.EnterCritical();
      CntMonth++;                                                %>40/* Increment month counter */
      %@CriticalSection@'ModuleName'%.ExitCritical();
      if (CntMonth > 12U) {                                      %>40/* Month counter overflow? */
        CntMonth = 1U;                                           %>40/* Set month counter on 1 */
        %@CriticalSection@'ModuleName'%.EnterCritical();
        CntYear++;                                               %>40/* Increment year counter */
        %@CriticalSection@'ModuleName'%.ExitCritical();
      }
    }
  }
#endif
}

%endif %- AddTick
%-BW_METHOD_END AddTick
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTicks
%ifdef AddTicks
%define! ParnofTicks
%include Common\GenericTimeDateAddTicks.Inc
void %'ModuleName'%.%AddTicks(uint16_t nofTicks)
{
#if %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC
  while(nofTicks>0) {
    %'ModuleName'%.%AddTick();
    nofTicks--;
  }
#else
  (void)nofTicks; /* not used */
#endif
}

%endif %- AddTicks
%-BW_METHOD_END AddTicks
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetSWTimeDate
%ifdef SetSWTimeDate
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateSetSWTimeDate.Inc
uint8_t %'ModuleName'%.%SetSWTimeDate(TIMEREC *time, DATEREC *date)
{
#if %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC
  uint8_t res;
  uint32_t nofTicks;
  bool failed = FALSE;
  %@CriticalSection@'ModuleName'%.CriticalVariable()

  if (time!=NULL) {
    res = %'ModuleName'%.%TimeToTicks(time, &nofTicks);
    if (res!=ERR_OK) {
      failed = TRUE;
    }
    if (res==ERR_OK) {
      %@CriticalSection@'ModuleName'%.EnterCritical();
      tickCntr = nofTicks;
      %@CriticalSection@'ModuleName'%.ExitCritical();
    }
  }
  if (date!=NULL) {
    %@CriticalSection@'ModuleName'%.EnterCritical();
    CntDay = date->Day;
    CntMonth = date->Month;
    CntYear = date->Year;
    %@CriticalSection@'ModuleName'%.ExitCritical();
  }
  if (failed) {
    return ERR_FAILED;
  }
  return ERR_OK;
#else
  return ERR_FAILED;
#endif
}

%endif %- SetSWTimeDate
%-BW_METHOD_END SetSWTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetSWTimeDate
%ifdef GetSWTimeDate
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateGetSWTimeDate.Inc
uint8_t %'ModuleName'%.%GetSWTimeDate(TIMEREC *time, DATEREC *date)
{
#if %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC
  uint8_t res;
  uint32_t ticks;
  bool failed = FALSE;
  %@CriticalSection@'ModuleName'%.CriticalVariable()

  if (time!=NULL) {
    %@CriticalSection@'ModuleName'%.EnterCritical();
    ticks = tickCntr;
    %@CriticalSection@'ModuleName'%.ExitCritical();
    res = %'ModuleName'%.%TicksToTime(ticks, time);
    if (res!=ERR_OK) {
      failed = TRUE;
    }
  }
  if (date!=NULL) {
    %@CriticalSection@'ModuleName'%.EnterCritical();
    date->Year = CntYear;
    date->Month = CntMonth;
    date->Day = CntDay;
    %@CriticalSection@'ModuleName'%.ExitCritical();
  }
  if (failed) {
    return ERR_FAILED;
  }
  return ERR_OK;
#else
  return ERR_FAILED;
#endif
}

%endif %- GetSWTimeDate
%-BW_METHOD_END GetSWTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetTime
%ifdef SetTime
%define! ParHour
%define! ParMin
%define! ParSec
%define! ParSec100
%define! RetVal
%include Common\GenericTimeDateSetTime.Inc
#ifdef __HIWARE__
  #pragma MESSAGE DISABLE C5905 /* multiplication with one (happens if %'ModuleName'%.TICKS_PER_S is 100) */
#endif
uint8_t %'ModuleName'%.%SetTime(uint8_t Hour, uint8_t Min, uint8_t Sec, uint8_t Sec100)
{
  uint8_t res = ERR_FAILED;
  TIMEREC time;
  bool failed = FALSE;

  if ((Sec100>99U) || (Sec>59U) || (Min>59U) || (Hour>23U)) {
    return ERR_RANGE;
  }
  time.Hour = Hour;
  time.Min = Min;
  time.Sec = Sec;
#if %'ModuleName'%.HAS_SEC100_IN_TIMEREC
  time.Sec100 = Sec100;
#endif
#if %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC && %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_SOFTWARE_RTC
  res = %'ModuleName'%.%SetSWTimeDate(&time, NULL);
  if (res!=ERR_OK) {
    failed = TRUE;
  }
#endif
#if %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC && %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_INTERNAL_RTC
  res = %'ModuleName'%.%SetInternalRTCTimeDate(&time, NULL);
  if (res!=ERR_OK) {
    failed = TRUE;
  }
#endif
#if %'ModuleName'%.CONFIG_USE_EXTERNAL_HW_RTC && %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_EXTERNAL_RTC
  res = %'ModuleName'%.%SetExternalRTCTimeDate(&time, NULL);
  if (res!=ERR_OK) {
    failed = TRUE;
  }
#endif
#if %'ModuleName'%.ON_TIME_SET_EVENT
  %'ModuleName'%.ON_TIME_SET_EVENT_NAME(Hour, Min, Sec, Sec100); /* call user event */
#endif
  if (failed) {
    res = ERR_FAILED;
  }
  return res;
}
#ifdef __HIWARE__
  #pragma MESSAGE DEFAULT C5905 /* multiplication with one  */
#endif

%endif %- SetTime
%-BW_METHOD_END SetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTime
%ifdef GetTime
%define! Partime
%define! RetVal
%include Common\GenericTimeDateGetTime.Inc
uint8_t %'ModuleName'%.%GetTime(TIMEREC *time)
{
  uint8_t res;

#if %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC && %'ModuleName'%.CONFIG_USE_GET_TIME_DATE_METHOD==%'ModuleName'%.GET_TIME_DATE_METHOD_SOFTWARE_RTC
  res = %'ModuleName'%.%GetSWTimeDate(time, NULL);
#elif %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC && %'ModuleName'%.CONFIG_USE_GET_TIME_DATE_METHOD==%'ModuleName'%.GET_TIME_DATE_METHOD_INTERNAL_RTC
  res = %'ModuleName'%.%GetInternalRTCTimeDate(time, NULL);
#elif %'ModuleName'%.CONFIG_USE_EXTERNAL_HW_RTC && %'ModuleName'%.CONFIG_USE_GET_TIME_DATE_METHOD==%'ModuleName'%.GET_TIME_DATE_METHOD_EXTERNAL_RTC
  res = %'ModuleName'%.%GetExternalRTCTimeDate(time, NULL);
#else
  #error "invalid configuration!"
  res = ERR_FAILED;
#endif
  /* call user event */
#if %'ModuleName'%.ON_TIME_GET_EVENT
  #if %'ModuleName'%.HAS_SEC100_IN_TIMEREC
    %'ModuleName'%.ON_TIME_GET_EVENT_NAME(&time->Hour, &time->Min, &time->Sec, &time->Sec100);
  #else
    %'ModuleName'%.ON_TIME_GET_EVENT_NAME(&time->Hour, &time->Min, &time->Sec, 0);
  #endif
#endif
  return res;
}

%endif %- GetTime
%-BW_METHOD_END GetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDate
%ifdef SetDate
%define! ParYear
%define! ParMonth
%define! ParDay
%define! RetVal
%include Common\GenericTimeDateSetDate.Inc
uint8_t %'ModuleName'%.%SetDate(uint16_t Year, uint8_t Month, uint8_t Day)
{
  const uint8_t* ptr;                                            %>40/* Pointer to ULY/LY table */
  uint8_t res = ERR_FAILED;
  bool failed = FALSE;
  DATEREC date;

  if ((Year < 1998U) || (Year > 2099U) || (Month > 12U) || (Month == 0U) || (Day > 31U) || (Day == 0U)) {
    return ERR_RANGE;
  }
  ptr = (((Year&0x03U)!=0U)?ULY:LY); /* Set pointer to leap-year or un-leap-year day table */
  if (ptr[Month - 1U] < Day) { /* Does the obtained number of days exceed number of days in the appropriate month & year? */
    return ERR_RANGE;
  }
  date.Year = Year;
  date.Month = Month;
  date.Day = Day;
#if %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC && %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_SOFTWARE_RTC
  res = %'ModuleName'%.%SetSWTimeDate(NULL, &date);
  if (res!=ERR_OK) {
    failed = TRUE;
  }
#endif
#if %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC && %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_INTERNAL_RTC
  res = %'ModuleName'%.%SetInternalRTCTimeDate(NULL, &date);
  if (res!=ERR_OK) {
    failed = TRUE;
  }
#endif
#if %'ModuleName'%.CONFIG_USE_EXTERNAL_HW_RTC && %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_EXTERNAL_RTC
  res = %'ModuleName'%.%SetExternalRTCTimeDate(NULL, &date);
  if (res!=ERR_OK) {
    failed = TRUE;
  }
#endif
#if %'ModuleName'%.ON_DATE_SET_EVENT
  %'ModuleName'%.ON_DATE_SET_EVENT_NAME(Day, Month, Year); /* call user event */
#endif
  if (failed) {
    res = ERR_FAILED;
  }
  return res;
}

%endif %- SetDate
%-BW_METHOD_END SetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDate
%ifdef GetDate
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateGetDate.Inc
uint8_t %'ModuleName'%.%GetDate(DATEREC *date)
{
  uint8_t res;

#if %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC && %'ModuleName'%.CONFIG_USE_GET_TIME_DATE_METHOD==%'ModuleName'%.GET_TIME_DATE_METHOD_SOFTWARE_RTC
  res = %'ModuleName'%.%GetSWTimeDate(NULL, date);
#elif %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC && %'ModuleName'%.CONFIG_USE_GET_TIME_DATE_METHOD==%'ModuleName'%.GET_TIME_DATE_METHOD_INTERNAL_RTC
  res = %'ModuleName'%.%GetInternalRTCTimeDate(NULL, date);
#elif %'ModuleName'%.CONFIG_USE_EXTERNAL_HW_RTC && %'ModuleName'%.CONFIG_USE_GET_TIME_DATE_METHOD==%'ModuleName'%.GET_TIME_DATE_METHOD_EXTERNAL_RTC
  res = %'ModuleName'%.%GetExternalRTCTimeDate(NULL, date);
#else
  #error "invalid configuration!"
  res = ERR_FAILED;
#endif
#if %'ModuleName'%.ON_DATE_GET_EVENT && %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC
  %'ModuleName'%.ON_DATE_GET_EVENT_NAME(&CntDay, &CntMonth, &CntYear); /* call user event */
#endif
  return res;
}

%endif %- GetDate
%-BW_METHOD_END GetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%define! RetVal
%include Common\GenericTimeDateInit.Inc
uint8_t %'ModuleName'%.%Init(void)
{
  /* initialize software RTC time and date */
#if %'ModuleName'%.CONFIG_INIT_SOFTWARE_RTC_METHOD==%'ModuleName'%.INIT_SOFTWARE_RTC_FROM_DEFAULTS
  return %'ModuleName'%.%SetSWTimeDate((TIMEREC*)&%'ModuleName'%.DefaultTime, (DATEREC*)&%'ModuleName'%.DefaultDate);
#elif %'ModuleName'%.CONFIG_INIT_SOFTWARE_RTC_METHOD==%'ModuleName'%.INIT_SOFTWARE_RTC_FROM_INTERNAL_RTC
  return %'ModuleName'%.%SyncWithInternalRTC();
#elif %'ModuleName'%.CONFIG_INIT_SOFTWARE_RTC_METHOD==%'ModuleName'%.INIT_SOFTWARE_RTC_FROM_EXTERNAL_RTC
  return %'ModuleName'%.%SyncWithExternalRTC();
#else
  return ERR_FAILED; /* wrong or no init specified? */
#endif
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\GenericTimeDateParseCommand.Inc
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io)
{
  const uint8_t *p;
  uint8_t hour, minute, second, hsec;
  uint8_t month, day;
  uint16_t year;
  TIMEREC time;
  DATEREC date;
  int32_t unixSecs;
  uint8_t buf[16];

  if (%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_HELP)==0 || %@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' help")==0) {
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"%'ModuleName'", (const unsigned char*)"Group of %'ModuleName' commands\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  help|status", (const unsigned char*)"Print help or status information\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  time [hh:mm:ss[,z]]", (const unsigned char*)"Set the current time. Prints the current time if no argument\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  date [dd.mm.yyyy]", (const unsigned char*)"Set the current date. Prints the current date if no argument\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  dateToSec <datetime>", (const unsigned char*)"Convert date/time int UNIX timestamp (seconds after 1970)\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  secToDate <secs>", (const unsigned char*)"Convert UNIX timestamp to date/time\r\n", io->stdOut);
    *handled = TRUE;
    return ERR_OK;
  } else if ((%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_STATUS)==0) || (%@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' status")==0)) {
    *handled = TRUE;
    return PrintStatus(io);
  } else if (%@Utility@'ModuleName'%.strncmp((char*)cmd, "%'ModuleName' secToDate ", sizeof("%'ModuleName' secToDate ")-1)==0) {
    *handled = TRUE;
    p = cmd+sizeof("%'ModuleName' secToDate ")-1;
    if (%@Utility@'ModuleName'%.ScanDecimal32sNumber(&p, &unixSecs)==ERR_OK) {
      %'ModuleName'%.%UnixSecondsToTimeDate(unixSecs, 0, &time, &date);
      buf[0] = '\0';
      AddDateToBuf(buf, sizeof(buf), &date);
      %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
      %@Shell@'ModuleName'%.SendStr((uint8_t*)" ", io->stdOut);
      buf[0] = '\0';
      AddTimeToBuf(buf, sizeof(buf), &time);
      %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
      %@Shell@'ModuleName'%.SendStr((uint8_t*)"\r\n", io->stdOut);
    } else {
      %@Shell@'ModuleName'%.SendStr((uint8_t*)"Wrong second format.\r\n", io->stdErr);
    }
  } else if (%@Utility@'ModuleName'%.strncmp((char*)cmd, "%'ModuleName' dateToSec ", sizeof("%'ModuleName' dateToSec ")-1)==0) {
    *handled = TRUE;
    p = cmd+sizeof("%'ModuleName' dateToSec ")-1;
    if (%@Utility@'ModuleName'%.ScanDate(&p, &day, &month, &year)==ERR_OK) { /* format fine */
      if (%@Utility@'ModuleName'%.ScanTime(&p, &hour, &minute, &second, &hsec)==ERR_OK) { /* format fine */
        time.Hour = hour;
        time.Min = minute;
        time.Sec = second;
#if %'ModuleName'%.HAS_SEC100_IN_TIMEREC
        time.Sec100 = 0;
#endif
        date.Day = day;
        date.Month = month;
        date.Year = year;
        unixSecs = %'ModuleName'%.%TimeDateToUnixSeconds(&time, &date, 0);
        %@Shell@'ModuleName'%.SendNum32s(unixSecs, io->stdOut);
        %@Shell@'ModuleName'%.SendStr((uint8_t*)" sec\r\n", io->stdOut);
      } else {
        %@Shell@'ModuleName'%.SendStr((uint8_t*)"Wrong time format.\r\n", io->stdErr);
        return ERR_FAILED;
      }
    } else {
      %@Shell@'ModuleName'%.SendStr((uint8_t*)"Wrong date format.\r\n", io->stdErr);
      return ERR_FAILED;
    }
  } else if (%@Utility@'ModuleName'%.strncmp((char*)cmd, "%'ModuleName' date", sizeof("%'ModuleName' date")-1)==0) {
    *handled = TRUE;
    return DateCmd(cmd, io);
  } else if (%@Utility@'ModuleName'%.strncmp((char*)cmd, "%'ModuleName' time", sizeof("%'ModuleName' time")-1)==0) {
    *handled = TRUE;
    return TimeCmd(cmd, io);
  }
  return ERR_OK;
}

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN DeInit
%ifdef DeInit
%include Common\GenericTimeDateDeInit.Inc
void %'ModuleName'%.%DeInit(void)
{
  /* Nothing to do */
}

%endif %- DeInit
%-BW_METHOD_END DeInit
%-************************************************************************************************************
%-BW_METHOD_BEGIN TicksToTime
%ifdef TicksToTime
%define! Particks
%define! Partime
%define! RetVal
%include Common\GenericTimeDateTicksToTime.Inc
uint8_t %'ModuleName'%.%TicksToTime(uint32_t ticks, TIMEREC *time)
{
  time->Hour = (uint8_t)(ticks/(3600*%'ModuleName'%.TICKS_PER_S));%>40/* number of hours */
  ticks %%= (3600*%'ModuleName'%.TICKS_PER_S);                   %>40/* remainder of ticks inside hour */
  time->Min = (uint8_t)(ticks/(60*%'ModuleName'%.TICKS_PER_S));  %>40/* number of minutes */
  ticks %%= (60*%'ModuleName'%.TICKS_PER_S);                     %>40/* remainder of ticks inside minute */
  time->Sec = (uint8_t)(ticks/%'ModuleName'%.TICKS_PER_S);       %>40/* number of seconds */
  ticks %%= %'ModuleName'%.TICKS_PER_S;
#if %'ModuleName'%.HAS_SEC100_IN_TIMEREC
  time->Sec100 = (uint8_t)((ticks*(1000/%'ModuleName'%.TICKS_PER_S))/10);%>40/* number of 1/100 seconds */
#endif
  return ERR_OK;
}

%endif %- TicksToTime
%-BW_METHOD_END TicksToTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN TimeToTicks
%ifdef TimeToTicks
%define! Particks
%define! Partime
%define! RetVal
%include Common\GenericTimeDateTimeToTicks.Inc
uint8_t %'ModuleName'%.%TimeToTicks(TIMEREC *time, uint32_t *ticks)
{
  uint32_t cntr;

  /* Load given time re-calculated to %'ModuleName'%.TICK_TIME_MS ms ticks into software tick counter */
  cntr = (3600UL*%'ModuleName'%.TICKS_PER_S*(uint32_t)time->Hour)
              + (60UL*%'ModuleName'%.TICKS_PER_S*(uint32_t)time->Min)
              + (%'ModuleName'%.TICKS_PER_S*(uint32_t)time->Sec)
#if %'ModuleName'%.HAS_SEC100_IN_TIMEREC
              + ((%'ModuleName'%.TICKS_PER_S/100)*(uint32_t)time->Sec100)
#endif
              ;
  *ticks = cntr;
  return ERR_OK;
}

%endif %- TimeToTicks
%-BW_METHOD_END TimeToTicks
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetInternalRTCTimeDate
%ifdef SetInternalRTCTimeDate
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateSetInternalRTCTimeDate.Inc
uint8_t %'ModuleName'%.%SetInternalRTCTimeDate(TIMEREC *time, DATEREC *date)
{
#if %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC_LDD
  LDD_RTC_TTime timeDate;

  /* get current time/date */
%if defined(LDDRTC)
  %@LDDRTC@'ModuleName'%.GetTime(%@LDDRTC@'ModuleName'%.DeviceData, &timeDate); /* get information from HW RTC */
%else
  RTC1_GetTime(RTC1_DeviceData, &timeDate); /* get information from HW RTC */
%endif
  if (time!=NULL) {
    timeDate.Hour = time->Hour;
    timeDate.Minute = time->Min;
    timeDate.Second = time->Sec;
  }
  if (date!=NULL) {
    timeDate.Year = date->Year;
    timeDate.Month = date->Month;
    timeDate.Day = date->Day;
    timeDate.DayOfWeek = %'ModuleName'%.%CalculateDayOfWeek(date->Year, date->Month, date->Day);
  }
%if defined(LDDRTC)
  return %@LDDRTC@'ModuleName'%.SetTime(%@LDDRTC@'ModuleName'%.DeviceData, &timeDate); /* get information from HW RTC */
%else
  return RTC1_SetTime(RTC1_DeviceData, &timeDate); /* get information from HW RTC */
%endif
#elif %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC_BEAN
  uint8_t res;

  if (time!=NULL) {
  %if defined(RTC)
    res = %@RTC@'ModuleName'%.SetTime(time->Hour, time->Min, time->Sec); /* set information in HW RTC */
  %else
    res = RTC1_SetTime(time->Hour, time->Min, time->Sec); /* set information in HW RTC */
  %endif
    if (res!=ERR_OK) {
      return res;
    }
  }
  if (date!=NULL) {
  %if defined(RTC)
    res = %@RTC@'ModuleName'%.SetDate(date->Year, date->Month, date->Day); /* set information in HW RTC */
  %else
    res = RTC1_SetDate(date); /* set information in HW RTC */
  %endif
    if (res!=ERR_OK) {
      return res;
    }
  }
  return ERR_OK;
#else
  (void)time;
  (void)date;
  return ERR_FAILED; /* no HW RTC configured */
#endif
}

%endif %- SetInternalRTCTimeDate
%-BW_METHOD_END SetInternalRTCTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetInternalRTCTimeDate
%ifdef GetInternalRTCTimeDate
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateGetInternalRTCTimeDate.Inc
uint8_t %'ModuleName'%.%GetInternalRTCTimeDate(TIMEREC *time, DATEREC *date)
{
#if %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC_LDD
  LDD_RTC_TTime timeDate;

%if defined(LDDRTC)
  %@LDDRTC@'ModuleName'%.GetTime(%@LDDRTC@'ModuleName'%.DeviceData, &timeDate); /* get information from HW RTC */
%else
  RTC1_GetTime(RTC1_DeviceData, &timeDate); /* get information from HW RTC */
%endif
  if (time!=NULL) {
    time->Hour = timeDate.Hour;
    time->Min = timeDate.Minute;
    time->Sec = timeDate.Second;
#if %'ModuleName'%.HAS_SEC100_IN_TIMEREC
    time->Sec100 = 0;
#endif
  }
  if (date!=NULL) {
    date->Year = timeDate.Year;
    date->Month = timeDate.Month;
    date->Day = timeDate.Day;
  }
  return ERR_OK;
#elif %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC_BEAN
  TIMEREC t;
  DATEREC d;
  uint8_t res;

  if (Time!=NULL) {
  %if defined(RTC)
    res = %@RTC@'ModuleName'%.GetTime(&t); /* get information from HW RTC */
  %else
    res = RTC1_GetTime(&t); /* get information from HW RTC */
  %endif
    if (res!=ERR_OK) {
      return res;
    }
    *time = t; /* struct copy */
  }
  if (date!=NULL) {
  %if defined(RTC)
    res = %@RTC@'ModuleName'%.GetDate(&d); /* get information from HW RTC */
  %else
    res = RTC1_GetDate(&d); /* get information from HW RTC */
  %endif
    if (res!=ERR_OK) {
      return res;
    }
    *date = d; /* struct copy */
  }
  return ERR_OK;
#else
  (void)time;
  (void)date;
  return ERR_FAILED; /* no HW RTC configured */
#endif
}

%endif %- GetInternalRTCTimeDate
%-BW_METHOD_END GetInternalRTCTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalculateDayOfWeek
%ifdef CalculateDayOfWeek
%define! ParYear
%define! ParMonth
%define! ParDay
%define! RetVal
%include Common\GenericTimeDateCalculateDayOfWeek.Inc
uint8_t %'ModuleName'%.%CalculateDayOfWeek(uint16_t Year, uint8_t Month, uint8_t Day)
{
  /* see http://stackoverflow.com/questions/478694/what-is-the-easiest-algorithm-to-find-the-day-of-week-of-day-zero-of-a-given-yea */
  int32_t c, y, cc, yy, m, d;
  uint8_t dayOfWeek;

  cc = Year/100;
  yy = Year-((Year/100)*100);
  c = (cc/4) - 2*cc-1;
  y = 5*yy/4;
  m = 26*(Month+1)/10;
  d = Day;

  dayOfWeek = (uint8_t)(c+y+m+d)%%7;
  return dayOfWeek; /* 0: Sunday, 1: Monday, ... 6: Saturday */
}

%endif %- CalculateDayOfWeek
%-BW_METHOD_END CalculateDayOfWeek
%-************************************************************************************************************
%-BW_METHOD_BEGIN SyncSWtimeToInternalRTCsec
%ifdef SyncSWtimeToInternalRTCsec
%define! RetVal
%include Common\GenericTimeDateSyncSWtimeToInternalRTCsec.Inc
uint8_t %'ModuleName'%.%SyncSWtimeToInternalRTCsec(void)
{
  /* This method synchronizes the software RTC with the internal HW RTC.
   * Because the internal RTC only counts seconds, we sync on a second change.
   */
  TIMEREC time;
  uint8_t secs;

  if (%'ModuleName'%.%GetInternalRTCTimeDate(&time, NULL)!=ERR_OK) {
    return ERR_FAILED;
  }
  secs = time.Sec; /* remember current second counter */
  do {
    if (%'ModuleName'%.%GetInternalRTCTimeDate(&time, NULL)!=ERR_OK) {
      return ERR_FAILED;
    }
  } while(secs==time.Sec);
  /* internal RTC has switched to the new second: sync internal RTC with it */
  if (%'ModuleName'%.SetSWTimeDate(&time, NULL)!=ERR_OK) { /* sync software RTC from HW RTC */
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- SyncSWtimeToInternalRTCsec
%-BW_METHOD_END SyncSWtimeToInternalRTCsec
%-************************************************************************************************************
%-BW_METHOD_BEGIN SyncWithInternalRTC
%ifdef SyncWithInternalRTC
%define! RetVal
%include Common\GenericTimeDateSyncWithInternalRTC.Inc
uint8_t %'ModuleName'%.%SyncWithInternalRTC(void)
{
#if %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC_LDD || %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC_BEAN
  TIMEREC time;
  DATEREC date;
  uint8_t res;

  res = %'ModuleName'%.%GetInternalRTCTimeDate(&time, &date);
  if (res!=ERR_OK) {
    return res;
  }
  /* update software time from hardware information */
#if %'ModuleName'%.HAS_SEC100_IN_TIMEREC
  res = %'ModuleName'%.%SetTime(time.Hour, time.Min, time.Sec, time.Sec100);
#else
  res = %'ModuleName'%.%SetTime(time.Hour, time.Min, time.Sec, 0);
#endif
  if (res!=ERR_OK) {
    return res;
  }
  res = %'ModuleName'%.%SetDate(date.Year, date.Month, date.Day);
  if (res!=ERR_OK) {
    return res;
  }
  /* now sync to the second of the internal RTC */
  res = %'ModuleName'%.%SyncSWtimeToInternalRTCsec();
  if (res!=ERR_OK) {
    return res;
  }
  return ERR_OK;
#else
  return ERR_FAILED; /* no hardware RTC available */
#endif
}

%endif %- SyncWithInternalRTC
%-BW_METHOD_END SyncWithInternalRTC
%-************************************************************************************************************
%-BW_METHOD_BEGIN SyncWithExternalRTC
%ifdef SyncWithExternalRTC
%define! RetVal
%include Common\GenericTimeDateSyncWithExternalRTC.Inc
uint8_t %'ModuleName'%.%SyncWithExternalRTC(void)
{
#if %'ModuleName'%.CONFIG_USE_EXTERNAL_HW_RTC
  TIMEREC time;
  DATEREC date;
  uint8_t res;

  res = %'ModuleName'%.%GetExternalRTCTimeDate(&time, &date);
  if (res!=ERR_OK) {
    return res;
  }
  /* update software time from hardware information */
#if %'ModuleName'%.HAS_SEC100_IN_TIMEREC
  res = %'ModuleName'%.%SetTime(time.Hour, time.Min, time.Sec, time.Sec100);
#else
  res = %'ModuleName'%.%SetTime(time.Hour, time.Min, time.Sec, 0);
#endif
  if (res!=ERR_OK) {
    return res;
  }
  return %'ModuleName'%.%SetDate(date.Year, date.Month, date.Day);
#else
  return ERR_FAILED; /* no external RTC available */
#endif
}

%endif %- SyncWithExternalRTC
%-BW_METHOD_END SyncWithExternalRTC
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetExternalRTCTimeDate
%ifdef SetExternalRTCTimeDate
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateSetExternalRTCTimeDate.Inc
uint8_t %'ModuleName'%.%SetExternalRTCTimeDate(TIMEREC *time, DATEREC *date)
{
#if %'ModuleName'%.CONFIG_USE_EXTERNAL_HW_RTC
  uint8_t res;

  if (time!=NULL) {
%if defined(ExternalRTC)
    res = %@ExternalRTC@'ModuleName'%.SetTime(time->Hour, time->Min, time->Sec,
%else
    res = McuExtRTC_SetTime(time->Hour, time->Min, time->Sec,
%endif
#if %'ModuleName'%.HAS_SEC100_IN_TIMEREC
        time->Sec100
#else
        0
#endif
    );
    if (res!=ERR_OK) {
      return res;
    }
  }
  if (date!=NULL) {
%if defined(ExternalRTC)
    res = %@ExternalRTC@'ModuleName'%.SetDate(date->Year, date->Month, date->Day);
%else
    res = McuExtRTC_SetDate(date->Year, date->Month, date->Day);
%endif
    if (res!=ERR_OK) {
      return res;
    }
  }
  return ERR_OK;
#else
  (void)time;
  (void)date;
  return ERR_FAILED; /* no external RTC available */
#endif
}

%endif %- SetExternalRTCTimeDate
%-BW_METHOD_END SetExternalRTCTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetExternalRTCTimeDate
%ifdef GetExternalRTCTimeDate
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateGetExternalRTCTimeDate.Inc
uint8_t %'ModuleName'%.%GetExternalRTCTimeDate(TIMEREC *time, DATEREC *date)
{
#if %'ModuleName'%.CONFIG_USE_EXTERNAL_HW_RTC
  uint8_t res;

  if (time!=NULL) {
%if defined(ExternalRTC)
    res = %@ExternalRTC@'ModuleName'%.GetTime(time);
%else
    res = McuExtRTC_GetTime(time);
%endif
    if (res!=ERR_OK) {
      return res;
    }
  }
  if (date!=NULL) {
%if defined(ExternalRTC)
    res = %@ExternalRTC@'ModuleName'%.GetDate(date);
%else
    res = McuExtRTC_GetDate(date);
%endif
    if (res!=ERR_OK) {
      return res;
    }
  }
  return ERR_OK;
#else
  (void)time;
  (void)date;
  return ERR_FAILED; /* no external RTC available */
#endif
}

%endif %- GetExternalRTCTimeDate
%-BW_METHOD_END GetExternalRTCTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetTimeDate
%ifdef SetTimeDate
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateSetTimeDate.Inc
uint8_t %'ModuleName'%.%SetTimeDate(TIMEREC *time, DATEREC *date)
{
  uint8_t res = ERR_OK;
  bool failed = FALSE;

#if %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC && %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_SOFTWARE_RTC
  res = %'ModuleName'%.SetSWTimeDate(time, date);
  if (res!=ERR_OK) {
    failed = TRUE;
  }
#endif
#if %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC && %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_INTERNAL_RTC
  res = %'ModuleName'%.SetInternalRTCTimeDate(time, date);
  if (res!=ERR_OK) {
    failed = TRUE;
  }
#endif
#if %'ModuleName'%.CONFIG_USE_EXTERNAL_HW_RTC && %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_EXTERNAL_RTC
  res = %'ModuleName'%.SetExternalRTCTimeDate(time, date);
  if (res!=ERR_OK) {
    failed = TRUE;
  }
#endif
  if (failed) {
    res = ERR_FAILED;
  }
  return res;
}

%endif %- SetTimeDate
%-BW_METHOD_END SetTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTimeDate
%ifdef GetTimeDate
%define! Partime
%define! Pardate
%define! RetVal
%include Common\GenericTimeDateGetTimeDate.Inc
uint8_t %'ModuleName'%.%GetTimeDate(TIMEREC *time, DATEREC *date)
{
  uint8_t res;

#if %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC && %'ModuleName'%.CONFIG_USE_GET_TIME_DATE_METHOD==%'ModuleName'%.GET_TIME_DATE_METHOD_SOFTWARE_RTC
  res = %'ModuleName'%.%GetSWTimeDate(time, date);
#elif %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC && %'ModuleName'%.CONFIG_USE_GET_TIME_DATE_METHOD==%'ModuleName'%.GET_TIME_DATE_METHOD_INTERNAL_RTC
  res = %'ModuleName'%.%GetInternalRTCTimeDate(time, date);
#elif %'ModuleName'%.CONFIG_USE_EXTERNAL_HW_RTC && %'ModuleName'%.CONFIG_USE_GET_TIME_DATE_METHOD==%'ModuleName'%.GET_TIME_DATE_METHOD_EXTERNAL_RTC
  res = %'ModuleName'%.%GetExternalRTCTimeDate(time, date);
#else
  #error "invalid configuration!"
  res = ERR_FAILED;
#endif
  return res;
}

%endif %- GetTimeDate
%-BW_METHOD_END GetTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN UnixSecondsToTimeDateCustom
%ifdef UnixSecondsToTimeDateCustom
%define! Parseconds
%define! Paroffset_hours
%define! Pardate
%define! Partime
%define! ParbaseYear
%include Common\GenericTimeDateUnixSecondsToTimeDateCustom.Inc
void %'ModuleName'%.%UnixSecondsToTimeDateCustom(int32_t seconds, int8_t offset_hours, TIMEREC *time, DATEREC *date, uint16_t baseYear)
{
  /* Implementation based on https://www.experts-exchange.com/questions/26868405/convert-unix-time-stamp-for-8-bit-C-compiler.html */
  uint8_t daysmonth[] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
  int32_t secs_per_year;
  int32_t secs_per_month;
  uint16_t year;
  uint8_t month;
  uint8_t day;
  uint8_t hours;
  uint8_t minutes;

  /* adjust seconds to localtime */
  seconds -= (int32_t)offset_hours*3600;
  /* year */
  year = baseYear;
  if (%@Utility@'ModuleName'%.IsLeapYear(year)) {
    secs_per_year = (365+1)*24*3600;
  } else {
    secs_per_year = 365*24*3600;
  }
  while (seconds>=secs_per_year) {
    seconds -= secs_per_year;
    year++;
    if (%@Utility@'ModuleName'%.IsLeapYear(year)) {
      secs_per_year = (365+1)*24*3600;
    } else {
      secs_per_year = 365*24*3600;
    }
  }
  /* month update based on leap year */
  if (%@Utility@'ModuleName'%.IsLeapYear(year)) { /* adjust leap year month days */
    daysmonth[2] = 29;
  } else {
    daysmonth[2] = 28;
  }
  /* month */
  month = 1;
  secs_per_month = (int32_t)daysmonth[1]*24*3600;
  while (seconds >= secs_per_month) {
    seconds -= secs_per_month;
    month++;
    secs_per_month = (int32_t)daysmonth[month]*24*3600;
  }
  /* day */
  day = (uint8_t)(seconds/(24*3600))+1;
  seconds = seconds%%(24*3600);

  hours   = (uint8_t)(seconds/3600);
  seconds = seconds%%3600;

  minutes = (uint8_t)(seconds/60);
  seconds = seconds%%60;

  if (date!=NULL) {
    date->Day = day;
    date->Month = month;
    date->Year = year;
  }
  if (time!=NULL) {
    time->Hour = hours;
    time->Min = minutes;
    time->Sec = (uint8_t)seconds;
#if %'ModuleName'%.HAS_SEC100_IN_TIMEREC
    time->Sec100 = 0;
#endif
  }
}

%endif %- UnixSecondsToTimeDateCustom
%-BW_METHOD_END UnixSecondsToTimeDateCustom
%-************************************************************************************************************
%-BW_METHOD_BEGIN TimeDateToUnixSecondsCustom
%ifdef TimeDateToUnixSecondsCustom
%define! Partime
%define! Pardate
%define! Paroffset_hours
%define! ParbaseYear
%define! RetVal
%include Common\GenericTimeDateTimeDateToUnixSecondsCustom.Inc
int32_t %'ModuleName'%.%TimeDateToUnixSecondsCustom(TIMEREC *time, DATEREC *date, int8_t offset_hours, uint16_t baseYear)
{
  /* implementation based on https://www.experts-exchange.com/questions/26868405/convert-unix-time-stamp-for-8-bit-C-compiler.html */
  uint8_t daysmonth[] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
  int32_t nofSecs;
  uint16_t year;
  uint8_t month;

  /* calculate the seconds for the given day */
  nofSecs = (int32_t)time->Sec;
  nofSecs += ((int32_t)time->Min)*60;
  nofSecs += (int32_t)time->Hour*3600;
  nofSecs += (int32_t)offset_hours*3600;
  nofSecs += (int32_t)(date->Day-1)*24*3600;
  /* month update based on leap year */
  if (%@Utility@'ModuleName'%.IsLeapYear(date->Year)) { /* adjust leap year month days */
    daysmonth[2] = 29;
  } else {
    daysmonth[2] = 28;
  }
  /* calculate the seconds for the months in the given date */
  for (month = date->Month-1; month>0; month--) {
    nofSecs += (int32_t)daysmonth[month]*24*3600;
  }
  /* count the years back to the base year */
  for (year=date->Year-1; year>=baseYear; year--) {
    if (%@Utility@'ModuleName'%.IsLeapYear(year)) {
      nofSecs += (365+1)*24*3600;
    } else {
      nofSecs += 365*24*3600;
    }
  }
  return nofSecs;
}

%endif %- TimeDateToUnixSecondsCustom
%-BW_METHOD_END TimeDateToUnixSecondsCustom
%-************************************************************************************************************
%-BW_METHOD_BEGIN UnixSecondsToTimeDate
%ifdef UnixSecondsToTimeDate
%define! Parseconds
%define! Paroffset_hours
%define! Pardate
%define! Partime
%include Common\GenericTimeDateUnixSecondsToTimeDate.Inc
void %'ModuleName'%.%UnixSecondsToTimeDate(int32_t seconds, int8_t offset_hours, TIMEREC *time, DATEREC *date)
{
  %'ModuleName'%.%UnixSecondsToTimeDateCustom(seconds, offset_hours, time, date, 1970);
}

%endif %- UnixSecondsToTimeDate
%-BW_METHOD_END UnixSecondsToTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN TimeDateToUnixSeconds
%ifdef TimeDateToUnixSeconds
%define! Partime
%define! Pardate
%define! Paroffset_hours
%define! RetVal
%include Common\GenericTimeDateTimeDateToUnixSeconds.Inc
int32_t %'ModuleName'%.%TimeDateToUnixSeconds(TIMEREC *time, DATEREC *date, int8_t offset_hours)
{
  return %'ModuleName'%.%TimeDateToUnixSecondsCustom(time, date, offset_hours, 1970);
}

%endif %- TimeDateToUnixSeconds
%-BW_METHOD_END TimeDateToUnixSeconds
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddDateString
%ifdef AddDateString
%define! Parbuf
%define! ParbufSize
%define! Pardate
%define! Parformat
%define! RetVal
%include Common\GenericTimeDateAddDateString.Inc
uint8_t %'ModuleName'%.%AddDateString(uint8_t *buf, size_t bufSize, DATEREC *date, uint8_t *format)
{
  /* currently only the following format is supported: "dd.mm.yyyy" */
  (void)format; /* not supported yet */
  %@Utility@'ModuleName'%.strcatNum16uFormatted(buf, bufSize, date->Day, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, '.');
  %@Utility@'ModuleName'%.strcatNum16uFormatted(buf, bufSize, date->Month, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, '.');
  %@Utility@'ModuleName'%.strcatNum16u(buf, bufSize, (uint16_t)date->Year);
  return ERR_OK;
}

%endif %- AddDateString
%-BW_METHOD_END AddDateString
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTimeString
%ifdef AddTimeString
%define! Parbuf
%define! ParbufSize
%define! Parformat
%define! Partime
%define! RetVal
%include Common\GenericTimeDateAddTimeString.Inc
uint8_t %'ModuleName'%.%AddTimeString(uint8_t *buf, size_t bufSize, TIMEREC *time, uint8_t *format)
{
  /* currently only the following format is supported: hh:mm:ss,cc" */
  (void)format; /* not supported yet */
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, time->Hour, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, ':');
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, time->Min, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, ':');
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, time->Sec, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, ',');
#if %'ModuleName'%.HAS_SEC100_IN_TIMEREC
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, time->Sec100, '0', 2);
#else
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, 0, '0', 2);
#endif
  return ERR_OK;
}

%endif %- AddTimeString
%-BW_METHOD_END AddTimeString
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnDateSet
%ifdef OnDateSet
%IMPLEMENTATION OnDateSet
%define! Parday
%define! Parmonth
%define! Paryear
%include Common\GenericTimeDateOnDateSet.Inc
void %OnDateSet(uint8_t day, uint8_t month, uint16_t year)
{
  /* Write your code here ... */
}

%endif %- OnDateSet
%-BW_METHOD_END OnDateSet
%-BW_METHOD_BEGIN OnTimeSet
%ifdef OnTimeSet
%IMPLEMENTATION OnTimeSet
%define! Parhour
%define! Parminute
%define! Parsecond
%define! ParhSecond
%include Common\GenericTimeDateOnTimeSet.Inc
void %OnTimeSet(uint8_t hour, uint8_t minute, uint8_t second, uint8_t hSecond)
{
  /* Write your code here ... */
}

%endif %- OnTimeSet
%-BW_METHOD_END OnTimeSet
%-BW_METHOD_BEGIN OnTimeGet
%ifdef OnTimeGet
%IMPLEMENTATION OnTimeGet
%define! Parhour
%define! Parminute
%define! Parsecond
%define! ParhSecond
%include Common\GenericTimeDateOnTimeGet.Inc
void %OnTimeGet(uint8_t *hour, uint8_t *minute, uint8_t *second, uint8_t *hSecond)
{
  /* Write your code here ... */
}

%endif %- OnTimeGet
%-BW_METHOD_END OnTimeGet
%-BW_METHOD_BEGIN OnDateGet
%ifdef OnDateGet
%IMPLEMENTATION OnDateGet
%define! Parday
%define! Parmonth
%define! Paryear
%include Common\GenericTimeDateOnDateGet.Inc
void %OnDateGet(uint8_t *day, uint8_t *month, uint16_t *year)
{
  /* Write your code here ... */
}

%endif %- OnDateGet
%-BW_METHOD_END OnDateGet
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
#if %'ModuleName'%.CONFIG_INIT_IN_PE_LOWLEVEL_INIT
  (void)%'ModuleName'%.%Init();
#endif
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

#ifndef %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED
%ifdef ParseCommand
  #define %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED            %>60 (1)
%else
  #define %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED            %>60 (0)
%endif %- ParseCommand
    /*!< set to 1 if method ParseCommand() is present, 0 otherwise */
#endif

#ifndef %'ModuleName'%.CONFIG_INIT_IN_PE_LOWLEVEL_INIT
%if defined(InitInStartup) & %InitInStartup='yes'
  #define %'ModuleName'%.CONFIG_INIT_IN_PE_LOWLEVEL_INIT         %>60 (1)
%else
  #define %'ModuleName'%.CONFIG_INIT_IN_PE_LOWLEVEL_INIT         %>60 (0)
%endif
    /*!< 1: call Init() during Processor Expert LowLevelInit(), 0: application needs to call Init() */
#endif

/* ******************** settings for software RTC ********************************** */
#ifndef %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC
%if defined(SoftwareRTCEnabled) & %SoftwareRTCEnabled='yes'
  #define %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC                 %>60 (1)
%else
  #define %'ModuleName'%.CONFIG_USE_SOFTWARE_RTC                 %>60 (0)  /* set to 1 if using software RTC, 0 otherwise */
%endif
    /*!< set to 1 if using software RTC, 0 otherwise */
#endif

/* RTC Initialization options during Init() */
#define %'ModuleName'%.INIT_SOFTWARE_RTC_FROM_DEFAULTS           %>60 0  /* init software RTC from default values */
#define %'ModuleName'%.INIT_SOFTWARE_RTC_FROM_INTERNAL_RTC       %>60 1  /* init software RTC from internal RTC values */
#define %'ModuleName'%.INIT_SOFTWARE_RTC_FROM_EXTERNAL_RTC       %>60 2  /* init software RTC from external RTC values */

#ifndef %'ModuleName'%.CONFIG_INIT_SOFTWARE_RTC_METHOD
%if defined(SoftwareRTCInit)
%if %SoftwareRTCInit="InitFromDefaults"
  #define %'ModuleName'%.CONFIG_INIT_SOFTWARE_RTC_METHOD         %>60 %'ModuleName'%.INIT_SOFTWARE_RTC_FROM_DEFAULTS
%elif %SoftwareRTCInit="InitFromInternalRTC"
  #define %'ModuleName'%.CONFIG_INIT_SOFTWARE_RTC_METHOD         %>60 %'ModuleName'%.INIT_SOFTWARE_RTC_FROM_INTERNAL_RTC
%elif %SoftwareRTCInit="InitFromExternalRTC"
  #define %'ModuleName'%.CONFIG_INIT_SOFTWARE_RTC_METHOD         %>60 %'ModuleName'%.INIT_SOFTWARE_RTC_FROM_EXTERNAL_RTC
%endif
%else
  #define %'ModuleName'%.CONFIG_INIT_SOFTWARE_RTC_METHOD         %>60 %'ModuleName'%.INIT_SOFTWARE_RTC_FROM_DEFAULTS
%endif
    /*!< which method to use during Init() */
#endif

/* ****************** settings for internal hardware RTC *************************** */

#ifndef %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC
%if defined(LDDRTC) | defined(RTC)
  #define %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC              %>60 (1)
%else
  #define %'ModuleName'%.CONFIG_USE_INTERNAL_HW_RTC              %>60 (0)
%endif
    /*!< set to 1 if using internal HW RTC, 0 otherwise */
#endif

/* ****************** settings for external hardware RTC *************************** */
#ifndef %'ModuleName'%.CONFIG_USE_EXTERNAL_HW_RTC
%if defined(ExternalRTC)
  #define %'ModuleName'%.CONFIG_USE_EXTERNAL_HW_RTC              %>60 (1)
%else
  #define %'ModuleName'%.CONFIG_USE_EXTERNAL_HW_RTC              %>60 (0)
%endif
    /*!< set to 1 if using external HW RTC driver, 0 otherwise */
#endif

/* ********************************************************************************* */
/* SetTime() and SetDate() configuration */
#ifndef %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_SOFTWARE_RTC
%if defined(SetDateTimeForSoftwareRTC) & %SetDateTimeForSoftwareRTC='yes'
  #define %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_SOFTWARE_RTC%>70 (1)
%else
  #define %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_SOFTWARE_RTC%>70 (0)
%endif
    /*!< 1: SetTime() and SetDate() write to software RTC. 0: do not use software RTC in SetTime() and SetDate() */
#endif

#ifndef %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_INTERNAL_RTC
%if defined(SetDateTimeForInternalRTC) & %SetDateTimeForInternalRTC='yes'
  #define %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_INTERNAL_RTC%>70 (1)
%else
  #define %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_INTERNAL_RTC%>70 (0)
%endif
    /*!< 1: SetTime() and SetDate() write to internal RTC. 0: do not use internal RTC in SetTime() and SetDate() */
#endif

#ifndef %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_EXTERNAL_RTC
%if defined(SetDateTimeForExternalRTC) & %SetDateTimeForExternalRTC='yes'
  #define %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_EXTERNAL_RTC%>70 (1)
%else
  #define %'ModuleName'%.CONFIG_SET_TIME_DATE_METHOD_USES_EXTERNAL_RTC%>70 (0)
%endif
    /*!< 1: SetTime() and SetDate() write to external RTC. 0: do not use external RTC in SetTime() and SetDate() */
#endif

/* ********************************************************************************* */
/* GetTime() and GetDate() configuration options: */
#define %'ModuleName'%.GET_TIME_DATE_METHOD_SOFTWARE_RTC         %>60 1 /* use software RTC */
#define %'ModuleName'%.GET_TIME_DATE_METHOD_INTERNAL_RTC         %>60 2 /* use internal RTC */
#define %'ModuleName'%.GET_TIME_DATE_METHOD_EXTERNAL_RTC         %>60 3 /* use external RTC */

#ifndef %'ModuleName'%.CONFIG_USE_GET_TIME_DATE_METHOD
%if defined(GetTimeDateMethod)
%if GetTimeDateMethod="SoftwareRTC"
  #define %'ModuleName'%.CONFIG_USE_GET_TIME_DATE_METHOD         %>60 %'ModuleName'%.GET_TIME_DATE_METHOD_SOFTWARE_RTC /* specifies method to get time and date */
%elif GetTimeDateMethod="InternalRTC"
  #define %'ModuleName'%.CONFIG_USE_GET_TIME_DATE_METHOD         %>60 %'ModuleName'%.GET_TIME_DATE_METHOD_INTERNAL_RTC /* specifies method to get time and date */
%elif GetTimeDateMethod="ExternalRTC"
  #define %'ModuleName'%.CONFIG_USE_GET_TIME_DATE_METHOD         %>60 %'ModuleName'%.GET_TIME_DATE_METHOD_EXTERNAL_RTC /* specifies method to get time and date */
%endif
%else
  #define %'ModuleName'%.CONFIG_USE_GET_TIME_DATE_METHOD         %>60 %'ModuleName'%.GET_TIME_DATE_METHOD_SOFTWARE_RTC
%endif
    /*!< specifies method to get time and date */
#endif

/* default time and date format strings */
#ifndef %'ModuleName'%.CONFIG_DEFAULT_TIME_FORMAT_STR
  #define %'ModuleName'%.CONFIG_DEFAULT_TIME_FORMAT_STR  "hh:mm:ss,cc"
#endif
#ifndef %'ModuleName'%.CONFIG_DEFAULT_DATE_FORMAT_STR
  #define %'ModuleName'%.CONFIG_DEFAULT_DATE_FORMAT_STR  "dd.mm.yyyy"
#endif

#ifndef %'ModuleName'%.CONFIG_TICK_TIME_MS
  #define %'ModuleName'%.CONFIG_TICK_TIME_MS \
%if defined(SoftwareRTCEnabled) & %SoftwareRTCEnabled='yes'
%if defined(RTOS)
    (1000/%@RTOS@TickRateHz)                                     %>40 /* Period in milliseconds as defined in RTOS component properties, at which %'ModuleName'%.AddTick() is called */
%elif defined(TickTimeMs)
    %TickTimeMs                                                  %>40 /* Period in milliseconds as defined in component properties, at which %'ModuleName'.%.AddTick() is called */
%else
    10                                                           %>40 /* Period in milliseconds, at which %'ModuleName'.%.AddTick() is called */
%endif
%else
    10                                                           %>40 /* Period in milliseconds, at which %'ModuleName'.%.AddTick() is called */
%endif
#endif

/* date/time defaults: */

/* default time/date values */
#ifndef %'ModuleName'%.CONFIG_DEFAULT_INITIAL_TIME_HOUR
  #define %'ModuleName'%.CONFIG_DEFAULT_INITIAL_TIME_HOUR        %>40 %InitialTimeHour
#endif
#ifndef %'ModuleName'%.CONFIG_DEFAULT_INITIAL_TIME_MIN
  #define %'ModuleName'%.CONFIG_DEFAULT_INITIAL_TIME_MIN         %>40 %InitialTimeMin
#endif
#ifndef %'ModuleName'%.CONFIG_DEFAULT_INITIAL_TIME_SEC
  #define %'ModuleName'%.CONFIG_DEFAULT_INITIAL_TIME_SEC         %>40 %InitialTimeSec
#endif
#ifndef %'ModuleName'%.CONFIG_DEFAULT_INITIAL_DATE_YEAR
  #define %'ModuleName'%.CONFIG_DEFAULT_INITIAL_DATE_YEAR        %>40 %InitialDateYear
#endif
#ifndef %'ModuleName'%.CONFIG_DEFAULT_INITIAL_DATE_MONTH
  #define %'ModuleName'%.CONFIG_DEFAULT_INITIAL_DATE_MONTH       %>40 %InitialDateMonth
#endif
#ifndef %'ModuleName'%.CONFIG_DEFAULT_INITIAL_DATE_DAY
  #define %'ModuleName'%.CONFIG_DEFAULT_INITIAL_DATE_DAY         %>40 %InitialDateDay
#endif

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------
