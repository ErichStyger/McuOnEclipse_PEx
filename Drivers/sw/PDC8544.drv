%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    16.12.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_WriteCmd Writes a command to the display
%define! Description_WriteData Write a data byte to the display
%ifdef SPILDD
  %ifdef @SPILDD@OnBlockReceived
    %define! Description_%@SPILDD@OnBlockReceived This event is called when the requested number of data is moved to the input buffer. This method is available only if the ReceiveBlock method is enabled. The event services the event of the inherited component and eventually invokes other events.
  %endif %- @SPILDD@OnBlockReceived
%endif %- SPILDD
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\PDC8544Settings.Inc
%define! Abstract Common\PDC8544Abstract.Inc
%include Common\Header.h

%if (defined(PEversionDecimal) && (PEversionDecimal <=0 '1283')) %- this is only supported with MCU 10.3
%if (CPUfamily = "Kinetis")
/* PEversionDecimal version: %PEversionDecimal (1283 for MCU10.3) */
#include "PE_LDD.h" /* hack for Processor Expert (e.g. in MCU10.3) and LDD: PE_LDD.h includes at the end all shared modules, causing a recursive header file include conflict */
%endif
%endif

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

#define %'ModuleName'%.DISPLAY_HW_NOF_COLUMNS  %'Width'u         %>40/* number of columns in hardware */
#define %'ModuleName'%.DISPLAY_HW_NOF_ROWS     %'Height'u        %>40/* number of rows in hardware */

extern uint8_t %'ModuleName'%.DisplayBuf[((%'ModuleName'%.DISPLAY_HW_NOF_ROWS-1)/8)+1][%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS]; /* buffer for the display */
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

#ifndef __BWUserType_%'ModuleName'_PixelCount
#define __BWUserType_%'ModuleName'_PixelCount
  typedef int16_t %'ModuleName'_PixelCount ;                     %>40/* A word is enough to hold the number of pixels (84x48). */
#endif
#ifndef __BWUserType_%'ModuleName'_PixelDim
#define __BWUserType_%'ModuleName'_PixelDim
  typedef uint8_t %'ModuleName'_PixelDim ;                       %>40/* One byte is enough to describe an x/y position. */
#endif

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
typedef bool %'ModuleName'%.PixelColor;                          %>40/* one bit is enough to describe the color as we have a monochrome display */

#define %'ModuleName'%.PIXEL_BLACK  1 /* 1 is a black pixel */
#define %'ModuleName'%.PIXEL_WHITE  0 /* 0 is a white pixel */
#define %'ModuleName'%.COLOR_PIXEL_SET      %'ModuleName'%.PIXEL_BLACK /* color for a pixel set */
#define %'ModuleName'%.COLOR_PIXEL_CLR      %'ModuleName'%.PIXEL_WHITE /* color for a pixel cleared */
%if DisplayInvert='yes'
#define %'ModuleName'%.COLOR_BLACK          %'ModuleName'%.PIXEL_WHITE
#define %'ModuleName'%.COLOR_WHITE          %'ModuleName'%.PIXEL_BLACK
%else
#define %'ModuleName'%.COLOR_BLACK          %'ModuleName'%.PIXEL_BLACK
#define %'ModuleName'%.COLOR_WHITE          %'ModuleName'%.PIXEL_WHITE
%endif
#define %'ModuleName'%.COLOR_RED            %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_RED     %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_DARK_RED       %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_GREEN          %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_GREEN   %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_DARK_GREEN     %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BLUE           %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_BLUE    %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_DARK_BLUE      %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_YELLOW         %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_YELLOW  %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_ORANGE         %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_GREY           %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_GREY    %'ModuleName'%.COLOR_WHITE

typedef enum {
  %'ModuleName'%.ORIENTATION_PORTRAIT    = 0,
  %'ModuleName'%.ORIENTATION_PORTRAIT180 = 1,
  %'ModuleName'%.ORIENTATION_LANDSCAPE   = 2,
  %'ModuleName'%.ORIENTATION_LANDSCAPE180= 3
} %'ModuleName'%.DisplayOrientation;

#define %'ModuleName'%.HW_WIDTH         %'Width'u                %>40/* width of display in pixels */
#define %'ModuleName'%.HW_HEIGHT        %'Height'u               %>40/* height of display in pixels */

%if %Height <. %Width
#define %'ModuleName'%.HW_SHORTER_SIDE  %'Height'u               %>40/* size of shorter display side in pixels */
#define %'ModuleName'%.HW_LONGER_SIDE   %'Width'u                %>40/* size of longer display side in pixels */
%else
#define %'ModuleName'%.HW_SHORTER_SIDE  %'Width'u                %>40/* size of shorter display side in pixels */
#define %'ModuleName'%.HW_LONGER_SIDE   %'Height'u               %>40/* size of longer display side in pixels */
%endif

%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-Unused %-INHERITED_EVENT_BEGIN D_C BeforeNewSpeed
%-Unused %ifdef @D_C@BeforeNewSpeed
%-Unused void %@D_C@BeforeNewSpeed(void);
%-Unused
%-Unused %endif %- @D_C@BeforeNewSpeed
%-Unused %-INHERITED_EVENT_END D_C BeforeNewSpeed
%-Unused %-INHERITED_EVENT_BEGIN D_C AfterNewSpeed
%-Unused %ifdef @D_C@AfterNewSpeed
%-Unused void %@D_C@AfterNewSpeed(void);
%-Unused
%-Unused %endif %- @D_C@AfterNewSpeed
%-Unused %-INHERITED_EVENT_END D_C AfterNewSpeed
%-Unused %-INHERITED_EVENT_BEGIN D_C OnEnd
%-Unused %ifdef @D_C@OnEnd
%-Unused void %@D_C@OnEnd(void);
%-Unused
%-Unused %endif %- @D_C@OnEnd
%-Unused %-INHERITED_EVENT_END D_C OnEnd
%-Unused %-INHERITED_EVENT_BEGIN D_C OnTrgOverrun
%-Unused %ifdef @D_C@OnTrgOverrun
%-Unused void %@D_C@OnTrgOverrun(void);
%-Unused
%-Unused %endif %- @D_C@OnTrgOverrun
%-Unused %-INHERITED_EVENT_END D_C OnTrgOverrun
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetPos
%ifdef SetPos
void %'ModuleName'%.%SetPos(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y);
%define! Parx
%define! Pary
%include Common\PDC8544SetPos.Inc

%endif %- SetPos
%-BW_METHOD_END SetPos
%-************************************************************************************************************
%-BW_METHOD_BEGIN Clear
%ifdef Clear
void %'ModuleName'%.%Clear(void);
%include Common\PDC8544Clear.Inc

%endif %- Clear
%-BW_METHOD_END Clear
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearLine
%ifdef ClearLine
void %'ModuleName'%.%ClearLine(uint8_t lineNumber);
%define! ParlineNumber
%include Common\PDC8544ClearLine.Inc

%endif %- ClearLine
%-BW_METHOD_END ClearLine
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\PDC8544Init.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteChar
%ifdef WriteChar
void %'ModuleName'%.%WriteChar(uint8_t ch);
%define! Parch
%include Common\PDC8544WriteChar.Inc

%endif %- WriteChar
%-BW_METHOD_END WriteChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteString
%ifdef WriteString
void %'ModuleName'%.%WriteString(uint8_t *str);
%define! Parstr
%include Common\PDC8544WriteString.Inc

%endif %- WriteString
%-BW_METHOD_END WriteString
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteLineStr
%ifdef WriteLineStr
void %'ModuleName'%.%WriteLineStr(uint8_t line, uint8_t *str);
%define! Parline
%define! Parstr
%include Common\PDC8544WriteLineStr.Inc

%endif %- WriteLineStr
%-BW_METHOD_END WriteLineStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateRegion
%ifdef UpdateRegion
void %'ModuleName'%.%UpdateRegion(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h);
%define! Parx
%define! Pary
%define! Parw
%define! Parh
%include Common\PDC8544UpdateRegion.Inc

%endif %- UpdateRegion
%-BW_METHOD_END UpdateRegion
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateFull
%ifdef UpdateFull
void %'ModuleName'%.%UpdateFull(void);
%include Common\PDC8544UpdateFull.Inc

%endif %- UpdateFull
%-BW_METHOD_END UpdateFull
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetContrast
%ifdef SetContrast
void %'ModuleName'%.%SetContrast(uint8_t contrast);
%define! Parcontrast
%include Common\PDC8544SetContrast.Inc

%endif %- SetContrast
%-BW_METHOD_END SetContrast
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetMode
%ifdef SetMode
void %'ModuleName'%.%SetMode(bool inverted);
%define! Parinverted
%include Common\PDC8544SetMode.Inc

%endif %- SetMode
%-BW_METHOD_END SetMode
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetWindow
%ifdef SetWindow
void %'ModuleName'%.%SetWindow(%'ModuleName'_PixelDim x0, %'ModuleName'_PixelDim x1, %'ModuleName'_PixelDim y0, %'ModuleName'_PixelDim y1);
%define! Parx0
%define! Parx1
%define! Pary0
%define! Pary1
%include Common\PDC8544SetWindow.Inc

%endif %- SetWindow
%-BW_METHOD_END SetWindow
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDisplayOrientation
%ifdef GetDisplayOrientation
%'ModuleName'_DisplayOrientation %'ModuleName'%.%GetDisplayOrientation(void);
%define! RetVal
%include Common\PDC8544GetDisplayOrientation.Inc

%endif %- GetDisplayOrientation
%-BW_METHOD_END GetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetWidth
%ifdef GetWidth
%'ModuleName'_PixelDim %'ModuleName'%.%GetWidth(void);

%define! RetVal
%include Common\PDC8544GetWidth.Inc

%endif %- GetWidth
%-BW_METHOD_END GetWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetHeight
%ifdef GetHeight
%'ModuleName'_PixelDim %'ModuleName'%.%GetHeight(void);

%define! RetVal
%include Common\PDC8544GetHeight.Inc

%endif %- GetHeight
%-BW_METHOD_END GetHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLongerSide
%ifdef GetLongerSide
#define %'ModuleName'%.%GetLongerSide() \
  %'ModuleName'%.HW_LONGER_SIDE

%define! RetVal
%include Common\PDC8544GetLongerSide.Inc

%endif %- GetLongerSide
%-BW_METHOD_END GetLongerSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetShorterSide
%ifdef GetShorterSide
#define %'ModuleName'%.%GetShorterSide() \
  %'ModuleName'%.HW_SHORTER_SIDE

%define! RetVal
%include Common\PDC8544GetShorterSide.Inc

%endif %- GetShorterSide
%-BW_METHOD_END GetShorterSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDisplayOrientation
%ifdef SetDisplayOrientation
void %'ModuleName'%.%SetDisplayOrientation(%'ModuleName'_DisplayOrientation newOrientation);
%define! ParnewOrientation
%include Common\PDC8544SetDisplayOrientation.Inc

%endif %- SetDisplayOrientation
%-BW_METHOD_END SetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLCD
%ifdef GetLCD
void %'ModuleName'%.%GetLCD(void);
%include Common\PDC8544GetLCD.Inc

%endif %- GetLCD
%-BW_METHOD_END GetLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN GiveLCD
%ifdef GiveLCD
void %'ModuleName'%.%GiveLCD(void);
%include Common\PDC8544GiveLCD.Inc

%endif %- GiveLCD
%-BW_METHOD_END GiveLCD
%-INHERITED_EVENT_BEGIN SPILDD OnBlockReceived
%if defined(SPILDD) && defined(@SPILDD@OnBlockReceived)
void %@SPILDD@OnBlockReceived(LDD_TUserData *UserDataPtr);

%endif %- @SPILDD@OnBlockReceived
%-INHERITED_EVENT_END SPILDD OnBlockReceived
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\PDC8544Deinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN PutPixel
%ifdef PutPixel
void %'ModuleName'%.%PutPixel(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelColor color);
%define! Parx
%define! Pary
%define! Parcolor
%include Common\PDC8544PutPixel.Inc

%endif %- PutPixel
%-BW_METHOD_END PutPixel
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearBuffer
%ifdef ClearBuffer
void %'ModuleName'%.%ClearBuffer(%'ModuleName'_PixelColor color);
%define! Parcolor
%include Common\PDC8544ClearBuffer.Inc

%endif %- ClearBuffer
%-BW_METHOD_END ClearBuffer
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnBlockReceived
%ifdef OnBlockReceived
%INTERFACE OnBlockReceived
void %OnBlockReceived(LDD_TUserData *UserDataPtr);
%define! ParUserDataPtr
%include Common\PDC8544OnBlockReceived.Inc

%endif %- OnBlockReceived
%-BW_METHOD_END OnBlockReceived
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\PDC8544Settings.Inc
%define! Abstract Common\PDC8544Abstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
#include <string.h> /* for memset() */
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
static %'ModuleName'%.DisplayOrientation orientation = %'ModuleName'%.ORIENTATION_LANDSCAPE;
uint8_t %'ModuleName'%.DisplayBuf[((%'ModuleName'%.DISPLAY_HW_NOF_ROWS-1)/8)+1][%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS]; /* buffer for the display */

%if defined(RESLDD)
static LDD_TDeviceData *RES_DeviceData; /* device handle for RES pin */
%endif
%if defined(SCELDD)
static LDD_TDeviceData *SCE_DeviceData; /* device handle for SCE pin */
%endif
%if defined(SCELDD)
static LDD_TDeviceData *D_C_DeviceData; /* device handle for D_C pin */
%endif

/* some aspects of the protocol are pretty timing sensitive... */
%if %HardwareGroup='yes'
#define SET_SCE()   \
    %@Wait@'ModuleName'%.Waitns(500); \
    %@SCE@'ModuleName'%.SetVal(); \
    %@Wait@'ModuleName'%.Waitns(500);

#define CLR_SCE()   \
    %@Wait@'ModuleName'%.Waitns(100); \
    %@SCE@'ModuleName'%.ClrVal(); \
    %@Wait@'ModuleName'%.Waitns(100);

#define CLR_D_C() \
    %@D_C@'ModuleName'%.ClrVal()
#define SET_D_C() \
    %@D_C@'ModuleName'%.SetVal()

#define CLR_RES() \
    %@RES@'ModuleName'%.ClrVal()
#define SET_RES() \
    %@RES@'ModuleName'%.SetVal()
%endif
%if %HardwareGroupLDD='yes'
#define SET_SCE()   \
    %@Wait@'ModuleName'%.Waitns(500); \
    %@SCELDD@'ModuleName'%.SetVal(SCE_DeviceData); /* set bit */ \
    %@Wait@'ModuleName'%.Waitns(500);

#define CLR_SCE()   \
    %@Wait@'ModuleName'%.Waitns(100); \
    %@SCELDD@'ModuleName'%.ClrVal(SCE_DeviceData); /* clr bit */ \
    %@Wait@'ModuleName'%.Waitns(100);

#define CLR_D_C()   %@D_CLDD@'ModuleName'%.ClrVal(D_C_DeviceData) /* clr bit */
#define SET_D_C()   %@D_CLDD@'ModuleName'%.SetVal(D_C_DeviceData) /* set bit */

#define CLR_RES()   %@RESLDD@'ModuleName'%.ClrVal(RES_DeviceData) /* clr bit */
#define SET_RES()   %@RESLDD@'ModuleName'%.SetVal(RES_DeviceData) /* set bit */

static volatile bool %'ModuleName'%.DataReceivedFlag = FALSE;
%endif

/* ASCII table for LCD: 96 rows * 5 bytes = 480 bytes
   Note that this is the same set of codes for character you
   would find on a HD44780 based character LCD.
   Also, given the size of the LCD (84 pixels by 48 pixels),
   the maximum number of characters per row is only 14. */
#define %'ModuleName'%.FONT_COLUMNS_PER_CHAR   5                 %>40/* number of font data columns rows per character */
#define %'ModuleName'%.FONT_ROWS_PER_CHAR      8                 %>40/* number of font data rows lines per character */
#define %'ModuleName'%.SPACE_COLUMNS_PER_CHAR  1                 %>40/* number of space rows after a character */
#define %'ModuleName'%.MAX_CHARS_PER_LINE      (%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS/(%'ModuleName'%.FONT_COLUMNS_PER_CHAR+%'ModuleName'%.SPACE_COLUMNS_PER_CHAR))%>40/* maximum number of character per line */
#define %'ModuleName'%.MAX_LINES_FOR_DISPLAY   (%'ModuleName'%.DISPLAY_HW_NOF_ROWS/%'ModuleName'%.FONT_ROWS_PER_CHAR)%>40/* maximum number of lines for the display */

static const char table[480] =
 {0x00,0x00,0x00,0x00,0x00, /* 20 space */
  0x00,0x00,0x5f,0x00,0x00, /* 21 ! */
  0x00,0x07,0x00,0x07,0x00, /* 22 " */
  0x14,0x7f,0x14,0x7f,0x14, /* 23 # */
  0x24,0x2a,0x7f,0x2a,0x12, /* 24 $ */
  0x23,0x13,0x08,0x64,0x62, /* 25 %% */
  0x36,0x49,0x55,0x22,0x50, /* 26 & */
  0x00,0x05,0x03,0x00,0x00, /* 27 ' */
  0x00,0x1c,0x22,0x41,0x00, /* 28 ( */
  0x00,0x41,0x22,0x1c,0x00, /* 29 ) */
  0x14,0x08,0x3e,0x08,0x14, /* 2a * */
  0x08,0x08,0x3e,0x08,0x08, /* 2b + */
  0x00,0x50,0x30,0x00,0x00, /* 2c , */
  0x08,0x08,0x08,0x08,0x08, /* 2d - */
  0x00,0x60,0x60,0x00,0x00, /* 2e . */
  0x20,0x10,0x08,0x04,0x02, /* 2f / */
  0x3e,0x51,0x49,0x45,0x3e, /* 30 0 */
  0x00,0x42,0x7f,0x40,0x00, /* 31 1 */
  0x42,0x61,0x51,0x49,0x46, /* 32 2 */
  0x21,0x41,0x45,0x4b,0x31, /* 33 3 */
  0x18,0x14,0x12,0x7f,0x10, /* 34 4 */
  0x27,0x45,0x45,0x45,0x39, /* 35 5 */
  0x3c,0x4a,0x49,0x49,0x30, /* 36 6 */
  0x01,0x71,0x09,0x05,0x03, /* 37 7 */
  0x36,0x49,0x49,0x49,0x36, /* 38 8 */
  0x06,0x49,0x49,0x29,0x1e, /* 39 9 */
  0x00,0x36,0x36,0x00,0x00, /* 3a : */
  0x00,0x56,0x36,0x00,0x00, /* 3b ; */
  0x08,0x14,0x22,0x41,0x00, /* 3c < */
  0x14,0x14,0x14,0x14,0x14, /* 3d = */
  0x00,0x41,0x22,0x14,0x08, /* 3e > */
  0x02,0x01,0x51,0x09,0x06, /* 3f ? */
  0x32,0x49,0x79,0x41,0x3e, /* 40 @ */
  0x7e,0x11,0x11,0x11,0x7e, /* 41 A */
  0x7f,0x49,0x49,0x49,0x36, /* 42 B */
  0x3e,0x41,0x41,0x41,0x22, /* 43 C */
  0x7f,0x41,0x41,0x22,0x1c, /* 44 D */
  0x7f,0x49,0x49,0x49,0x41, /* 45 E */
  0x7f,0x09,0x09,0x09,0x01, /* 46 F */
  0x3e,0x41,0x49,0x49,0x7a, /* 47 G */
  0x7f,0x08,0x08,0x08,0x7f, /* 48 H */
  0x00,0x41,0x7f,0x41,0x00, /* 49 I */
  0x20,0x40,0x41,0x3f,0x01, /* 4a J */
  0x7f,0x08,0x14,0x22,0x41, /* 4b K */
  0x7f,0x40,0x40,0x40,0x40, /* 4c L */
  0x7f,0x02,0x0c,0x02,0x7f, /* 4d M */
  0x7f,0x04,0x08,0x10,0x7f, /* 4e N */
  0x3e,0x41,0x41,0x41,0x3e, /* 4f O */
  0x7f,0x09,0x09,0x09,0x06, /* 50 P */
  0x3e,0x41,0x51,0x21,0x5e, /* 51 Q */
  0x7f,0x09,0x19,0x29,0x46, /* 52 R */
  0x46,0x49,0x49,0x49,0x31, /* 53 S */
  0x01,0x01,0x7f,0x01,0x01, /* 54 T */
  0x3f,0x40,0x40,0x40,0x3f, /* 55 U */
  0x1f,0x20,0x40,0x20,0x1f, /* 56 V */
  0x3f,0x40,0x38,0x40,0x3f, /* 57 W */
  0x63,0x14,0x08,0x14,0x63, /* 58 X */
  0x07,0x08,0x70,0x08,0x07, /* 59 Y */
  0x61,0x51,0x49,0x45,0x43, /* 5a Z */
  0x00,0x7f,0x41,0x41,0x00, /* 5b [ */
  0x02,0x04,0x08,0x10,0x20, /* 5c Yen Currency Sign */
  0x00,0x41,0x41,0x7f,0x00, /* 5d ] */
  0x04,0x02,0x01,0x02,0x04, /* 5e ^ */
  0x40,0x40,0x40,0x40,0x40, /* 5f _ */
  0x00,0x01,0x02,0x04,0x00, /* 60 ` */
  0x20,0x54,0x54,0x54,0x78, /* 61 a */
  0x7f,0x48,0x44,0x44,0x38, /* 62 b */
  0x38,0x44,0x44,0x44,0x20, /* 63 c */
  0x38,0x44,0x44,0x48,0x7f, /* 64 d */
  0x38,0x54,0x54,0x54,0x18, /* 65 e */
  0x08,0x7e,0x09,0x01,0x02, /* 66 f */
  0x0c,0x52,0x52,0x52,0x3e, /* 67 g */
  0x7f,0x08,0x04,0x04,0x78, /* 68 h */
  0x00,0x44,0x7d,0x40,0x00, /* 69 i */
  0x20,0x40,0x44,0x3d,0x00, /* 6a j */
  0x7f,0x10,0x28,0x44,0x00, /* 6b k */
  0x00,0x41,0x7f,0x40,0x00, /* 6c l */
  0x7c,0x04,0x18,0x04,0x78, /* 6d m */
  0x7c,0x08,0x04,0x04,0x78, /* 6e n */
  0x38,0x44,0x44,0x44,0x38, /* 6f o */
  0x7c,0x14,0x14,0x14,0x08, /* 70 p */
  0x08,0x14,0x14,0x18,0x7c, /* 71 q */
  0x7c,0x08,0x04,0x04,0x08, /* 72 r */
  0x48,0x54,0x54,0x54,0x20, /* 73 s */
  0x04,0x3f,0x44,0x40,0x20, /* 74 t */
  0x3c,0x40,0x40,0x20,0x7c, /* 75 u */
  0x1c,0x20,0x40,0x20,0x1c, /* 76 v */
  0x3c,0x40,0x30,0x40,0x3c, /* 77 w */
  0x44,0x28,0x10,0x28,0x44, /* 78 x */
  0x0c,0x50,0x50,0x50,0x3c, /* 79 y */
  0x44,0x64,0x54,0x4c,0x44, /* 7a z */
  0x00,0x08,0x36,0x41,0x00, /* 7b < */
  0x00,0x00,0x7f,0x00,0x00, /* 7c | */
  0x00,0x41,0x36,0x08,0x00, /* 7d > */
  0x10,0x08,0x08,0x10,0x08, /* 7e Right Arrow -> */
  0x78,0x46,0x41,0x46,0x78};/* 7f Left Arrow  <- */


%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG WriteCmd
static void WriteCmd(uint8_t cmd);
%-INTERNAL_LOC_METHOD_END WriteCmd
%-INTERNAL_LOC_METHOD_BEG WriteData
static void WriteData(uint8_t data);
%-INTERNAL_LOC_METHOD_END WriteData
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG WriteCmd
%define! Parcmd
%include Common\GeneralInternalGlobal.inc (WriteCmd)
static void WriteCmd(uint8_t cmd)
{
%if defined(SPILDD)
  uint8_t dummy;

%endif
  CLR_D_C();                                                     %>40/* D_C low: select command mode */
  CLR_SCE();                                                     %>40/* SCE low: select device */
%if defined(SPILDD)
  %'ModuleName'%.DataReceivedFlag = FALSE;
  %@SPILDD@'ModuleName'%.ReceiveBlock(%@SPILDD@'ModuleName'%.DeviceData, &dummy, 1);
  %@SPILDD@'ModuleName'%.SendBlock(%@SPILDD@'ModuleName'%.DeviceData, &cmd, 1);
  while (!%'ModuleName'%.DataReceivedFlag) {};                            /* Wait until data block is transmitted/received */
%else
%if defined(SPI)
  (void)%@SPI@'ModuleName'%.SendChar(cmd);                       %>40/* send command byte */
%else
  while(!SPIS_SPTEF){}
  SPID = cmd;
  while(!SPIS_SPTEF){}
%endif
%endif
  SET_SCE();                                                     %>40/* CE high: deselect device */
}

%-INTERNAL_METHOD_END WriteCmd
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG WriteData
%define! Pardata
%include Common\GeneralInternalGlobal.inc (WriteData)
static void WriteData(uint8_t data)
{
%if defined(SPILDD)
  uint8_t dummy;

%endif
  SET_D_C();                                                     %>40/* D_C high: select data mode */
  CLR_SCE();                                                     %>40/* SCE low: select device */
%if defined(SPILDD)
  %'ModuleName'%.DataReceivedFlag = FALSE;
  %@SPILDD@'ModuleName'%.ReceiveBlock(%@SPILDD@'ModuleName'%.DeviceData, &dummy, 1);
  %@SPILDD@'ModuleName'%.SendBlock(%@SPILDD@'ModuleName'%.DeviceData, &data, 1);
  while (!%'ModuleName'%.DataReceivedFlag) {};                            /* Wait until data block is transmitted/received */
%else
%if defined(SPI)
  (void)%@SPI@'ModuleName'%.SendChar(data);                      %>40/* send data byte */
%else
  while(!SPIS_SPTEF){}
  SPID = data;
  while(!SPIS_SPTEF){}
%endif
%endif
  SET_SCE();                                                     %>40/* CE high: deselect device */
}

%-INTERNAL_METHOD_END WriteData
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetPos
%ifdef SetPos
%define! Parx
%define! Pary
%include Common\PDC8544SetPos.Inc
void %'ModuleName'%.%SetPos(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y)
{
  WriteCmd((uint8_t)(0x40|(y&0x07)));                            %>40 /* Y axis */
  WriteCmd((uint8_t)(0x80|(x&(%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS-1))));%>40 /* X axis */
}

%endif %- SetPos
%-BW_METHOD_END SetPos
%-************************************************************************************************************
%-BW_METHOD_BEGIN Clear
%ifdef Clear
%include Common\PDC8544Clear.Inc
void %'ModuleName'%.%Clear(void)
{
  short ddram;

  %'ModuleName'%.%SetPos(0, 0);                                  %>40 /* move cursor to beginning of line */
  for (ddram=%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS*(%'ModuleName'%.DISPLAY_HW_NOF_ROWS/8); ddram>0; ddram--) {
    WriteData(0);                                                %>40 /* clear actual line */
  }
}

%endif %- Clear
%-BW_METHOD_END Clear
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearLine
%ifdef ClearLine
%define! ParlineNumber
%include Common\PDC8544ClearLine.Inc
void %'ModuleName'%.%ClearLine(uint8_t lineNumber)
{
  uint8_t ddram;

  %'ModuleName'%.%SetPos(0, (%'ModuleName'_PixelDim)lineNumber); %>40 /* move cursor to beginning of line */
  for (ddram=%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS; ddram>0; ddram--) {
    WriteData(0);                                                %>40 /* clear actual line */
  }
  %'ModuleName'%.%SetPos(0,0);                                   %>40 /* move cursor home */
}

%endif %- ClearLine
%-BW_METHOD_END ClearLine
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\PDC8544Init.Inc
void %'ModuleName'%.%Init(void)
{
%if defined(RESLDD)
  RES_DeviceData = %@RESLDD@'ModuleName'%.Init(NULL); /* device handle for RES pin */
%endif
%if defined(SCELDD)
  SCE_DeviceData = %@SCELDD@'ModuleName'%.Init(NULL); /* device handle for SCE pin */
%endif
%if defined(D_CLDD)
  D_C_DeviceData = %@D_CLDD@'ModuleName'%.Init(NULL); /* device handle for D_C pin */
%endif
  /* boot display */
  SET_RES();                                                     %>40 /* RES high: start reset sequence */
  SET_SCE();                                                     %>40 /* CS high: Disable device */
  %@Wait@'ModuleName'%.Waitms(10);                               %>40 /* wait at least 10ms */
  CLR_RES();                                                     %>40 /* Reset line low */
  %@Wait@'ModuleName'%.Waitms(100);                              %>40 /* wait at least 100ms */
  SET_RES();                                                     %>40 /* Awake LCD from RESET state. */

  /* initialize display */
  WriteCmd(0x21);                                                %>40 /* Activate Chip and H=1 */
%if %Voltage='V3'
  WriteCmd(0xC8);                                                %>40 /* Set LCD Voltage; Vop v1: 0xc8 (for 3V), v2: 0xa0 (for 3V), v3: 0xc2 (2.6V-5V) */
%elif %Voltage='V5'
  WriteCmd(0xC2);                                                %>40 /* Set LCD Voltage; Vop v1: 0xc8 (for 3V), v2: 0xa0 (for 3V), v3: 0xc2 (2.6V-5V) */
%else
  WriteCmd(0xC2);                                                %>40 /* Set LCD Voltage; Vop v1: 0xc8 (for 3V), v2: 0xa0 (for 3V), v3: 0xc2 (2.6V-5V) */
%endif
  WriteCmd(0x13);                                                %>40 /* Adjust voltage bias */
  WriteCmd(0x20);                                                %>40 /* Horizontal addressing and H=0 */
  WriteCmd(0x09);                                                %>40 /* Activate all segments */
  %@Wait@'ModuleName'%.Waitms(20);                               %>40 /* added some delay, as some displays might not work otherwise */
  %'ModuleName'%.%Clear();                                       %>40 /* Erase all pixel on the DDRAM */
  WriteCmd(0x08);                                                %>40 /* Blank the Display */
%if %DisplayMode='normal'
  WriteCmd(0x0C);                                                %>40 /* Normal display mode */
%elif %DisplayMode='inverted'
  WriteCmd(0x0C|1);                                              %>40 /* Inverted display mode */
%endif

%if %InitializeContrast='yes'
  %'ModuleName'%.%SetContrast(%Contrast);
%endif
  %'ModuleName'%.%SetPos(0,0);                                   %>40 /* Cursor Home */
  %'ModuleName'%.%SetDisplayOrientation(%'ModuleName'%.ORIENTATION_LANDSCAPE);%>40 /* default orientation */
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteChar
%ifdef WriteChar
%define! Parch
%include Common\PDC8544WriteChar.Inc
void %'ModuleName'%.%WriteChar(uint8_t ch)
{
  int tablept = 0;
  int count = 0;
  int char_column = 0;

  if ((ch<0x20)||(ch>0x7f)) {                                    %>40/* check for valid character */
    return;
  }
  tablept = (%'ModuleName'%.FONT_COLUMNS_PER_CHAR*((int)ch))-160;%>40/* find character bitmap */
  for (count=%'ModuleName'%.FONT_COLUMNS_PER_CHAR;count>0;count--) {%>40/* draw the columns to print the character */
    char_column = table[tablept];
    WriteData((uint8_t)char_column);
    tablept++;
  }
  for(count=%'ModuleName'%.SPACE_COLUMNS_PER_CHAR;count>0;count--) {
    WriteData(0x00);                                             %>40/* create 1-pixel spacing per character */
  }
}

%endif %- WriteChar
%-BW_METHOD_END WriteChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteString
%ifdef WriteString
%define! Parstr
%include Common\PDC8544WriteString.Inc
void %'ModuleName'%.%WriteString(uint8_t *str)
{
  while(*str != '\0') {
    %'ModuleName'%.%WriteChar(*(str++));                         %>40/*Points to one ASCII to be written one at a time */
  }
}

%endif %- WriteString
%-BW_METHOD_END WriteString
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteLineStr
%ifdef WriteLineStr
%define! Parline
%define! Parstr
%include Common\PDC8544WriteLineStr.Inc
void %'ModuleName'%.%WriteLineStr(uint8_t line, uint8_t *str)
{
  uint8_t i;

  if (line>=%'ModuleName'%.MAX_LINES_FOR_DISPLAY) {
    return; /* invalid line number */
  }
  %'ModuleName'%.%SetPos(0, (%'ModuleName'_PixelDim)(line));
  for(i=0; i<%'ModuleName'%.MAX_CHARS_PER_LINE && *str != '\0'; i++) {%>40/* only write as much characters as there is space on the line */
    %'ModuleName'%.%WriteChar(*(str++));                         %>40/* write character */
  }
}

%endif %- WriteLineStr
%-BW_METHOD_END WriteLineStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateRegion
%ifdef UpdateRegion
%define! Parx
%define! Pary
%define! Parw
%define! Parh
%include Common\PDC8544UpdateRegion.Inc
void %'ModuleName'%.%UpdateRegion(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h)
{
  (void)x; (void)y; (void)w; (void)h;
  %'ModuleName'%.%UpdateFull();                                  %>40 /* NYI, we simply refresh everything :-( */
}

%endif %- UpdateRegion
%-BW_METHOD_END UpdateRegion
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateFull
%ifdef UpdateFull
%include Common\PDC8544UpdateFull.Inc
void %'ModuleName'%.%UpdateFull(void)
{
  uint16_t numBytes = sizeof(%'ModuleName'_DisplayBuf);
  uint8_t *data = (uint8_t*)%'ModuleName'_DisplayBuf;

  %'ModuleName'%.%SetPos(0, 0);                                  %>40 /* move cursor to beginning of display */
  while(numBytes>0) {
    WriteData(*data++);                                          %>40 /* write data */
    numBytes--;
  }
}

%endif %- UpdateFull
%-BW_METHOD_END UpdateFull
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetContrast
%ifdef SetContrast
%define! Parcontrast
%include Common\PDC8544SetContrast.Inc
void %'ModuleName'%.%SetContrast(uint8_t contrast)
{
  if (contrast < 128) { /* check for valid contrast values */
    WriteCmd(0x21);
    WriteCmd((uint8_t)(0x80|contrast));
    WriteCmd(0x20);
  }
}

%endif %- SetContrast
%-BW_METHOD_END SetContrast
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetMode
%ifdef SetMode
%define! Parinverted
%include Common\PDC8544SetMode.Inc
void %'ModuleName'%.%SetMode(bool inverted)
{
  if (inverted) {
    WriteCmd(0x0C|1);                                            %>40 /* Inverted display mode */
  } else {
    WriteCmd(0x0C);                                              %>40 /* Normal display mode */
  }
}

%endif %- SetMode
%-BW_METHOD_END SetMode
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetWindow
%ifdef SetWindow
%define! Parx0
%define! Parx1
%define! Pary0
%define! Pary1
%include Common\PDC8544SetWindow.Inc
void %'ModuleName'%.%SetWindow(%'ModuleName'_PixelDim x0, %'ModuleName'_PixelDim x1, %'ModuleName'_PixelDim y0, %'ModuleName'_PixelDim y1)
{
  /* our display does not implement the window method, so this function shall never be called */
  (void)x0; (void)x1; (void)y0; (void)y1; /* to avoid compiler warnings */
}

%endif %- SetWindow
%-BW_METHOD_END SetWindow
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDisplayOrientation
%ifdef GetDisplayOrientation
%define! RetVal
%include Common\PDC8544GetDisplayOrientation.Inc
%'ModuleName'_DisplayOrientation %'ModuleName'%.%GetDisplayOrientation(void)
{
  return orientation;
}

%endif %- GetDisplayOrientation
%-BW_METHOD_END GetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetWidth
%ifdef GetWidth
%define! RetVal
%include Common\PDC8544GetWidth.Inc
%'ModuleName'_PixelDim %'ModuleName'%.%GetWidth(void)
{
  switch(orientation) {
    case %'ModuleName'%.ORIENTATION_LANDSCAPE180:
    case %'ModuleName'%.ORIENTATION_LANDSCAPE:
      return %'ModuleName'%.HW_LONGER_SIDE;
      break;

    case %'ModuleName'%.ORIENTATION_PORTRAIT:
    case %'ModuleName'%.ORIENTATION_PORTRAIT180:
      return %'ModuleName'%.HW_SHORTER_SIDE;
      break;

    default:
        return 0; /* error? */
  } /* switch */
}

%endif %- GetWidth
%-BW_METHOD_END GetWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetHeight
%ifdef GetHeight
%define! RetVal
%include Common\PDC8544GetHeight.Inc
%'ModuleName'_PixelDim %'ModuleName'%.%GetHeight(void)
{
  switch(orientation) {
    case %'ModuleName'%.ORIENTATION_LANDSCAPE180:
    case %'ModuleName'%.ORIENTATION_LANDSCAPE:
      return %'ModuleName'%.HW_SHORTER_SIDE;
      break;

    case %'ModuleName'%.ORIENTATION_PORTRAIT:
    case %'ModuleName'%.ORIENTATION_PORTRAIT180:
      return %'ModuleName'%.HW_LONGER_SIDE;
      break;

    default:
        return 0; /* error? */
  } /* switch */
}

%endif %- GetHeight
%-BW_METHOD_END GetHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLongerSide
%ifdef GetLongerSide
%define! RetVal
%include Common\PDC8544GetLongerSide.Inc
/*
%'ModuleName'_PixelDim %'ModuleName'%.%GetLongerSide(void)
{
  *** Method is implemented as macro in %'ModuleName'.h
}
*/

%endif %- GetLongerSide
%-BW_METHOD_END GetLongerSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetShorterSide
%ifdef GetShorterSide
%define! RetVal
%include Common\PDC8544GetShorterSide.Inc
/*
%'ModuleName'_PixelDim %'ModuleName'%.%GetShorterSide(void)
{
  *** Method is implemented as macro in %'ModuleName'.h
}
*/

%endif %- GetShorterSide
%-BW_METHOD_END GetShorterSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDisplayOrientation
%ifdef SetDisplayOrientation
%define! ParnewOrientation
%include Common\PDC8544SetDisplayOrientation.Inc
void %'ModuleName'%.%SetDisplayOrientation(%'ModuleName'_DisplayOrientation newOrientation)
{
  orientation = newOrientation;
}

%endif %- SetDisplayOrientation
%-BW_METHOD_END SetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLCD
%ifdef GetLCD
%include Common\PDC8544GetLCD.Inc
void %'ModuleName'%.%GetLCD(void)
{
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
}

%endif %- GetLCD
%-BW_METHOD_END GetLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN GiveLCD
%ifdef GiveLCD
%include Common\PDC8544GiveLCD.Inc
void %'ModuleName'%.%GiveLCD(void)
{
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
}

%endif %- GiveLCD
%-BW_METHOD_END GiveLCD
%-INHERITED_EVENT_BEGIN SPILDD OnBlockReceived
%if defined(SPILDD) & defined(@SPILDD@OnBlockReceived)
%include Common\GeneralInternal.inc (OnBlockReceived)
void %@SPILDD@OnBlockReceived(LDD_TUserData *UserDataPtr)
{
  %'ModuleName'%.DataReceivedFlag = TRUE;
  /* Calling inherited event */
  %ifdef OnBlockReceived
     %OnBlockReceived(UserDataPtr);
  %endif OnBlockReceived
}

%endif %- @SPILDD@OnBlockReceived
%-INHERITED_EVENT_END SPILDD OnBlockReceived
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\PDC8544Deinit.Inc
void %'ModuleName'%.%Deinit(void)
{
%if defined(RESLDD)
  %@RESLDD@'ModuleName'%.Deinit(RES_DeviceData); /* device handle for RES pin */
%endif
%if defined(SCELDD)
  %@SCELDD@'ModuleName'%.Deinit(SCE_DeviceData); /* device handle for SCE pin */
%endif
%if defined(D_CLDD)
  %@D_CLDD@'ModuleName'%.Deinit(D_C_DeviceData); /* device handle for D_C pin */
%endif
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN PutPixel
%ifdef PutPixel
%define! Parx
%define! Pary
%define! Parcolor
%include Common\PDC8544PutPixel.Inc
void %'ModuleName'%.%PutPixel(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelColor color)
{
  %'ModuleName'_PixelDim nx, ny;

  /* do transformation */
  switch(orientation) {
    case %'ModuleName'%.ORIENTATION_LANDSCAPE:
      nx = x;
      ny = y;
      break;

    case %'ModuleName'%.ORIENTATION_LANDSCAPE180:
      nx = %'ModuleName'%.HW_WIDTH-1-x;
      ny = %'ModuleName'%.HW_HEIGHT-1-y;
      break;

    case %'ModuleName'%.ORIENTATION_PORTRAIT:
      nx = %'ModuleName'%.HW_WIDTH-1-y;
      ny = x;
      break;

    case %'ModuleName'%.ORIENTATION_PORTRAIT180:
      nx = y;
      ny = %'ModuleName'%.HW_HEIGHT-1-x;
      break;

    default:
      break;
  } /* switch */
  /* draw or clear pixel */
  if (color != 0) {
    %'ModuleName'%.DisplayBuf[ny/8][nx] |= (1<<((uint8_t)(ny%%8)));
  } else {
    %'ModuleName'%.DisplayBuf[ny/8][nx] &= ~(1<<((uint8_t)(ny%%8)));
  }
}

%endif %- PutPixel
%-BW_METHOD_END PutPixel
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearBuffer
%ifdef ClearBuffer
%define! Parcolor
%include Common\PDC8544ClearBuffer.Inc
void %'ModuleName'%.%ClearBuffer(%'ModuleName'_PixelColor color)
{
  memset(%'ModuleName'%.DisplayBuf, color, sizeof(%'ModuleName'%.DisplayBuf));
}

%endif %- ClearBuffer
%-BW_METHOD_END ClearBuffer
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnBlockReceived
%ifdef OnBlockReceived
%IMPLEMENTATION OnBlockReceived
%define! ParUserDataPtr
%include Common\PDC8544OnBlockReceived.Inc
void %OnBlockReceived(LDD_TUserData *UserDataPtr)
{
  /* Write your code here ... */
}

%endif %- OnBlockReceived
%-BW_METHOD_END OnBlockReceived
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%if %InitializeOnInit='yes'
  %'ModuleName'%.Init();
%endif
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
