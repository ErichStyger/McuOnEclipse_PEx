%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    16.12.2010
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\STM32CubeI2CSettings.Inc
%define! Abstract Common\STM32CubeI2CAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_STM32 /* only for STM32 */

#include "%'ModuleName'config.h" /* configuration */

%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
#define %'ModuleName'%.RECVBLOCKCUSTOM_AVAILABLE  (0)
  /*!< Define which can be used to check if the function RecvBlockCustom() is available */

typedef enum %'ModuleName'%.EnumStartFlags_ {
  %'ModuleName'%.SEND_START,        /* Start is sent */
  %'ModuleName'%.DO_NOT_SEND_START  /* Start is not sent */
} %'ModuleName'%.EnumStartFlags;

typedef enum %'ModuleName'%.EnumAckFlags_ {
  %'ModuleName'%.SEND_LAST_ACK,   /* Nack after last received byte is sent */
  %'ModuleName'%.DO_NOT_LAST_ACK  /* Nack after last received byte is not sent */
} %'ModuleName'%.EnumAckFlags;

/* defines to be used for %'ModuleName'%.%SendAck(); */
#define %'ModuleName'%.ACK         0U
#define %'ModuleName'%.NOACK       1U
%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\STM32CubeI2CInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendChar
%ifdef SendChar
uint8_t %'ModuleName'%.%SendChar(uint8_t Chr);
%define! ParChr
%define! RetVal
%include Common\STM32CubeI2CSendChar.Inc

%endif %- SendChar
%-BW_METHOD_END SendChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN RecvChar
%ifdef RecvChar
uint8_t %'ModuleName'%.%RecvChar(uint8_t *Chr);
%define! ParChr
%define! RetVal
%include Common\STM32CubeI2CRecvChar.Inc

%endif %- RecvChar
%-BW_METHOD_END RecvChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendBlock
%ifdef SendBlock
uint8_t %'ModuleName'%.%SendBlock(void *Ptr, uint16_t Siz, uint16_t *Snt);
%define! ParPtr
%define! ParSiz
%define! ParSnt
%define! RetVal
%include Common\STM32CubeI2CSendBlock.Inc

%endif %- SendBlock
%-BW_METHOD_END SendBlock
%-************************************************************************************************************
%-BW_METHOD_BEGIN RecvBlock
%ifdef RecvBlock
uint8_t %'ModuleName'%.%RecvBlock(void *Ptr, uint16_t Siz, uint16_t *Rcv);
%define! ParPtr
%define! ParSiz
%define! ParRcv
%define! RetVal
%include Common\STM32CubeI2CRecvBlock.Inc

%endif %- RecvBlock
%-BW_METHOD_END RecvBlock
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendStop
%ifdef SendStop
uint8_t %'ModuleName'%.%SendStop(void);
%define! RetVal
%include Common\STM32CubeI2CSendStop.Inc

%endif %- SendStop
%-BW_METHOD_END SendStop
%-************************************************************************************************************
%-BW_METHOD_BEGIN SelectSlave
%ifdef SelectSlave
uint8_t %'ModuleName'%.%SelectSlave(uint8_t Slv);
%define! ParSlv
%define! RetVal
%include Common\STM32CubeI2CSelectSlave.Inc

%endif %- SelectSlave
%-BW_METHOD_END SelectSlave
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetSelected
%ifdef GetSelected
uint8_t %'ModuleName'%.%GetSelected(uint8_t *Slv);
%define! ParSlv
%define! RetVal
%include Common\STM32CubeI2CGetSelected.Inc

%endif %- GetSelected
%-BW_METHOD_END GetSelected
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendBlockContinue
%ifdef SendBlockContinue
uint8_t %'ModuleName'%.%SendBlockContinue(void *Ptr, uint16_t Siz, uint16_t *Snt);
%define! ParPtr
%define! ParSiz
%define! ParSnt
%define! RetVal
%include Common\STM32CubeI2CSendBlockContinue.Inc

%endif %- SendBlockContinue
%-BW_METHOD_END SendBlockContinue
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendAck
%ifdef SendAck
void %'ModuleName'%.%SendAck(bool Ack);
%define! ParAck
%include Common\STM32CubeI2CSendAck.Inc

%endif %- SendAck
%-BW_METHOD_END SendAck
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\STM32CubeI2CDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDeviceHandle
%ifdef SetDeviceHandle
uint8_t %'ModuleName'%.%SetDeviceHandle(I2C_HandleTypeDef *handle);
%define! Parhandle
%define! RetVal
%include Common\STM32CubeI2CSetDeviceHandle.Inc

%endif %- SetDeviceHandle
%-BW_METHOD_END SetDeviceHandle
%-BW_DEFINITION_END
/* END %ModuleName. */
#endif /* %@sdk@'ModuleName'%.CONFIG_CPU_IS_STM32 */ /* only for STM32 */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\STM32CubeI2CSettings.Inc
%define! Abstract Common\STM32CubeI2CAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */
#include "%'ModuleName'.h"
#include "%@Wait@ModuleName.h" /* waiting routines */
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
#include "%@sdk@ModuleName.h" /* SDK and API used */
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_STM32 /* only for STM32 */

static uint8_t %'ModuleName'%.slaveAddr;             /* destination slave address, this is the shifted (8bit) address  */
static I2C_HandleTypeDef *%'ModuleName'%.device;     /* device handle */

%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendAck
%ifdef SendAck
%define! ParAck
%include Common\STM32CubeI2CSendAck.Inc
void %'ModuleName'%.%SendAck(bool Ack)
{
}

%endif %- SendAck
%-BW_METHOD_END SendAck
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendChar
%ifdef SendChar
%define! ParChr
%define! RetVal
%include Common\STM32CubeI2CSendChar.Inc
uint8_t %'ModuleName'%.%SendChar(uint8_t Chr)
{
  HAL_StatusTypeDef res;

  res = HAL_I2C_Master_Transmit(%'ModuleName'%.device, %'ModuleName'%.slaveAddr, &Chr, 1, HAL_MAX_DELAY);
  if (res!=HAL_OK) {
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- SendChar
%-BW_METHOD_END SendChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN RecvChar
%ifdef RecvChar
%define! ParChr
%define! RetVal
%include Common\STM32CubeI2CRecvChar.Inc
uint8_t %'ModuleName'%.%RecvChar(uint8_t *Chr)
{
  return ERR_OK;
}

%endif %- RecvChar
%-BW_METHOD_END RecvChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendBlock
%ifdef SendBlock
%define! ParPtr
%define! ParSiz
%define! ParSnt
%define! RetVal
%include Common\STM32CubeI2CSendBlock.Inc
uint8_t %'ModuleName'%.%SendBlock(void *Ptr, uint16_t Siz, uint16_t *Snt)
{
  HAL_StatusTypeDef res;

  res = HAL_I2C_Master_Transmit(%'ModuleName'%.device, %'ModuleName'%.slaveAddr, Ptr, Siz, HAL_MAX_DELAY);
  if (res!=HAL_OK) {
    return ERR_FAILED;
  }
  if (Snt!=NULL) {
    *Snt = Siz;
  }
  return ERR_OK;
}

%endif %- SendBlock
%-BW_METHOD_END SendBlock
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendBlockContinue
%ifdef SendBlockContinue
%define! ParPtr
%define! ParSiz
%define! ParSnt
%define! RetVal
%include Common\STM32CubeI2CSendBlockContinue.Inc
uint8_t %'ModuleName'%.%SendBlockContinue(void *Ptr, uint16_t Siz, uint16_t *Snt)
{
  return ERR_OK;
}

%endif %- SendBlockContinue
%-BW_METHOD_END SendBlockContinue
%-************************************************************************************************************
%-BW_METHOD_BEGIN RecvBlock
%ifdef RecvBlock
%define! ParPtr
%define! ParSiz
%define! ParRcv
%define! RetVal
%include Common\STM32CubeI2CRecvBlock.Inc
uint8_t %'ModuleName'%.%RecvBlock(void *Ptr, uint16_t Siz, uint16_t *Rcv)
{
  return ERR_OK;
}

%endif %- RecvBlock
%-BW_METHOD_END RecvBlock
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendStop
%ifdef SendStop
%define! RetVal
%include Common\STM32CubeI2CSendStop.Inc
uint8_t %'ModuleName'%.%SendStop(void)
{
  return ERR_OK;
}

%endif %- SendStop
%-BW_METHOD_END SendStop
%-************************************************************************************************************
%-BW_METHOD_BEGIN SelectSlave
%ifdef SelectSlave
%define! ParSlv
%define! RetVal
%include Common\STM32CubeI2CSelectSlave.Inc
uint8_t %'ModuleName'%.%SelectSlave(uint8_t Slv)
{
  %'ModuleName'%.slaveAddr = (uint8_t)(Slv<<1);
  return ERR_OK;
}

%endif %- SelectSlave
%-BW_METHOD_END SelectSlave
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetSelected
%ifdef GetSelected
%define! ParSlv
%define! RetVal
%include Common\STM32CubeI2CGetSelected.Inc
uint8_t %'ModuleName'%.%GetSelected(uint8_t *Slv)
{
  *Slv = (uint8_t)(%'ModuleName'%.slaveAddr>>1);
  return ERR_OK;
}

%endif %- GetSelected
%-BW_METHOD_END GetSelected
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\STM32CubeI2CInit.Inc
void %'ModuleName'%.%Init(void)
{
  %'ModuleName'%.slaveAddr = 0;
  %'ModuleName'%.device = NULL;
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\STM32CubeI2CDeinit.Inc
void %'ModuleName'%.%Deinit(void)
{
  %'ModuleName'%.slaveAddr = 0;
  %'ModuleName'%.device = NULL;
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDeviceHandle
%ifdef SetDeviceHandle
%define! Parhandle
%define! RetVal
%include Common\STM32CubeI2CSetDeviceHandle.Inc
uint8_t %'ModuleName'%.%SetDeviceHandle(I2C_HandleTypeDef *handle)
{
  %'ModuleName'%.device = handle;
  return ERR_OK;
}

%endif %- SetDeviceHandle
%-BW_METHOD_END SetDeviceHandle
%-BW_IMPLEMENT_END
/* END %ModuleName. */
#endif /* %@sdk@'ModuleName'%.CONFIG_CPU_IS_STM32 */ /* only for STM32 */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.%Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for GenericSWI2C
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is used to configure settings of the software (bit-banging) I2C module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

%- #if %'ModuleName'%.CONFIG_USE_CYCLE_COUNTER
%- %if defined(CortexTools)
%-   #include "%@CortexTools@ModuleName.h" /* include Cortex utility functions */
%- %else
%-   #include "KIN1.h" /* include Cortex utility functions */
%- %endif
%- #endif

/* specify HAL header file for your device: */
#include "stm32f3xx_hal.h"
#include "stm32f3xx_hal_i2c.h"

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
