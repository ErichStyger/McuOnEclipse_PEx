%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    29.11.2016
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\McuLibConfigSettings.Inc
%define! Abstract Common\McuLibConfigAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%'ModuleName'config.h" /* include configuration header file */

#ifdef __cplusplus
extern "C" {
#endif

#if %'ModuleName'%.CONFIG_SDK_VERSION_USED == %'ModuleName'%.CONFIG_SDK_PROCESSOR_EXPERT
  #ifndef __IASMARM__ /* not including standard header files if using IAR assembler */
%ifdef SharedModules
  /* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
    #include "%'var'.h"
  %endfor
%endif
    #include "%ProcessorModule.h" /* include CPU related interfaces and defines */
  #endif
#else /* use non-Processor Expert SDK: generic or silicon vendor SDK */
  /* defines of common types used by Processor Expert, which might not be provided by the SDK */
  #if !(defined(__ICCARM__) || defined(__HIWARE__)) /* Hiware compiler (S08, S12) only supports C89 */
    #include <stdint.h> /* uint8_t, int16_t, ... */
    #include <stdbool.h> /* bool, true, false, ... */
  #endif

  /* boolean values */
  #ifndef FALSE
    #define  FALSE  0x00u
  #endif
  #ifndef TRUE
    #define  TRUE   0x01u
  #endif

  /* error codes */
  #define ERR_OK                          0x00U /*!< OK */
  #define ERR_SPEED                       0x01U /*!< This device does not work in the active speed mode. */
  #define ERR_RANGE                       0x02U /*!< Parameter out of range. */
  #define ERR_VALUE                       0x03U /*!< Parameter of incorrect value. */
  #define ERR_OVERFLOW                    0x04U /*!< Timer overflow. */
  #define ERR_MATH                        0x05U /*!< Overflow during evaluation. */
  #define ERR_ENABLED                     0x06U /*!< Device is enabled. */
  #define ERR_DISABLED                    0x07U /*!< Device is disabled. */
  #define ERR_BUSY                        0x08U /*!< Device is busy. */
  #define ERR_NOTAVAIL                    0x09U /*!< Requested value or method not available. */
  #define ERR_RXEMPTY                     0x0AU /*!< No data in receiver. */
  #define ERR_TXFULL                      0x0BU /*!< Transmitter is full. */
  #define ERR_BUSOFF                      0x0CU /*!< Bus not available. */
  #define ERR_OVERRUN                     0x0DU /*!< Overrun error is detected. */
  #define ERR_FRAMING                     0x0EU /*!< Framing error is detected. */
  #define ERR_PARITY                      0x0FU /*!< Parity error is detected. */
  #define ERR_NOISE                       0x10U /*!< Noise error is detected. */
  #define ERR_IDLE                        0x11U /*!< Idle error is detected. */
  #define ERR_FAULT                       0x12U /*!< Fault error is detected. */
  #define ERR_BREAK                       0x13U /*!< Break char is received during communication. */
  #define ERR_CRC                         0x14U /*!< CRC error is detected. */
  #define ERR_ARBITR                      0x15U /*!< A node losts arbitration. This error occurs if two nodes start transmission at the same time. */
  #define ERR_PROTECT                     0x16U /*!< Protection error is detected. */
  #define ERR_UNDERFLOW                   0x17U /*!< Underflow error is detected. */
  #define ERR_UNDERRUN                    0x18U /*!< Underrun error is detected. */
  #define ERR_COMMON                      0x19U /*!< Common error of a device. */
  #define ERR_LINSYNC                     0x1AU /*!< LIN synchronization error is detected. */
  #define ERR_FAILED                      0x1BU /*!< Requested functionality or process failed. */
  #define ERR_QFULL                       0x1CU /*!< Queue is full. */
  #define ERR_PARAM_MASK                  0x80U /*!< Invalid mask. */
  #define ERR_PARAM_MODE                  0x81U /*!< Invalid mode. */
  #define ERR_PARAM_INDEX                 0x82U /*!< Invalid index. */
  #define ERR_PARAM_DATA                  0x83U /*!< Invalid data. */
  #define ERR_PARAM_SIZE                  0x84U /*!< Invalid size. */
  #define ERR_PARAM_VALUE                 0x85U /*!< Invalid value. */
  #define ERR_PARAM_RANGE                 0x86U /*!< Invalid parameter's range or parameters' combination. */
  #define ERR_PARAM_LOW_VALUE             0x87U /*!< Invalid value (LOW part). */
  #define ERR_PARAM_HIGH_VALUE            0x88U /*!< Invalid value (HIGH part). */
  #define ERR_PARAM_ADDRESS               0x89U /*!< Invalid address. */
  #define ERR_PARAM_PARITY                0x8AU /*!< Invalid parity. */
  #define ERR_PARAM_WIDTH                 0x8BU /*!< Invalid width. */
  #define ERR_PARAM_LENGTH                0x8CU /*!< Invalid length. */
  #define ERR_PARAM_ADDRESS_TYPE          0x8DU /*!< Invalid address type. */
  #define ERR_PARAM_COMMAND_TYPE          0x8EU /*!< Invalid command type. */
  #define ERR_PARAM_COMMAND               0x8FU /*!< Invalid command. */
  #define ERR_PARAM_RECIPIENT             0x90U /*!< Invalid recipient. */
  #define ERR_PARAM_BUFFER_COUNT          0x91U /*!< Invalid buffer count. */
  #define ERR_PARAM_ID                    0x92U /*!< Invalid ID. */
  #define ERR_PARAM_GROUP                 0x93U /*!< Invalid group. */
  #define ERR_PARAM_CHIP_SELECT           0x94U /*!< Invalid chip select. */
  #define ERR_PARAM_ATTRIBUTE_SET         0x95U /*!< Invalid set of attributes. */
  #define ERR_PARAM_SAMPLE_COUNT          0x96U /*!< Invalid sample count. */
  #define ERR_PARAM_CONDITION             0x97U /*!< Invalid condition. */
  #define ERR_PARAM_TICKS                 0x98U /*!< Invalid ticks parameter. */

  /* Other basic data types */
  typedef signed char             int8;
  typedef signed short int        int16;
  typedef signed long int         int32;

  typedef unsigned char           uint8;
  typedef unsigned short int      uint16;
  typedef unsigned long int       uint32;
#endif

%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\McuLibConfigInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\McuLibConfigDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-BW_DEFINITION_END
/* END %ModuleName. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\McuLibConfigSettings.Inc
%define! Abstract Common\McuLibConfigAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\McuLibConfigInit.Inc
void %'ModuleName'%.%Init(void)
{
  /* nothing to implement */
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\McuLibConfigDeinit.Inc
void %'ModuleName'%.%Deinit(void)
{
  /* nothing to implement */
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%CODE_BEGIN
%if (CPUfamily = "S32K")
#ifdef CPU_INIT_MCUONECLIPSE_DRIVERS
%endif
  %'ModuleName'%.%Init(); /* ### %DeviceType "%DeviceName" init code ... */
%if (CPUfamily = "S32K")
#endif
%endif
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
%-----------------------------------------------------------------------------------------
%if defined(ConfigFilesFolderName) & ConfigFilesFolderName<>""
  %define  ConfigSrcDirFolder %'ConfigFilesFolderName'/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for McuLibConfig
 *
 * This header file is used to configure settings of the McuLibConfig module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

/* identification of CPU/core used. __CORTEX_M is defined in CMSIS-Core.
   Otherwise CPU Family is set automatically by Processor Expert: detected: %CPUfamily (supported: "Kinetis", "S32K", "HCS08")
*/
%if (CPUfamily = "Kinetis")
#ifndef %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M
  #define %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M             (1 || defined(__CORTEX_M))
    /*!< 1: ARM Cortex-M family, 0 otherwise */
#endif
#ifndef %'ModuleName'%.CONFIG_CPU_IS_KINETIS
  #define %'ModuleName'%.CONFIG_CPU_IS_KINETIS                  (1 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M \
                                                            && !defined(%'ModuleName'%.CONFIG_CPU_IS_LPC) \
                                                            && !defined(%'ModuleName'%.CONFIG_CPU_IS_LPC55xx) \
                                                            && !defined(%'ModuleName'%.CONFIG_CPU_IS_IMXRT) \
                                                            && !defined(%'ModuleName'%.CONFIG_CPU_IS_STM32) \
                                                            && !defined(%'ModuleName'%.CONFIG_CPU_IS_NORDIC_NRF) \
                                                            && !defined(%'ModuleName'%.CONFIG_CPU_IS_S32K))
    /*!< 1: NXP Kinetis CPU family, 0: otherwise */
#endif
#ifndef %'ModuleName'%.CONFIG_CPU_IS_S32K
  #define %'ModuleName'%.CONFIG_CPU_IS_S32K                     (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
    /*!< 1: NXP S32K CPU family, 0: otherwise */
#endif
#ifndef %'ModuleName'%.CONFIG_CPU_IS_LPC
  #define %'ModuleName'%.CONFIG_CPU_IS_LPC                      (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
   /*!< 1: NXP LPC CPU family, 0: otherwise */
#endif
#ifndef %'ModuleName'%.CONFIG_CPU_IS_LPC55xx
  #define %'ModuleName'%.CONFIG_CPU_IS_LP55Cxx                  (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M && %'ModuleName'%.CONFIG_CPU_IS_LPC)
   /*!< 1: NXP LPC55xx CPU family, 0: otherwise */
#endif
#ifndef %'ModuleName'%.CONFIG_CPU_IS_STM32
  #define %'ModuleName'%.CONFIG_CPU_IS_STM32                    (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
    /*!< 1: STM32 ARM Cortex CPU family, 0: otherwise */
#endif
#ifndef %'ModuleName'%.CONFIG_CPU_IS_IMXRT
  #define %'ModuleName'%.CONFIG_CPU_IS_IMXRT                    (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
    /*!< 1: NXP i.Mx RT CPU family, 0: otherwise */
#endif
#ifndef %'ModuleName'%.CONFIG_CPU_IS_NORDIC_NRF
  #define %'ModuleName'%.CONFIG_CPU_IS_NORDIC_NRF               (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
    /*!< 1: Nordic nRF, 0: otherwise */
#endif
#ifndef %'ModuleName'%.CONFIG_CPU_IS_HCS08
  #define %'ModuleName'%.CONFIG_CPU_IS_HCS08                    (0 && !%'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
    /*!< 1: HCS08 CPU family, 0: otherwise */
#endif
#ifndef %'ModuleName'%.CONFIG_CPU_IS_RISC_V
  #define %'ModuleName'%.CONFIG_CPU_IS_RISC_V                   (0 && !%'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
    /*!< 1: RISC-V CPU family, 0: otherwise */
#endif
#ifndef %'ModuleName'%.CONFIG_CPU_IS_RISC_V_RV32M1_RI5CY
  #define %'ModuleName'%.CONFIG_CPU_IS_RISC_V_RV32M1_RI5CY      (1 && %'ModuleName'%.CONFIG_CPU_IS_RISC_V)
    /*!< 1: VEGA Board: RISC-V RV32M1 RI5CY, 0: other core */
#endif
#ifndef %'ModuleName'%.CONFIG_CPU_IS_ESP32
  #ifndef __XTENSA__
    #define __XTENSA__ 0
  #endif
  #define %'ModuleName'%.CONFIG_CPU_IS_ESP32                    (__XTENSA__)
    /*!< 1: ESP32 CPU family, 0: otherwise. The ESP32 compiler defines __XTENSA__ with a value of 1 */
#endif

%elif (CPUfamily = "S32K")
#define %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M    (1 || defined(__CORTEX_M))
  /*!< 1: ARM Cortex-M family, 0 otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_KINETIS         (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: NXP Kinetis CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_S32K            (1 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: NXP S32K CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_LPC             (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: NXP LPC CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_LPC55xx         (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M  && %'ModuleName'%.CONFIG_CPU_IS_LPC)
  /*!< 1: NXP LPC55xx CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_STM32           (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: STM32 ARM Cortex CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_IMXRT           (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: NXP i.Mx RT CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_HCS08           (0)
  /*!< 1: HCS08 CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_RISC_V          (0)
  /*!< 1: RISC-V CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_ESP32           (0)
    /*!< 1: ESP32 CPU family, 0: otherwise. */
%elif (CPUfamily = "HCS08")
#define %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M    (0 || defined(__CORTEX_M))
  /*!< 1: ARM Cortex-M family, 0 otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_KINETIS         (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: NXP Kinetis CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_S32K            (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: NXP S32K CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_LPC             (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: NXP LPC CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_LPC55xx         (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M  && %'ModuleName'%.CONFIG_CPU_IS_LPC)
  /*!< 1: NXP LPC55xx CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_STM32           (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: STM32 ARM Cortex CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_IMXRT           (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: NXP i.Mx RT CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_HCS08           (1)
  /*!< 1: HCS08 CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_RISC_V          (0)
  /*!< 1: RISC-V CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_ESP32           (0)
    /*!< 1: ESP32 CPU family, 0: otherwise. */
%else
#define %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M    (0 || defined(__CORTEX_M))
  /*!< 1: ARM Cortex-M family, 0 otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_KINETIS         (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: NXP Kinetis CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_S32K            (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: NXP S32K CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_LPC             (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: NXP LPC CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_LPC55xx         (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M  && %'ModuleName'%.CONFIG_CPU_IS_LPC)
  /*!< 1: NXP LPC55xx CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_STM32           (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: STM32 ARM Cortex CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_IMXRT           (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: NXP i.Mx RT CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_NORDIC_NRF      (0 && %'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: Nordic nRF, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_HCS08           (0 && !%'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: HCS08 CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_RISC_V          (0 && !%'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)
  /*!< 1: RISC-V CPU family, 0: otherwise */
#define %'ModuleName'%.CONFIG_CPU_IS_ESP32           (0)
    /*!< 1: ESP32 CPU family, 0: otherwise. */
%endif

/* identification of Cortex-M core. __FPU_USED can be defined in CMSIS-Core */
%if %CPUDB_prph_has_feature(CPU,ARM_CORTEX_M0P) = 'yes'
#ifndef %'ModuleName'%.CONFIG_CORTEX_M
  #define %'ModuleName'%.CONFIG_CORTEX_M      (0)
    /*!< 0: Cortex-M0, 3: M3, 4: M4, 7: M7, 33: M33, -1 otherwise */
#endif
%-
#if (0 && !defined(%'ModuleName'%.CONFIG_FPU_PRESENT) && %'ModuleName'%.CONFIG_CORTEX_M!=0) || (defined(__FPU_PRESENT) && (__FPU_PRESENT==1)) /* __FPU_PRESENT can be defined in CMSIS-Core */
  #define %'ModuleName'%.CONFIG_FPU_PRESENT   (1)
#else
  #define %'ModuleName'%.CONFIG_FPU_PRESENT   (0)
#endif
    /*!< 1: floating point unit present, 0: otherwise */
#if (0 && !defined(%'ModuleName'%.CONFIG_FPU_USED) && %'ModuleName'%.CONFIG_CORTEX_M!=0) || (defined(__FPU_USED) && (__FPU_USED==1)) /* __FPU_USED can be defined in CMSIS-Core */
  #define %'ModuleName'%.CONFIG_FPU_USED      (1)
#else
  #define %'ModuleName'%.CONFIG_FPU_USED      (0)
#endif
  /*!< 1: using floating point unit, 0: otherwise */
%-
%elif %CPUDB_prph_has_feature(CPU,ARM_CORTEX_M4) = 'yes'
#ifndef %'ModuleName'%.CONFIG_CORTEX_M
  #define %'ModuleName'%.CONFIG_CORTEX_M      (4)
    /*!< 0: Cortex-M0, 3: M3, 4: M4, 7: M7, 33: M33, -1 otherwise */
#endif
%if %CPUDB_prph_has_feature(CPU,FPU) = 'yes'
%-
#if (1 && !defined(%'ModuleName'%.CONFIG_FPU_PRESENT) && %'ModuleName'%.CONFIG_CORTEX_M!=0) || (defined(__FPU_PRESENT) && (__FPU_PRESENT==1)) /* __FPU_PRESENT can be defined in CMSIS-Core */
  #define %'ModuleName'%.CONFIG_FPU_PRESENT   (1)
#else
  #define %'ModuleName'%.CONFIG_FPU_PRESENT   (0)
#endif
    /*!< 1: floating point unit present, 0: otherwise */
#if (1 && !defined(%'ModuleName'%.CONFIG_FPU_USED) && %'ModuleName'%.CONFIG_CORTEX_M!=0) || (defined(__FPU_USED) && (__FPU_USED==1)) /* __FPU_USED can be defined in CMSIS-Core */
  #define %'ModuleName'%.CONFIG_FPU_USED      (1)
#else
  #define %'ModuleName'%.CONFIG_FPU_USED      (0)
#endif
  /*!< 1: using floating point unit, 0: otherwise */
%-
%else
%-
#if (0 && !defined(%'ModuleName'%.CONFIG_FPU_PRESENT) && %'ModuleName'%.CONFIG_CORTEX_M!=0) || (defined(__FPU_PRESENT) && (__FPU_PRESENT==1)) /* __FPU_PRESENT can be defined in CMSIS-Core */
  #define %'ModuleName'%.CONFIG_FPU_PRESENT   (1)
#else
  #define %'ModuleName'%.CONFIG_FPU_PRESENT   (0)
#endif
    /*!< 1: floating point unit present, 0: otherwise */
#if (0 && !defined(%'ModuleName'%.CONFIG_FPU_USED) && %'ModuleName'%.CONFIG_CORTEX_M!=0) || (defined(__FPU_USED) && (__FPU_USED==1)) /* __FPU_USED can be defined in CMSIS-Core */
  #define %'ModuleName'%.CONFIG_FPU_USED      (1)
#else
  #define %'ModuleName'%.CONFIG_FPU_USED      (0)
#endif
  /*!< 1: using floating point unit, 0: otherwise */
%-
%endif
%elif %CPUDB_prph_has_feature(CPU,ARM_CORTEX_M7) = 'yes'
#ifndef %'ModuleName'%.CONFIG_CORTEX_M
  #define %'ModuleName'%.CONFIG_CORTEX_M      (7)
    /*!< 0: Cortex-M0, 3: M3, 4: M4, 7: M7, 33: M33, -1 otherwise */
#endif
%-
#if (1 && !defined(%'ModuleName'%.CONFIG_FPU_PRESENT) && %'ModuleName'%.CONFIG_CORTEX_M!=0) || (defined(__FPU_PRESENT) && (__FPU_PRESENT==1)) /* __FPU_PRESENT can be defined in CMSIS-Core */
  #define %'ModuleName'%.CONFIG_FPU_PRESENT   (1)
#else
  #define %'ModuleName'%.CONFIG_FPU_PRESENT   (0)
#endif
    /*!< 1: floating point unit present, 0: otherwise */
#if (1 && !defined(%'ModuleName'%.CONFIG_FPU_USED) && %'ModuleName'%.CONFIG_CORTEX_M!=0) || (defined(__FPU_USED) && (__FPU_USED==1)) /* __FPU_USED can be defined in CMSIS-Core */
  #define %'ModuleName'%.CONFIG_FPU_USED      (1)
#else
  #define %'ModuleName'%.CONFIG_FPU_USED      (0)
#endif
  /*!< 1: using floating point unit, 0: otherwise */
%-
%else %- default
#ifndef %'ModuleName'%.CONFIG_CORTEX_M
  #define %'ModuleName'%.CONFIG_CORTEX_M      (-1)
    /*!< 0: Cortex-M0, 3: M3, 4: M4, 7: M7, 33: M33 -1 otherwise */
#endif
%-
#if (0 && !defined(%'ModuleName'%.CONFIG_FPU_PRESENT) && %'ModuleName'%.CONFIG_CORTEX_M!=0) || (defined(__FPU_PRESENT) && (__FPU_PRESENT==1)) /* __FPU_PRESENT can be defined in CMSIS-Core */
  #define %'ModuleName'%.CONFIG_FPU_PRESENT   (1)
#else
  #define %'ModuleName'%.CONFIG_FPU_PRESENT   (0)
#endif
    /*!< 1: floating point unit present, 0: otherwise */
#if (0 && !defined(%'ModuleName'%.CONFIG_FPU_USED) && %'ModuleName'%.CONFIG_CORTEX_M!=0) || (defined(__FPU_USED) && (__FPU_USED==1)) /* __FPU_USED can be defined in CMSIS-Core */
  #define %'ModuleName'%.CONFIG_FPU_USED      (1)
#else
  #define %'ModuleName'%.CONFIG_FPU_USED      (0)
#endif
  /*!< 1: using floating point unit, 0: otherwise */
%-
%endif

/* macro for little and big endianess. ARM is little endian */
#define %'ModuleName'%.CONFIG_CPU_IS_LITTLE_ENDIAN   (%'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M)

/* Identifiers used to identify the SDK */
#define %'ModuleName'%.CONFIG_SDK_GENERIC             (0)
  /*!< using a generic API/SDK */
#define %'ModuleName'%.CONFIG_SDK_PROCESSOR_EXPERT    (1)
  /*!< using Processor Expert SDK */
#define %'ModuleName'%.CONFIG_SDK_KINETIS_1_3         (2)
  /*!< using NXP Kinetis SDK V1.3 */
#define %'ModuleName'%.CONFIG_SDK_KINETIS_2_0         (3)
  /*!< using NXP Kinetis SDK V2.0 */
#define %'ModuleName'%.CONFIG_SDK_MCUXPRESSO_2_0      (4)
  /*!< using NXP MCUXpresso SDK V2.x, same as Kinetis SDK v2.0 */
#define %'ModuleName'%.CONFIG_SDK_S32K                (5)
  /*!< SDK for S32K */
#define %'ModuleName'%.CONFIG_SDK_NORDIC_NRF5         (6)
  /*!< Nordic nRF5 SDK */

#ifndef %'ModuleName'%.CONFIG_SDK_VERSION_MAJOR
%if defined(SdkVersionMajor)
  #define %'ModuleName'%.CONFIG_SDK_VERSION_MAJOR   (%SdkVersionMajor)
%else
  #define %'ModuleName'%.CONFIG_SDK_VERSION_MAJOR   (2)
%endif
    /*!< SDK major version number */
#endif

#ifndef %'ModuleName'%.CONFIG_SDK_VERSION_MINOR
%if defined(SdkVersionMinor)
  #define %'ModuleName'%.CONFIG_SDK_VERSION_MINOR   (%SdkVersionMinor)
%else
  #define %'ModuleName'%.CONFIG_SDK_VERSION_MINOR   (5)
%endif
    /*!< SDK minor version number */
#endif

#ifndef %'ModuleName'%.CONFIG_SDK_VERSION_BUILD
%if defined(SdkVersionBuild)
  #define %'ModuleName'%.CONFIG_SDK_VERSION_BUILD   (%SdkVersionBuild)
%else
  #define %'ModuleName'%.CONFIG_SDK_VERSION_BUILD   (0)
%endif
    /*!< SDK build version number */
#endif

#ifndef %'ModuleName'%.CONFIG_SDK_VERSION
  #define %'ModuleName'%.CONFIG_SDK_VERSION        (%'ModuleName'%.CONFIG_SDK_VERSION_MAJOR*100)+(%'ModuleName'%.CONFIG_SDK_VERSION_MINOR*10)+%'ModuleName'%.CONFIG_SDK_VERSION_BUILD
    /*!< Builds a single number with the SDK version (major, minor, build), e.g. 250 for 2.5.0 */
#endif

/* specify the SDK and API used */
#ifndef %'ModuleName'%.CONFIG_SDK_VERSION_USED
#if %'ModuleName'%.CONFIG_CPU_IS_ESP32
  #define %'ModuleName'%.CONFIG_SDK_VERSION_USED  %'ModuleName'%.CONFIG_SDK_GENERIC
    /*!< identify the version of SDK/API used. For ESP32 we are using a generic SDK (actually the IDF one) */
#elif %'ModuleName'%.CONFIG_CPU_IS_STM32
  #define %'ModuleName'%.CONFIG_SDK_VERSION_USED  %'ModuleName'%.CONFIG_SDK_GENERIC
    /*!< identify the version of SDK/API used. For STM32 we are using a generic SDK (actually the CubeMX one) */
#else
%if %SDK='Generic'
  #define %'ModuleName'%.CONFIG_SDK_VERSION_USED  %'ModuleName'%.CONFIG_SDK_GENERIC
%elif %SDK='ProcessorExpertSDK'
  #define %'ModuleName'%.CONFIG_SDK_VERSION_USED  %'ModuleName'%.CONFIG_SDK_PROCESSOR_EXPERT
%elif %SDK='KinetisSDK1.3'
  #define %'ModuleName'%.CONFIG_SDK_VERSION_USED  %'ModuleName'%.CONFIG_SDK_KINETIS_1_3
%elif %SDK='KinetisSDK2.0'
  #define %'ModuleName'%.CONFIG_SDK_VERSION_USED  %'ModuleName'%.CONFIG_SDK_KINETIS_2_0
%elif %SDK='MCUXpressoSDK2.0'
  #define %'ModuleName'%.CONFIG_SDK_VERSION_USED  %'ModuleName'%.CONFIG_SDK_MCUXPRESSO_2_0
%elif %SDK='S32KSDK'
  #define %'ModuleName'%.CONFIG_SDK_VERSION_USED  %'ModuleName'%.CONFIG_SDK_S32K
%else
  #error "unknown SDK!?!"
%endif
    /*!< identify the version of SDK/API used */
#endif
#endif

%- ////////////////////////////////////////////////////////////
%-
%- ----------------------------------------------------------------------------
%- Check existing components for OS components
%- ----------------------------------------------------------------------------
%- NOTE: the OSIF component in S32DS for ARM goes through the component list to find
%-       out if FreeRTOS is used. The component has to be named FreeRTOS in order to be detected.
%- %setVariable(osifvar,Bare-Metal)
%-%for var from ModuleList
%- %- var is %var
%- %if %var = 'FreeRTOS'
%-     %setVariable(osifvar,FreeRTOS)
%- %endif
%- %endfor

%- %if %getVariable(osifvar) = 'Bare-Metal'
%- %- bar metal
%-    %- %inclSUB file_management(driver,osif,BareMetal)
%- %endif
%- %if %getVariable(osifvar) = 'FreeRTOS'
%- %- freertos
%-    %- %inclSUB file_management(driver,osif,FreeRTOS)
%- %endif
/* *****************   Middleware Configuration *******************/
/* Configuration macro if FreeRTOS is used */
#ifndef %'ModuleName'%.CONFIG_SDK_USE_FREERTOS
%if defined(OperatingSystemId) & OperatingSystemId = 'FreeRTOS'
  #define %'ModuleName'%.CONFIG_SDK_USE_FREERTOS                 %>50 (1)
%else
  #define %'ModuleName'%.CONFIG_SDK_USE_FREERTOS                 %>50 (0)
%endif
    /*!< 1: Use FreeRTOS; 0: no FreeRTOS used */
#endif

/* Configuration macro if FreeRTOS is used */
#ifndef %'ModuleName'%.CONFIG_SDK_USE_FREERTOS
%if defined(OperatingSystemId) & OperatingSystemId = 'FreeRTOS'
  #define %'ModuleName'%.CONFIG_SDK_USE_FREERTOS                 %>50 (1)
%else
  #define %'ModuleName'%.CONFIG_SDK_USE_FREERTOS                 %>50 (0)
%endif
    /*!< 1: Use FreeRTOS; 0: no FreeRTOS used */
#endif

/* FatFS */
#ifndef %'ModuleName'%.CONFIG_SDK_USE_FAT_FS
  #define %'ModuleName'%.CONFIG_SDK_USE_FAT_FS                   %>50 (0)
    /*!< 1: Use FatFS; 0: no FatFS used */
#endif
/* ***************************************************************/

/* special macro to identify a set of SDKs used */
#define %'ModuleName'%.CONFIG_NXP_SDK_USED                       %>50(   (%'ModuleName'%.CONFIG_SDK_VERSION_USED==%'ModuleName'%.CONFIG_SDK_KINETIS_1_3) \
                                                                 %>50 || (%'ModuleName'%.CONFIG_SDK_VERSION_USED==%'ModuleName'%.CONFIG_SDK_KINETIS_2_0) \
                                                                 %>50 || (%'ModuleName'%.CONFIG_SDK_VERSION_USED==%'ModuleName'%.CONFIG_SDK_MCUXPRESSO_2_0) \
                                                                 %>50 || (%'ModuleName'%.CONFIG_SDK_VERSION_USED==%'ModuleName'%.CONFIG_SDK_S32K) \
                                                                 %>50)
  /*!< Using one of the Freescale/NXP SDKs */

#define %'ModuleName'%.CONFIG_NXP_SDK_2_0_USED                   %>50(   (%'ModuleName'%.CONFIG_SDK_VERSION_USED==%'ModuleName'%.CONFIG_SDK_KINETIS_2_0) \
                                                                 %>50 || (%'ModuleName'%.CONFIG_SDK_VERSION_USED==%'ModuleName'%.CONFIG_SDK_MCUXPRESSO_2_0) \
                                                                 %>50)
  /*!< Using Freescale/NXP SDK V2.0 */

#define %'ModuleName'%.CONFIG_PEX_SDK_USED                       %>50(%'ModuleName'%.CONFIG_SDK_VERSION_USED==%'ModuleName'%.CONFIG_SDK_PROCESSOR_EXPERT)
  /*!< Using Processor Expert API */

/* Compiler identification: */
#define %'ModuleName'%.CONFIG_COMPILER_GNU            (0)
#define %'ModuleName'%.CONFIG_COMPILER_IAR            (1)
#define %'ModuleName'%.CONFIG_COMPILER_KEIL           (2)
#define %'ModuleName'%.CONFIG_COMPILER_HIWARE         (3)

#ifndef %'ModuleName'%.CONFIG_COMPILER
  #if defined(__GNUC__)
    %-  %Compiler = "GNUC"
    #define %'ModuleName'%.CONFIG_COMPILER                    %'ModuleName'%.CONFIG_COMPILER_GNU
  #elif defined(__HIWARE__)
    #define %'ModuleName'%.CONFIG_COMPILER                    %'ModuleName'%.CONFIG_COMPILER_HIWARE
  #elif defined(__IAR_SYSTEMS_ICC__)
    %- %Compiler = "IARARM"
    #define %'ModuleName'%.CONFIG_COMPILER                    %'ModuleName'%.CONFIG_COMPILER_IAR
  #elif defined(__CC_ARM)
    %- (%Compiler = "ARM_CC") %- Keil/ARM compiler
    #define %'ModuleName'%.CONFIG_COMPILER                    %'ModuleName'%.CONFIG_COMPILER_KEIL
  #else
    #warning "a compiler needs to be defined!"
  #endif
#endif


#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------

