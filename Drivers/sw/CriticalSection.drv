%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    03.02.2014
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\CriticalSectionSettings.Inc
%define! Abstract Common\CriticalSectionAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"

/* other includes needed */
#if %'ModuleName'%.CONFIG_USE_RTOS_CRITICAL_SECTION
  #include "FreeRTOS.h"
  #include "task.h"  /* FreeRTOS header file for taskENTER_CRITICAL() and taskEXIT_CRITICAL() macros */
#endif

#ifdef __cplusplus
extern "C" {
#endif
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;

/* workaround macros for wrong EnterCritical()/ExitCritical() in the low level drivers. */
#define %'ModuleName'%.CriticalVariableDrv() \
  %'ModuleName'%.%CriticalVariable()
#define %'ModuleName'%.EnterCriticalDrv() \
  %'ModuleName'%.%EnterCritical()
#define %'ModuleName'%.ExitCriticalDrv() \
  %'ModuleName'%.%ExitCritical()

#ifdef __HIWARE__
  #pragma MESSAGE DISABLE C3303 /* C3303 Implicit concatenation of strings */
#endif

%-
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN CriticalVariable
%ifdef CriticalVariable
#if %'ModuleName'%.CONFIG_USE_PEX_DEFAULT
  #define %'ModuleName'%.%CriticalVariable() /* nothing needed */
#elif %'ModuleName'%.CONFIG_USE_RTOS_CRITICAL_SECTION
  #define %'ModuleName'%.%CriticalVariable() /* nothing needed */
#elif %'ModuleName'%.CONFIG_USE_CUSTOM_CRITICAL_SECTION
  #if %@sdk@'ModuleName'%.CONFIG_CPU_IS_RISC_V
    #define %'ModuleName'%.%CriticalVariable() /* nothing needed */
  #else
    #define %'ModuleName'%.%CriticalVariable() uint8_t cpuSR; /* variable to store current status */
  #endif
#endif
%include Common\CriticalSectionCriticalVariable.Inc

%endif %- CriticalVariable
%-BW_METHOD_END CriticalVariable
%-************************************************************************************************************
%-BW_METHOD_BEGIN EnterCritical
%ifdef EnterCritical
#if %'ModuleName'%.CONFIG_USE_PEX_DEFAULT
  #define %'ModuleName'%.%EnterCritical()   EnterCritical()
#elif %'ModuleName'%.CONFIG_USE_RTOS_CRITICAL_SECTION
  #define %'ModuleName'%.%EnterCritical()   taskENTER_CRITICAL_FROM_ISR() /* FreeRTOS critical section inside interrupt */
#elif %'ModuleName'%.CONFIG_USE_CUSTOM_CRITICAL_SECTION
  #if %@sdk@'ModuleName'%.CONFIG_CPU_IS_RISC_V
    #define %'ModuleName'%.%EnterCritical() \
      do {                                  \
      __asm volatile( "csrc mstatus, 8" ); /* Disable interrupts \todo */ \
      } while(0)
  #elif %@sdk@'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M
    #define %'ModuleName'%.%EnterCritical() \
      do {                                  \
%if (%CPUfamily="Kinetis") || (%CPUfamily = "S32K") %- do not generate code for HCS08/12, as they will report warning about concatenated strings */
      /*lint -save  -esym(529,cpuSR) Symbol 'cpuSR' not subsequently referenced. */\
      __asm (                             \
      "mrs   r0, PRIMASK     \n\t"        \
      "cpsid i               \n\t"        \
      "strb r0, %%[output]   \n\t"         \
      : [output] "=m" (cpuSR) :: "r0");   \
      __asm ("" ::: "memory");            \
      /*lint -restore Symbol 'cpuSR' not subsequently referenced. */\
%endif
      } while(0)
    #endif
#endif
%include Common\CriticalSectionEnterCritical.Inc

%endif %- EnterCritical
%-BW_METHOD_END EnterCritical
%-************************************************************************************************************
%-BW_METHOD_BEGIN ExitCritical
%ifdef ExitCritical
#if %'ModuleName'%.CONFIG_USE_PEX_DEFAULT
  #define %'ModuleName'%.%ExitCritical()   ExitCritical()
#elif %'ModuleName'%.CONFIG_USE_RTOS_CRITICAL_SECTION
  #define %'ModuleName'%.%ExitCritical()   taskEXIT_CRITICAL_FROM_ISR(0) /* FreeRTOS critical section inside interrupt */
#elif %'ModuleName'%.CONFIG_USE_CUSTOM_CRITICAL_SECTION

  #if %@sdk@'ModuleName'%.CONFIG_CPU_IS_RISC_V
    #define %'ModuleName'%.%ExitCritical() \
      do {                                  \
        __asm volatile( "csrs mstatus, 8" ); /* Enable interrupts \todo */ \
      } while(0)
  #elif %@sdk@'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M
    #define %'ModuleName'%.%ExitCritical() \
     do{                                  \
%if (%CPUfamily="Kinetis") || (%CPUfamily = "S32K") %- do not generate code for HCS08/12, as they will report warning about concatenated strings */
     __asm (                            \
     "ldrb r0, %%[input]    \n\t"        \
     "msr PRIMASK,r0        \n\t"       \
     ::[input] "m" (cpuSR) : "r0");     \
%endif
     } while(0)
  #endif
#endif
%include Common\CriticalSectionExitCritical.Inc

%endif %- ExitCritical
%-BW_METHOD_END ExitCritical
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\CriticalSectionDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\CriticalSectionInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-BW_DEFINITION_END
/* END %ModuleName. */

#ifdef __cplusplus
}
#endif

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\CriticalSectionSettings.Inc
%define! Abstract Common\CriticalSectionAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN CriticalVariable
%ifdef CriticalVariable
%include Common\CriticalSectionCriticalVariable.Inc
/*
void %'ModuleName'%.%CriticalVariable(void)
{
  *** Implemented as macro in the header file %'ModuleName'.h
}
*/

%endif %- CriticalVariable
%-BW_METHOD_END CriticalVariable
%-************************************************************************************************************
%-BW_METHOD_BEGIN EnterCritical
%ifdef EnterCritical
%include Common\CriticalSectionEnterCritical.Inc
/*
void %'ModuleName'%.%EnterCritical(void)
{
  *** Implemented as macro in the header file %'ModuleName'.h
}
*/

%endif %- EnterCritical
%-BW_METHOD_END EnterCritical
%-************************************************************************************************************
%-BW_METHOD_BEGIN ExitCritical
%ifdef ExitCritical
%include Common\CriticalSectionExitCritical.Inc
/*
void %'ModuleName'%.%ExitCritical(void)
{
  *** Implemented as macro in the header file %'ModuleName'.h
}
*/

%endif %- ExitCritical
%-BW_METHOD_END ExitCritical
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\CriticalSectionDeinit.Inc
void %'ModuleName'%.%Deinit(void)
{
  /* nothing needed */
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\CriticalSectionInit.Inc
void %'ModuleName'%.%Init(void)
{
  /* nothing needed */
}

%endif %- Init
%-BW_METHOD_END Init
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%CODE_BEGIN
%if (CPUfamily = "S32K")
#ifdef CPU_INIT_MCUONECLIPSE_DRIVERS
%endif
  %'ModuleName'%.%Init(); /* ### %DeviceType "%DeviceName" init code ... */
%if (CPUfamily = "S32K")
#endif
%endif
%CODE_END
%-
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for CriticalSection
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is used to configure settings of the CriticalSection module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

/* select ONE of the following implementation methods: */
#ifndef %'ModuleName'%.CONFIG_USE_RTOS_CRITICAL_SECTION
%if defined(useRTOScritical) & %useRTOScritical='yes'
  #define %'ModuleName'%.CONFIG_USE_RTOS_CRITICAL_SECTION        %>60 1 /* 1: use FreeRTOS critical section; 0: don't use FreeRTOS critical sections */
%else
  #define %'ModuleName'%.CONFIG_USE_RTOS_CRITICAL_SECTION        %>60 0 /* 1: use FreeRTOS critical section; 0: don't use FreeRTOS critical sections */
%endif
#endif

#ifndef %'ModuleName'%.CONFIG_USE_CUSTOM_CRITICAL_SECTION
%if (defined(UseProcessorExpertDefault) && (%UseProcessorExpertDefault='no')) && ((%CPUfamily = "Kinetis")||(%CPUfamily = "S32K")) && (%Compiler = "GNUC")
  #define %'ModuleName'%.CONFIG_USE_CUSTOM_CRITICAL_SECTION      %>60 1 /* 1: Custom implementation (supported for GNU and ARM!); 0: don't use custom implementation */
%else
  #define %'ModuleName'%.CONFIG_USE_CUSTOM_CRITICAL_SECTION      %>60 0 /* 1: Custom implementation (supported for GNU and ARM!); 0: don't use custom implementation */
%endif
#endif

#ifndef %'ModuleName'%.CONFIG_USE_PEX_DEFAULT
%if (defined(UseProcessorExpertDefault) &  %UseProcessorExpertDefault='yes') | !((%CPUfamily = "Kinetis")||(%CPUfamily = "S32K")) && (%Compiler = "GNUC")
  #define %'ModuleName'%.CONFIG_USE_PEX_DEFAULT                  %>60 1 /* 1: use Processor Expert default; 0: use alternative implementation */
%else
  #define %'ModuleName'%.CONFIG_USE_PEX_DEFAULT                  %>60 0 /* 1: use Processor Expert default; 0: use alternative implementation */
%endif
#endif

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------

%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
