%-Driver pre-generated by the Component Development Environment
%-      Copyright: 1997 - 2014 Freescale Semiconductor, Inc. All Rights Reserved. 
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END 
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Development Environment will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  
%define DriverVersion 01.00
%define DriverDate    09/09/2014
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%ifdef TU
  %ifdef @TU@OnCounterRestart
    %define! Description_%@TU@OnCounterRestart Called if counter overflow/underflow or counter is reinitialized by modulo or compare register matching. OnCounterRestart event and Timer unit must be enabled. See <a href="TimerUnit_LDDMethods.html#SetEventMask">SetEventMask</a> and <a href="TimerUnit_LDDMethods.html#GetEventMask">GetEventMask</a> methods.This event is available only if a <a href="TimerUnit_LDDProperties.html#IntServiceCounter">Interrupt</a> is enabled. The event services the event of the inherited component and eventually invokes other events.
  %endif %- @TU@OnCounterRestart
%endif %- TU
%-BW_INTERN_COMMENTS_END
%-
%define CDEversion Community 
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
  %-
%-
%INTERFACE
%define! Settings Common\OneWireSettings.Inc
%define! Abstract Common\OneWireAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-

typedef enum {
  OWERR_OK,
  OWERR_NO_DEVICE,
  OWERR_NO_RESPONSE,
  OWERR_BUSY,
  OWERR_CRC
} %'ModuleName'%.Error;

%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetError
%ifdef GetError
%include Common\OneWireGetError.inc
%'ModuleName'%.Error %'ModuleName'%.%GetError();
%endif  %-GetError
%-BW_METHOD_END GetError

%-*****************************************************************************************************
%ifdef SendByte
%define! Pardata
%define! RetVal
%include Common\OneWireSendByte.inc
bool %'ModuleName'%.%SendByte(byte data);
%endif %- SendByte

%-*****************************************************************************************************
%ifdef GetByte
%define! Pardata
%define! RetVal
%include Common\OneWireGetByte.inc
bool OW1_GetByte(uint8_t *data);
%endif %- GetByte

%-*****************************************************************************************************
%-BW_METHOD_BEGIN read_Pin
%ifdef read_Pin
%include Common\OneWireread_Pin.inc
bool %'ModuleName'%.%read_Pin();
%define!  RetVal
%endif  %-read_Pin
%-BW_METHOD_END read_Pin

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_recv_low
%ifdef i_recv_low
%include Common\OneWirei_recv_low.inc
void %'ModuleName'%.%i_recv_low();
%endif  %-i_recv_low
%-BW_METHOD_END i_recv_low

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_wait
%ifdef i_wait
%include Common\OneWirei_wait.inc
void %'ModuleName'%.%i_wait();
%endif  %-i_wait
%-BW_METHOD_END i_wait

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_presence
%ifdef i_presence
%include Common\OneWirei_presence.inc
void %'ModuleName'%.%i_presence();
%endif  %-i_presence
%-BW_METHOD_END i_presence

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_action
%ifdef i_action
%include Common\OneWirei_action.inc
void %'ModuleName'%.%i_action();
%endif  %-i_action
%-BW_METHOD_END i_action

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_run
%ifdef i_run
%include Common\OneWirei_run.inc
void %'ModuleName'%.%i_run();
%endif  %-i_run
%-BW_METHOD_END i_run

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_recv_get
%ifdef i_recv_get
%include Common\OneWirei_recv_get.inc
void %'ModuleName'%.%i_recv_get();
%endif  %-i_recv_get
%-BW_METHOD_END i_recv_get

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_recv_float
%ifdef i_recv_float
%include Common\OneWirei_recv_float.inc
void %'ModuleName'%.%i_recv_float();
%endif  %-i_recv_float
%-BW_METHOD_END i_recv_float

%-*****************************************************************************************************


%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_send_float
%ifdef i_send_float
%include Common\OneWirei_send_float.inc
void %'ModuleName'%.%i_send_float();
%endif  %-i_send_float
%-BW_METHOD_END i_send_float

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_send_low
%ifdef i_send_low
%include Common\OneWirei_send_low.inc
void %'ModuleName'%.%i_send_low();
%endif  %-i_send_low
%-BW_METHOD_END i_send_low

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_reset
%ifdef i_reset
%include Common\OneWirei_reset.inc
void %'ModuleName'%.%i_reset();
%endif  %-i_reset
%-BW_METHOD_END i_reset

%-*****************************************************************************************************
%ifdef Waitms
%define! Parkey
%define! Partime_ms
%define! RetVal
%include Common\OneWireWaitms.inc
bool %'ModuleName'%.%Waitms(byte key, uint8_t time_ms);
%endif %- Waitms

%-*****************************************************************************************************
%ifdef ProgramEvent
%define! Parkey
%define! RetVal
%include Common\OneWireProgramEvent.inc
bool %'ModuleName'%.%ProgramEvent(uint8_t key);
%endif %- ProgramEvent

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Count
%ifdef Count
%include Common\OneWireCount.inc
uint8_t %'ModuleName'%.%Count();
%define!  RetVal
%endif  %-Count
%-BW_METHOD_END Count

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Receive
%ifdef Receive
%define! ParnumOfBytes
%define! RetVal
%include Common\OneWireReceive.inc
bool %'ModuleName'%.%Receive(byte numOfBytes);
%endif %- Receive
%-BW_METHOD_END Receive

%-*****************************************************************************************************
%ifdef SendBytes
%define! Pardata
%define! Parcount
%define! RetVal
%include Common\OneWireSendBytes.inc
bool %'ModuleName'%.%SendBytes(uint8_t *data, uint8_t count);
%endif %- SendBytes

%-*****************************************************************************************************
%-BW_METHOD_BEGIN SendReset
%ifdef SendReset
%include Common\OneWireSendReset.inc
bool %'ModuleName'%.%SendReset();
%define!  RetVal
%endif  %-SendReset
%-BW_METHOD_END SendReset

%-*****************************************************************************************************
%ifdef add_CRC
%define! ParbitValue
%include Common\OneWireadd_CRC.inc
void %'ModuleName'%.%add_CRC(uint8_t bitValue);
%endif %- add_CRC

%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetBytes
%ifdef GetBytes
%define! Pardata
%define! Parcount
%define! RetVal
%include Common\OneWireGetBytes.inc
bool %'ModuleName'%.%GetBytes(uint8_t *data, uint8_t count);
%define! Parbytes_array
%define! Parcount
%endif %- GetBytes
%-BW_METHOD_END GetBytes

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\OneWireInit.inc
void %'ModuleName'%.%Init();
%endif  %-Init
%-BW_METHOD_END Init

%-INHERITED_EVENT_BEGIN TU OnCounterRestart
%ifdef @TU@OnCounterRestart
void %@TU@OnCounterRestart(LDD_TUserData *UserDataPtr);

%endif %- @TU@OnCounterRestart
%-INHERITED_EVENT_END TU OnCounterRestart

%-************************************************************************************************************
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnSendedReset
%ifdef OnSendedReset
%INTERFACE OnSendedReset
void %OnSendedReset();
%include Common\OneWireOnSendedReset.inc
%endif %-OnSendedReset
%-BW_METHOD_END OnSendedReset
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnSendEnd
%ifdef OnSendEnd
%INTERFACE OnSendEnd
void %OnSendEnd();
%include Common\OneWireOnSendEnd.inc
%endif %-OnSendEnd
%-BW_METHOD_END OnSendEnd
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnWaitEnd
%ifdef OnWaitEnd
%INTERFACE OnWaitEnd
void %OnWaitEnd(uint8_t key2);
%define! Parkey2
%include Common\OneWireOnWaitEnd.inc
%endif %- OnWaitEnd
%-BW_METHOD_END OnWaitEnd
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnBlockReceived
%ifdef OnBlockReceived
%INTERFACE OnBlockReceived
void %OnBlockReceived();
%include Common\OneWireOnBlockReceived.inc
%endif %-OnBlockReceived
%-BW_METHOD_END OnBlockReceived
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnError
%ifdef OnError
%INTERFACE OnError
void %OnError(%'ModuleName'_Error error);
%include Common\OneWireOnError.inc
%endif %-OnError
%-BW_METHOD_END OnError
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnProgramEvent
%ifdef OnProgramEvent
%INTERFACE OnProgramEvent
void %OnProgramEvent(uint8_t key4);
%define! Parkey4
%include Common\OneWireOnProgramEvent.inc
%endif %- OnProgramEvent
%-BW_METHOD_END OnProgramEvent
%-*****************************************************************************************************

%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\OneWireSettings.Inc
%define! Abstract Common\OneWireAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
#define INPUT          0U
#define OUTPUT         1U
#define DQ_Float()     GPIO_PDD_SetPortInputDirectionMask(%@DQ@'ModuleName'%.MODULE_BASE_ADDRESS, %@DQ@'ModuleName'%.PORT_MASK)
#define DQ_Low()       GPIO_PDD_SetPortOutputDirectionMask(%@DQ@'ModuleName'%.MODULE_BASE_ADDRESS, %@DQ@'ModuleName'%.PORT_MASK)
#define DQ_Read()      %'ModuleName'%.read_Pin()
#define TU_SetTime(t)  %@TU@'ModuleName'%.SetPeriodTicks(Data.TUDeviceDataPtr, (t) * Data.Ticks)

typedef enum {
	TS_NOTHING, TS_RESET_LOW, TS_RESET_FLOAT, TS_PRESENCE,
	TS_WRITE_LOW, TS_WRITE_FLOAT,
	TS_READ_LOW, TS_READ_FLOAT, TS_READ_GET,
	TS_WAIT_INTER, TS_WAIT, TS_EVENT
} %'ModuleName'%.TimerStep;

typedef enum {
	I_RESET,
	I_SEND,
	I_RECV,
	I_WAIT,
	I_EVENT
} INSTR;

typedef struct {
	INSTR Instr     :3;
	unsigned Count  :5;
} PROG;

struct {
	LDD_TDeviceData * TUDeviceDataPtr;
	%'ModuleName'%.TimerStep Step;
	uint16 Ticks;
	uint16 WaitTime;
	uint32 WaitTotal;
	uint16 WaitDiv;
	uint16 WaitRes;
	uint8 CRC;
	%'ModuleName'%.Error Error;
	PROG Prog;
	uint8 WorkByte;
	unsigned ToWork     :6;
	unsigned WorkBit    :1;
	unsigned Busy       :1;
	unsigned WorkBitPos :3;
	unsigned WaitEvent  :1;
	unsigned SkipWEvent :1;
	unsigned WaitKey    :5;
} Data;

#define QUEUE(type, q, len) \
	type q[len], *q##_First, *q##_Last; \
	uint8 w_##q=0, r_##q=0, c_##q=0; \
	void q##_Put(type c) { \
		if(c_##q==len) return; \
		%@CS@'ModuleName'%.CriticalVariable(); \
		%@CS@'ModuleName'%.EnterCritical(); \
		q[w_##q] = c; \
		q##_Last = &q[w_##q]; \
		c_##q++; \
		if(++w_##q==len) w_##q=0; \
		%@CS@'ModuleName'%.ExitCritical(); \
	} \
	type q##_Get() { \
		type r; \
		if(c_##q==0) return q[r_##q]; \
		%@CS@'ModuleName'%.CriticalVariable(); \
		%@CS@'ModuleName'%.EnterCritical(); \
		r = q[r_##q]; \
		if(++r_##q==len) r_##q=0; \
		c_##q--; \
		q##_First = &q[r_##q]; \
		%@CS@'ModuleName'%.ExitCritical(); \
		return r; \
	} \
	uint8 q##_isEmpty() { \
		return r_##q==w_##q; \
	} \
	uint8 q##_isFull() { \
		return c_##q==len; \
	} \
	uint8 q##_Count() { \
		return c_##q; \
	} \
	uint8 q##_CountFree() { \
		return len - c_##q; \
	} \
	void q##_Clear() { \
		r_##q=w_##q; \
		c_##q=0; \
	}
// End of define QUEUE

QUEUE(uint8, Output, %szOutput)
QUEUE(uint8, Input, %szInput)
QUEUE(uint16, Time, %szTime)
QUEUE(PROG, Program, %szProgram)

%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetError
%ifdef GetError
%include Common\OneWireGetError.inc
%'ModuleName'%.Error %'ModuleName'%.%GetError()
{
%CODE_BEGIN
	return Data.Error;
%CODE_END
}
%endif %-GetError
%-BW_METHOD_END GetError

%-*****************************************************************************************************
%-BW_METHOD_BEGIN SendBytes
%ifdef SendBytes
%define! Pardata
%define! Parcount
%define! RetVal
%include Common\OneWireSendBytes.inc
bool %'ModuleName'%.%SendBytes(uint8_t *data, uint8_t count)
{
  PROG pr;

  if((Program_Last->Instr != I_SEND && Program_isFull()) || Output_CountFree() < count) {
    return FALSE;
  }
  pr.Instr = I_SEND;
  pr.Count = count;
  for(;count>0;count--) {
    Output_Put(*data);
    data++;
  }
  if(Program_Last->Instr == I_SEND) {
    Program_Last->Count += pr.Count;
  } else {
    Program_Put(pr);
  }
  if(!Data.Busy) {
    %'ModuleName'%.i_action();
    %'ModuleName'%.i_run();
    %'ModuleName'%.i_send_low();
  }
  return TRUE;
}
%endif %- SendBytes
%-BW_METHOD_END SendBytes

%-*****************************************************************************************************
%-BW_METHOD_BEGIN read_Pin
%ifdef read_Pin
%define! RetVal
%include Common\OneWireread_Pin.inc
bool %'ModuleName'%.%read_Pin()
{
  uint32_t PortData;                   /* Port data masked according to the bit used */
  if ((GPIO_PDD_GetPortDirection(DQ1_MODULE_BASE_ADDRESS) & DQ1_PORT_MASK) == 0U) {
    /* Port is configured as input */
    PortData = GPIO_PDD_GetPortDataInput(DQ1_MODULE_BASE_ADDRESS) & DQ1_PORT_MASK;
  } else {
    /* Port is configured as output */
    PortData = GPIO_PDD_GetPortDataOutput(DQ1_MODULE_BASE_ADDRESS) & DQ1_PORT_MASK;
  }
  return (PortData != 0U) ? (bool)TRUE : (bool)FALSE;
}
%endif %-read_Pin
%-BW_METHOD_END read_Pin

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_recv_low
%ifdef i_recv_low
%include Common\OneWirei_recv_low.inc
void %'ModuleName'%.%i_recv_low()
{
  DQ_Low();
  Data.SkipWEvent = TRUE;
  TU_SetTime(%EXPR(%waitTime - %readTime));
  Data.Step = TS_READ_FLOAT;
}
%endif %-i_recv_low
%-BW_METHOD_END i_recv_low


%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_run
%ifdef i_run
%include Common\OneWirei_run.inc
void %'ModuleName'%.%i_run()
{
  Data.Busy = TRUE;
  %@TU@'ModuleName'%.ResetCounter(Data.TUDeviceDataPtr);
  %@TU@'ModuleName'%.Enable(Data.TUDeviceDataPtr);
}
%endif %-i_run
%-BW_METHOD_END i_run

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_action
%ifdef i_action
%include Common\OneWirei_action.inc
void %'ModuleName'%.%i_action()
{
	if(Program_isEmpty()) {
		TU_SetTime(%slotTime);
		Data.Step = TS_NOTHING;
		return;
	}
	Data.Prog = Program_Get();
	switch(Data.Prog.Instr) {
		case I_RESET:
			TU_SetTime(%resetTime);
			Data.Step = TS_RESET_LOW;
			break;
		case I_SEND:
			Data.ToWork = Data.Prog.Count;
			%'ModuleName'%.i_send_float();
			break;
		case I_RECV:
			Data.ToWork = Data.Prog.Count;
			Data.WorkByte = 0;
			TU_SetTime(%readTime);
			Data.Step = TS_READ_LOW;
			break;
		case I_WAIT:
			Data.WaitTime = Time_Get();
			Data.WaitTotal = (uint32) Data.WaitTime * Data.Ticks * 1000U;
			Data.WaitDiv = Data.WaitTotal >> 16;
			Data.WaitRes = Data.WaitTotal & 0x0000FFFF;
			if(Data.WaitDiv == 0) {
				%@TU@'ModuleName'%.SetPeriodTicks(Data.TUDeviceDataPtr, Data.WaitRes);
				Data.Step = TS_WAIT;
			} else {
				%@TU@'ModuleName'%.SetPeriodTicks(Data.TUDeviceDataPtr, 0xFFFF);
				Data.Step = TS_WAIT_INTER;
			}
			break;
		case I_EVENT:
			TU_SetTime(%resetTime);
			Data.Step = TS_EVENT;
			break;
	}
}
%endif %-i_action
%-BW_METHOD_END i_action

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_reset
%ifdef i_reset
%include Common\OneWirei_reset.inc
void %'ModuleName'%.%i_reset()
{
  DQ_Low();
  TU_SetTime(%responseTime);
  Data.Step = TS_RESET_FLOAT;
}
%endif %-i_reset
%-BW_METHOD_END i_reset

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_presence
%ifdef i_presence
%include Common\OneWirei_presence.inc
void %'ModuleName'%.%i_presence()
{
  if(DQ_Read()) {	//No response
    Data.Step = TS_NOTHING;
    Data.Error = OWERR_NO_DEVICE;
  %ifdef OnError
    %OnError(Data.Error);
  %endif
  } else {
    Data.Error = OWERR_OK;
    %'ModuleName'%.i_action();
  }
}
%endif %-i_presence
%-BW_METHOD_END i_presence

%-*****************************************************************************************************
%-BW_METHOD_BEGIN SendReset
%ifdef SendReset
%define! RetVal
%include Common\OneWireSendReset.inc
bool %'ModuleName'%.%SendReset()
{
  PROG pr;

  if(Program_isFull()) return FALSE;
  pr.Instr = I_RESET;
  Program_Put(pr);
  if(!Data.Busy) {
    %'ModuleName'%.i_action();
    %'ModuleName'%.i_run();
    %'ModuleName'%.i_reset();
  }
  return TRUE;
}
%endif %-SendReset
%-BW_METHOD_END SendReset

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_send_low
%ifdef i_send_low
%include Common\OneWirei_send_low.inc
void %'ModuleName'%.%i_send_low()
{
  DQ_Low();
  if(Data.WorkBit) {
    TU_SetTime(%EXPR(%slotTime - %highTime));
    Data.SkipWEvent = TRUE;
  } else {
    TU_SetTime(%EXPR(%slotTime - %lowTime));
  }
  Data.Step = TS_WRITE_FLOAT;
}
%endif %-i_send_low
%-BW_METHOD_END i_send_low

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_send_float
%ifdef i_send_float
%include Common\OneWirei_send_float.inc
void %'ModuleName'%.%i_send_float()
{
	DQ_Float();
	if(Data.WorkBitPos==0) {
		if(Data.ToWork) {
			Data.WorkByte = Output_Get();
			Data.ToWork--;
		} else {
			%'ModuleName'%.i_action();
			return;
		}
	}
	Data.WorkBit = Data.WorkByte & 1;
	Data.WorkByte >>= 1;
	if(Data.WorkBit) TU_SetTime(%highTime);
	else TU_SetTime(%lowTime);
	Data.WorkBitPos++;
	Data.Step = TS_WRITE_LOW;
}
%endif %-i_send_float
%-BW_METHOD_END i_send_float

%-*****************************************************************************************************
%-BW_METHOD_BEGIN SendByte
%ifdef SendByte
%define! Pardata
%define! RetVal
%include Common\OneWireSendByte.inc
bool %'ModuleName'%.%SendByte(byte data)
{
  PROG pr;

  if(Program_Last->Instr == I_SEND) {
    Output_Put(data);
    Program_Last->Count++;
  } else {
    if(Program_isFull()) {
      return FALSE;
    }
    Output_Put(data);
    pr.Instr = I_SEND;
    pr.Count = 1;
    Program_Put(pr);
  }
  if(!Data.Busy) {
    %'ModuleName'%.i_action();
    %'ModuleName'%.i_run();
    %'ModuleName'%.i_send_low();
  }
  return TRUE;
}
%endif %- SendByte
%-BW_METHOD_END SendByte

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_recv_float
%ifdef i_recv_float
%include Common\OneWirei_recv_float.inc
void %'ModuleName'%.%i_recv_float()
{
  DQ_Float();
  TU_SetTime(%EXPR(%slotTime - %waitTime));
  Data.SkipWEvent = TRUE;
  Data.Step = TS_READ_GET;
}
%endif %-i_recv_float
%-BW_METHOD_END i_recv_float

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_recv_get
%ifdef i_recv_get
%include Common\OneWirei_recv_get.inc
void %'ModuleName'%.%i_recv_get()
{
	Data.WorkByte >>= 1;
	Data.WorkBit = DQ_Read();
	%'ModuleName'%.add_CRC(Data.WorkBit);
	Data.WorkByte += (Data.WorkBit ? 0x80 : 0);
	if(Data.WorkBitPos == 7) { //Full byte
		Input_Put(Data.WorkByte);
		Data.ToWork--;
		if(Data.ToWork == 0) {		//finish
			if(Data.CRC){
				Data.Error = OWERR_CRC;
				%ifdef OnError
				%OnError(Data.Error);
				%endif
			} else {
				Data.Error = OWERR_OK;
				%ifdef OnBlockReceived
				%OnBlockReceived();
				%endif
			}
			%'ModuleName'%.i_action();
			return;
		}
	}
	Data.WorkBitPos++;
	TU_SetTime(%readTime);
	Data.Step = TS_READ_LOW;
}
%endif %-i_recv_get
%-BW_METHOD_END i_recv_get

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Receive
%ifdef Receive
%define! ParnumOfBytes
%define! RetVal
%include Common\OneWireReceive.inc
bool %'ModuleName'%.%Receive(uint8_t numOfBytes)
{
  PROG pr;

  if(Program_isFull()) {
    return FALSE;
  }
  pr.Instr = I_RECV;
  pr.Count = numOfBytes;
  Program_Put(pr);
  if(!Data.Busy) {
    %'ModuleName'%.i_action();
    %'ModuleName'%.i_run();
    %'ModuleName'%.i_recv_float();
  }
  return TRUE;
}
%endif %- Receive
%-BW_METHOD_END Receive

%-*****************************************************************************************************
%-BW_METHOD_BEGIN ProgramEvent
%ifdef ProgramEvent
%define! Parkey
%define! RetVal
%include Common\OneWireProgramEvent.inc
bool %'ModuleName'%.%ProgramEvent(uint8_t key)
{
  PROG pr;

  if(Program_isFull()) {
    return FALSE;
  }
  pr.Instr = I_EVENT;
  pr.Count = key;
  Program_Put(pr);
  if(!Data.Busy) {
    %'ModuleName'%.i_action();
  }
  return TRUE;
}
%endif %- ProgramEvent
%-BW_METHOD_END ProgramEvent

%-*****************************************************************************************************
%-BW_METHOD_BEGIN i_wait
%ifdef i_wait
%include Common\OneWirei_wait.inc
void %'ModuleName'%.%i_wait(void)
{
  Data.WaitEvent = FALSE;
  %OnWaitEnd(Data.WaitKey);
}
%endif %-i_wait
%-BW_METHOD_END i_wait

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Waitms
%ifdef Waitms
%define! Partime_ms
%define! Parkey
%define! RetVal
%include Common\OneWireWaitms.inc
bool %'ModuleName'%.%Waitms(byte key, uint8_t time_ms)
{
  PROG pr;
  %@CS@'ModuleName'%.CriticalVariable()

  if(Program_isFull() || Time_isFull()) {
    return FALSE;
  }
  %@CS@'ModuleName'%.EnterCritical();
  pr.Instr = I_WAIT;
  pr.Count = key;
  Program_Put(pr);
  Time_Put(time_ms);
  %@CS@'ModuleName'%.ExitCritical();
  return TRUE;
}
%endif %- Waitms
%-BW_METHOD_END Waitms

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Count
%ifdef Count
%define! RetVal
%include Common\OneWireCount.inc
uint8_t %'ModuleName'%.%Count(void)
{
  return Input_Count();
}
%endif %-Count
%-BW_METHOD_END Count

%-*****************************************************************************************************
%-BW_METHOD_BEGIN add_CRC
%ifdef add_CRC
%define! ParbitValue
%include Common\OneWireadd_CRC.inc
void %'ModuleName'%.%add_CRC(uint8_t bitValue)
{
  bool fb;

  fb = (Data.CRC & 0x01) ^ bitValue;
  Data.CRC >>= 1;
  if(fb) {
    Data.CRC ^= 0x8C;
  }
}
%endif %- add_CRC
%-BW_METHOD_END add_CRC

%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetByte
%ifdef GetByte
%define! Pardata
%define! RetVal
%include Common\OneWireGetByte.inc
bool %'ModuleName'%.%GetByte(uint8_t *data)
{
  if (Input_isEmpty()) {
    return FALSE;
  }
  *data = Input_Get();
  return TRUE;
}
%endif %- GetByte
%-BW_METHOD_END GetByte

%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetBytes
%ifdef GetBytes
%define! Par_byte
%define! Pardata
%define! Parcount
%define! RetVal
%include Common\OneWireGetBytes.inc
bool %'ModuleName'%.%GetBytes(uint8_t *data, uint8_t count)
{
  if(count > Input_Count()) {
    return FALSE;
  }
  for(;count>0;count--) {
    *data = Input_Get();
    data++;
  }
  return TRUE;
}
%endif %- GetBytes
%-BW_METHOD_END GetBytes

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\OneWireInit.inc
void %'ModuleName'%.%Init()
{
  GPIO_PDD_ClearPortDataOutputMask(%@DQ@'ModuleName'%.MODULE_BASE_ADDRESS, %@DQ@'ModuleName'%.PORT_MASK);
  DQ_Float();
  Data.TUDeviceDataPtr = %@TU@'ModuleName'%.Init(NULL);
  Data.Ticks = %@TU@'ModuleName'%.GetInputFrequency(Data.TUDeviceDataPtr) / 1000000U;
  Data.Busy = FALSE;
  Data.WorkBitPos = 0;
  Data.WaitEvent = FALSE;
  Data.SkipWEvent = FALSE;
  Data.Step = TS_NOTHING;
  Data.CRC = 0;
  Data.Error = OWERR_OK;
}
%endif %-Init
%-BW_METHOD_END Init

%-INHERITED_EVENT_BEGIN TU OnCounterRestart
%ifdef @TU@OnCounterRestart
%include Common\GeneralInternal.inc (OnCounterRestart)
void %@TU@OnCounterRestart(LDD_TUserData *UserDataPtr)
{
	switch(Data.Step) {
		case TS_NOTHING:
			if(Program_isEmpty()) {
				%@TU@'ModuleName'%.Disable(Data.TUDeviceDataPtr);
				Data.Busy = FALSE;
			} else {
				%'ModuleName'%.i_action();
			}
			break;
		case TS_RESET_LOW:
			%'ModuleName'%.i_reset();
			break;
		case TS_RESET_FLOAT:
			DQ_Float();
			TU_SetTime(%EXPR(%resetTime - %responseTime));
			Data.Step = TS_PRESENCE;
			break;
		case TS_PRESENCE:
			%'ModuleName'%.i_presence();
			break;
		case TS_WRITE_LOW:
			%'ModuleName'%.i_send_low();
			break;
		case TS_WRITE_FLOAT:
			%'ModuleName'%.i_send_float();
			break;
		case TS_READ_LOW:
			%'ModuleName'%.i_recv_low();
			break;
		case TS_READ_FLOAT:
			%'ModuleName'%.i_recv_float();
			break;
		case TS_READ_GET:
			%'ModuleName'%.i_recv_get();
			break;
		case TS_WAIT_INTER:
			Data.WaitDiv--;
			if(Data.WaitDiv == 0) {
				%@TU@'ModuleName'%.SetPeriodTicks(Data.TUDeviceDataPtr, Data.WaitRes);
				Data.Step = TS_WAIT;
			}
			break;
		case TS_WAIT:
			Data.WaitKey = Data.Prog.Count;
			%'ModuleName'%.i_action();
			Data.WaitEvent = TRUE;
			Data.SkipWEvent = TRUE;
			break;
		case TS_EVENT:
%ifdef OnProgramEvent
			%OnProgramEvent(Data.Prog.Count);
%endif %- OnProgramEvent
			%'ModuleName'%.i_action();
			break;
	}
	if(Data.SkipWEvent) {
		Data.SkipWEvent = FALSE;
	} else {
		if(Data.WaitEvent) {
%ifdef OnWaitEnd
			%OnWaitEnd(Data.WaitKey);
%endif %- OnWaitEnd
			Data.WaitEvent = FALSE;
		}
	}
}
%endif %- @TU@OnCounterRestart
%-INHERITED_EVENT_END TU OnCounterRestart

%-************************************************************************************************************
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnSendedReset
%ifdef OnSendedReset
%IMPLEMENTATION OnSendedReset
%include Common\OneWireOnSendedReset.inc
void %OnSendedReset(void)
{
  /* Write your code here ... */
}
%endif %-OnSendedReset
%-BW_METHOD_END OnSendedReset

%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnSendEnd
%ifdef OnSendEnd
%IMPLEMENTATION OnSendEnd
%include Common\OneWireOnSendEnd.inc
void %OnSendEnd(void)
{
  /* Write your code here ... */
}
%endif %-OnSendEnd
%-BW_METHOD_END OnSendEnd

%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnWaitEnd
%ifdef OnWaitEnd
%IMPLEMENTATION OnWaitEnd
%define! Parkey2
%include Common\OneWireOnWaitEnd.inc
void %OnWaitEnd(uint8_t key2)
{
  /* Write your code here ... */
}
%endif %- OnWaitEnd
%-BW_METHOD_END OnWaitEnd

%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnBlockReceived
%ifdef OnBlockReceived
%IMPLEMENTATION OnBlockReceived
%include Common\OneWireOnBlockReceived.inc
void %OnBlockReceived()
{
  /* Write your code here ... */
}
%endif %-OnBlockReceived
%-BW_METHOD_END OnBlockReceived

%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnError
%ifdef OnError
%IMPLEMENTATION OnError
%define! Parerror
%include Common\OneWireOnError.inc
void %OnError(%'ModuleName'_Error error)
{
  /* Write your code here ... */
}
%endif %-OnError
%-BW_METHOD_END OnError

%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnProgramEvent
%ifdef OnProgramEvent
%IMPLEMENTATION OnProgramEvent
%define! Parkey4
%include Common\OneWireOnProgramEvent.inc
void %OnProgramEvent(uint8_t key4)
{
  /* Write your code here ... */
}
%endif %- OnProgramEvent
%-BW_METHOD_END OnProgramEvent

%-*****************************************************************************************************
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.%Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
