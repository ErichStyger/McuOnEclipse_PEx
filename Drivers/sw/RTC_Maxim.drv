%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    26.11.2012
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\RTC_MaximSettings.Inc
%define! Abstract Common\RTC_MaximAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

#ifndef __BWUserType_%'ModuleName'_TTIME
#define __BWUserType_%'ModuleName'_TTIME
  typedef struct {                                               %>40/* Time in binary format */
    uint8_t hour;                                                %>40/* hours */
    uint8_t min;                                                 %>40/* minutes */
    uint8_t sec;                                                 %>40/* seconds */
    bool mode;                                                   %>40/* clock mode, 0 for 12-hour mode, otherwise 0-24 hour mode */
    uint8_t am_pm;                                               %>40/* 0: AM, otherwise PM */
  } %'ModuleName'_TTIME;
#endif
#ifndef __BWUserType_%'ModuleName'_TDATE
#define __BWUserType_%'ModuleName'_TDATE
  typedef struct {                                               %>40/* Date in binary format */
    uint8_t year;                                                %>40/* year */
    uint8_t month;                                               %>40/* month */
    uint8_t day;                                                 %>40/* day */
    uint8_t dayOfWeek;                                           %>40/* Day of week, where 0 is the first day. In the range of 0..6 */
  } %'ModuleName'_TDATE;
#endif

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-

#ifndef __BWUserType_TIMEREC
#define __BWUserType_TIMEREC
  typedef struct {                                               %>40/* It contains actual number of hours, minutes, seconds and hundreth of seconds. */
    uint8_t Hour;                                                %>40/* hours (0 - 23) */
    uint8_t Min;                                                 %>40/* minutes (0 - 59) */
    uint8_t Sec;                                                 %>40/* seconds (0 - 59) */
    uint8_t Sec100;                                              %>40/* hundredth of seconds (0 - 99) */
  } TIMEREC;
#endif
#ifndef __BWUserType_DATEREC
#define __BWUserType_DATEREC
  typedef struct {                                               %>40/* It contains actual year, month, and day description. */
    uint16_t Year;                                               %>40/* years (1998 - 2099) */
    uint8_t Month;                                               %>40/* months (1 - 12) */
    uint8_t Day;                                                 %>40/* days (1 - 31) */
  } DATEREC;
#endif

%ifdef ParseCommand
#define %'ModuleName'%.PARSE_COMMAND_ENABLED  1  /* set to 1 if method ParseCommand() is present, 0 otherwise */
%else
#define %'ModuleName'%.PARSE_COMMAND_ENABLED  0 /* set to 1 if method ParseCommand() is present, 0 otherwise */
%endif %- ParseCommand

/* device memory addresses */
#if %'ModuleName'%.CONFIG_DEVICE==3231 || %'ModuleName'%.CONFIG_DEVICE==3232
  #define %'ModuleName'%.MEM_SECONDS_ADDR       0x00  /* Seconds */
  #define %'ModuleName'%.MEM_MINUTES_ADDR       0x01  /* Minutes */
  #define %'ModuleName'%.MEM_HOURS_ADDR         0x02  /* Hours */
  #define %'ModuleName'%.MEM_DAY_ADDR           0x03  /* Day */
  #define %'ModuleName'%.MEM_DATE_ADDR          0x04  /* Date */
  #define %'ModuleName'%.MEM_MONTH_ADDR         0x05  /* Month */
  #define %'ModuleName'%.MEM_YEAR_ADDR          0x06  /* Year */
  #define %'ModuleName'%.MEM_CTRL_ADDR          0x0E  /* Control */
  #define %'ModuleName'%.MEM_CTRL_STATUS_ADDR   0x0F  /* Control/Status */
  #define %'ModuleName'%.MEM_AGING_OFFSET_ADDR  0x10  /* Aging offset */
  #define %'ModuleName'%.MEM_MSB_TEMP_ADDR      0x11  /* MSB of Temp */
  #define %'ModuleName'%.MEM_LSB_TEMP_ADDR      0x12  /* LSB of Temp */
  /* Address 0x13 is reserved */
  #if %'ModuleName'%.CONFIG_DEVICE==3232 /* 3231 has no RAM */
    #define %'ModuleName'%.MEM_RAM_START_ADDR     0x14  /* device memory start address of non-volatile RAM */
    #define %'ModuleName'%.MEM_RAM_END_ADDR       0xFF  /* device memory end address of non-volatile RAM */
  #endif
#elif %'ModuleName'%.CONFIG_DEVICE==1307
  #define %'ModuleName'%.MEM_SECONDS_ADDR       0x00  /* Seconds */
  #define %'ModuleName'%.MEM_MINUTES_ADDR       0x01  /* Minutes */
  #define %'ModuleName'%.MEM_HOURS_ADDR         0x02  /* Hours */
  #define %'ModuleName'%.MEM_DAY_ADDR           0x03  /* Day */
  #define %'ModuleName'%.MEM_DATE_ADDR          0x04  /* Date */
  #define %'ModuleName'%.MEM_MONTH_ADDR         0x05  /* Month */
  #define %'ModuleName'%.MEM_YEAR_ADDR          0x06  /* Year */
  #define %'ModuleName'%.MEM_CTRL_ADDR          0x07  /* Control */
  #define %'ModuleName'%.MEM_RAM_START_ADDR     0x08  /* device memory start address of non-volatile RAM */
  #define %'ModuleName'%.MEM_RAM_END_ADDR       0x3F  /* device memory end address of non-volatile RAM */
#elif %'ModuleName'%.CONFIG_DEVICE==1342
  #define %'ModuleName'%.MEM_SECONDS_ADDR       0x00  /* Seconds */
  #define %'ModuleName'%.MEM_MINUTES_ADDR       0x01  /* Minutes */
  #define %'ModuleName'%.MEM_HOURS_ADDR         0x02  /* Hours */
  #define %'ModuleName'%.MEM_DAY_ADDR           0x03  /* Day */
  #define %'ModuleName'%.MEM_DATE_ADDR          0x04  /* Date */
  #define %'ModuleName'%.MEM_MONTH_ADDR         0x05  /* Month */
  #define %'ModuleName'%.MEM_YEAR_ADDR          0x06  /* Year */
  #define %'ModuleName'%.MEM_CTRL_ADDR          0x0E  /* Control */
#else
  #error "unknown device?"
#endif

#if %'ModuleName'%.CONFIG_DEVICE==1342
  #define %'ModuleName'%.MEM_SIZE               (0)  /* no memory for DS1342 */
#elif %'ModuleName'%.CONFIG_DEVICE==3231
  #define %'ModuleName'%.MEM_SIZE               (0)  /* no memory for DS3231*/
#else
  #define %'ModuleName'%.MEM_SIZE               (%'ModuleName'%.MEM_RAM_END_ADDR-%'ModuleName'%.MEM_RAM_START_ADDR+1)  /* device memory start address of non-volatile RAM, in bytes */
  #define %'ModuleName'%.MAX_ADDRESS            (%'ModuleName'%.MEM_SIZE-1)  /* maximum RAM address of device */
#endif

#define %'ModuleName'%.MEM_TIME_STRUCT_ADDR      %'ModuleName'%.MEM_SECONDS_ADDR  /* device memory start address for time */
#define %'ModuleName'%.MEM_TIME_STRUCT_SIZE      0x03  /* device memory size for time */

#define %'ModuleName'%.MEM_DATE_STRUCT_ADDR      %'ModuleName'%.MEM_DAY_ADDR  /* device memory start address for date */
#define %'ModuleName'%.MEM_DATE_STRUCT_SIZE      0x04  /* device memory size for date */

#define %'ModuleName'%.MEM_TIME_DATE_STRUCT_ADDR (%'ModuleName'%.MEM_TIME_STRUCT_ADDR)  /* device memory start address for time and date */
#define %'ModuleName'%.MEM_TIME_DATE_STRUCT_SIZE (%'ModuleName'%.MEM_TIME_STRUCT_SIZE+%'ModuleName'%.MEM_DATE_STRUCT_SIZE)  /* device memory size for time and date */

#define %'ModuleName'_TTIME_AMPM_AM   0  /* AM */
#define %'ModuleName'_TTIME_AMPM_PM   1  /* PM */
#define %'ModuleName'_TTIME_MODE_12H  0  /* 12 hour clock mode */
#define %'ModuleName'_TTIME_MODE_24H  1  /* 14 hour clock mode */
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetRTCTimeDate
%ifdef GetRTCTimeDate
uint8_t %'ModuleName'%.%GetRTCTimeDate(%'ModuleName'_TTIME *time, %'ModuleName'_TDATE *date);
%define! Partime
%define! Pardate
%define! RetVal
%include Common\RTC_MaximGetRTCTimeDate.Inc

%endif %- GetRTCTimeDate
%-BW_METHOD_END GetRTCTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetRTCTimeDate
%ifdef SetRTCTimeDate
uint8_t %'ModuleName'%.%SetRTCTimeDate(%'ModuleName'_TTIME *time, %'ModuleName'_TDATE *date);
%define! Partime
%define! Pardate
%define! RetVal
%include Common\RTC_MaximSetRTCTimeDate.Inc

%endif %- SetRTCTimeDate
%-BW_METHOD_END SetRTCTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetRTCTime
%ifdef SetRTCTime
uint8_t %'ModuleName'%.%SetRTCTime(%'ModuleName'_TTIME *time);
%define! Partime
%define! RetVal
%include Common\RTC_MaximSetRTCTime.Inc

%endif %- SetRTCTime
%-BW_METHOD_END SetRTCTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetRTCTime
%ifdef GetRTCTime
uint8_t %'ModuleName'%.%GetRTCTime(%'ModuleName'_TTIME *time);
%define! Partime
%define! RetVal
%include Common\RTC_MaximGetRTCTime.Inc

%endif %- GetRTCTime
%-BW_METHOD_END GetRTCTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetRTCDate
%ifdef GetRTCDate
uint8_t %'ModuleName'%.%GetRTCDate(%'ModuleName'_TDATE *date);
%define! Pardate
%define! RetVal
%include Common\RTC_MaximGetRTCDate.Inc

%endif %- GetRTCDate
%-BW_METHOD_END GetRTCDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetRTCDate
%ifdef SetRTCDate
uint8_t %'ModuleName'%.%SetRTCDate(%'ModuleName'_TDATE *date);
%define! Pardate
%define! RetVal
%include Common\RTC_MaximSetRTCDate.Inc

%endif %- SetRTCDate
%-BW_METHOD_END SetRTCDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\RTC_MaximInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\RTC_MaximDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Read
%ifdef Read
uint8_t %'ModuleName'%.%Read(uint8_t addr, uint8_t *buf, uint8_t bufSize);
%define! Paraddr
%define! Parbuf
%define! ParbufSize
%define! RetVal
%include Common\RTC_MaximRead.Inc

%endif %- Read
%-BW_METHOD_END Read
%-************************************************************************************************************
%-BW_METHOD_BEGIN Write
%ifdef Write
uint8_t %'ModuleName'%.%Write(uint8_t addr, uint8_t *buf, uint8_t bufSize);
%define! Paraddr
%define! Parbuf
%define! ParbufSize
%define! RetVal
%include Common\RTC_MaximWrite.Inc

%endif %- Write
%-BW_METHOD_END Write
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io);
%define! Parcmd
%define! Parhandled
%define! Pario
%define! ParIO
%define! RetVal
%include Common\RTC_MaximParseCommand.Inc

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadByte
%ifdef ReadByte
uint8_t %'ModuleName'%.%ReadByte(uint8_t addr, uint8_t *buf);
%define! Paraddr
%define! Parbuf
%define! RetVal
%include Common\RTC_MaximReadByte.Inc

%endif %- ReadByte
%-BW_METHOD_END ReadByte
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteByte
%ifdef WriteByte
uint8_t %'ModuleName'%.%WriteByte(uint8_t addr, uint8_t buf);
%define! Paraddr
%define! Parbuf
%define! RetVal
%include Common\RTC_MaximWriteByte.Inc

%endif %- WriteByte
%-BW_METHOD_END WriteByte
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadBlock
%ifdef ReadBlock
uint8_t %'ModuleName'%.%ReadBlock(uint8_t addr, uint8_t *buf, uint8_t bufSize);
%define! Paraddr
%define! Parbuf
%define! ParbufSize
%define! RetVal
%include Common\RTC_MaximReadBlock.Inc

%endif %- ReadBlock
%-BW_METHOD_END ReadBlock
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteBlock
%ifdef WriteBlock
uint8_t %'ModuleName'%.%WriteBlock(uint8_t addr, uint8_t *buf, uint8_t bufSize);
%define! Paraddr
%define! Parbuf
%define! ParbufSize
%define! RetVal
%include Common\RTC_MaximWriteBlock.Inc

%endif %- WriteBlock
%-BW_METHOD_END WriteBlock
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTime
%ifdef GetTime
uint8_t %'ModuleName'%.%GetTime(TIMEREC *time);
%define! Partime
%define! RetVal
%include Common\RTC_MaximGetTime.Inc

%endif %- GetTime
%-BW_METHOD_END GetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetTime
%ifdef SetTime
uint8_t %'ModuleName'%.%SetTime(uint8_t Hour, uint8_t Min, uint8_t Sec, uint8_t Sec100);
%define! ParHour
%define! ParMin
%define! ParSec
%define! ParSec100
%define! RetVal
%include Common\RTC_MaximSetTime.Inc

%endif %- SetTime
%-BW_METHOD_END SetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDate
%ifdef GetDate
uint8_t %'ModuleName'%.%GetDate(DATEREC *date);
%define! Pardate
%define! RetVal
%include Common\RTC_MaximGetDate.Inc

%endif %- GetDate
%-BW_METHOD_END GetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDate
%ifdef SetDate
uint8_t %'ModuleName'%.%SetDate(uint16_t Year, uint8_t Month, uint8_t Day);
%define! ParYear
%define! ParMonth
%define! ParDay
%define! RetVal
%include Common\RTC_MaximSetDate.Inc

%endif %- SetDate
%-BW_METHOD_END SetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTemperature
%ifdef GetTemperature
uint8_t %'ModuleName'%.%GetTemperature(float *temperature);
%define! Partemperature
%define! RetVal
%include Common\RTC_MaximGetTemperature.Inc

%endif %- GetTemperature
%-BW_METHOD_END GetTemperature
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnTimeSet
%ifdef OnTimeSet
%INTERFACE OnTimeSet
void %OnTimeSet(uint8_t hour, uint8_t minute, uint8_t second, uint8_t hSecond);
%define! Parhour
%define! Parminute
%define! Parsecond
%define! ParhSecond
%include Common\RTC_MaximOnTimeSet.Inc

%endif %- OnTimeSet
%-BW_METHOD_END OnTimeSet
%-BW_METHOD_BEGIN OnDateSet
%ifdef OnDateSet
%INTERFACE OnDateSet
void %OnDateSet(uint8_t day, uint8_t month, uint16_t year);
%define! Parday
%define! Parmonth
%define! Paryear
%include Common\RTC_MaximOnDateSet.Inc

%endif %- OnDateSet
%-BW_METHOD_END OnDateSet
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\RTC_MaximSettings.Inc
%define! Abstract Common\RTC_MaximAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%ifdef ParseCommand
static uint8_t AddHWRTCDate(uint8_t *buf, size_t bufSize) {
  %'ModuleName'_TDATE tdate;
  const char *const weekDays[]={"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

  if (%'ModuleName'%.%GetRTCDate(&tdate)!=ERR_OK) {
    return ERR_FAILED;
  }
  if (tdate.dayOfWeek<=6) {
    %@Utility@'ModuleName'%.strcat(buf, bufSize, (unsigned char*)weekDays[tdate.dayOfWeek]);
  }
  %@Utility@'ModuleName'%.chcat(buf, bufSize, ' ');
  %@Utility@'ModuleName'%.strcatNum16uFormatted(buf, bufSize, tdate.day, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, '.');
  %@Utility@'ModuleName'%.strcatNum16uFormatted(buf, bufSize, tdate.month, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, '.');
  %@Utility@'ModuleName'%.strcatNum16u(buf, bufSize, (uint16_t)tdate.year+2000);
  return ERR_OK;
}

static uint8_t AddHWRTCTime(uint8_t *buf, size_t bufSize) {
  %'ModuleName'_TTIME ttime;

  if (%'ModuleName'%.%GetRTCTime(&ttime)!=ERR_OK) {
    return ERR_FAILED;
  }
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, ttime.hour, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, ':');
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, ttime.min, '0', 2);
  %@Utility@'ModuleName'%.chcat(buf, bufSize, ':');
  %@Utility@'ModuleName'%.strcatNum16sFormatted(buf, bufSize, ttime.sec, '0', 2);
  if (ttime.mode==%'ModuleName'_TTIME_MODE_24H) {
    %@Utility@'ModuleName'%.strcat(buf, bufSize, (unsigned char*)" (24h)");
  } else {
    if (ttime.am_pm==%'ModuleName'_TTIME_AMPM_AM) {
    %@Utility@'ModuleName'%.strcat(buf, bufSize, (unsigned char*)"am");
    } else {
      %@Utility@'ModuleName'%.strcat(buf, bufSize, (unsigned char*)"pm");
    }
  }
  return ERR_OK;
}

static uint8_t DateCmd(const unsigned char *cmd, %@Shell@'ModuleName'%.ConstStdIOType *io) {
  /* precondition: cmd points to "%'ModuleName' date" */
  uint8_t day, month;
  uint16_t year;
  const unsigned char *p;
  uint8_t res = ERR_OK;

  p = cmd + sizeof("%'ModuleName' date")-1;
  if (*p==' ') { /* ok, have an argument */
    if (%@Utility@'ModuleName'%.ScanDate(&p, &day, &month, &year) == ERR_OK) { /* ok, format fine */
      /* update real time clock */
      %if defined(OnDateSet)
      %OnDateSet(day, month, year); /* call user event */
      %endif
      res = %'ModuleName'%.%SetDate(year, month, day);
      if (res!=ERR_OK) {
        %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** Failure setting RTC\r\n", io->stdErr);
        res = ERR_FAILED;
      } else {
        /* note: spending some time here, as the RTC is busy writing data, we will read data back below */
        %@Shell@'ModuleName'%.SendStr((unsigned char*)"Reading date from RTC: ", io->stdOut);
      }
    } else {
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** Error while reading command! ***", io->stdErr);
      %@Shell@'ModuleName'%.SendStr((void *)cmd, io->stdErr);
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdErr);
      res = ERR_FAILED;
    }
  } /* has an argument */
  /* print now current date */
  if (res==ERR_OK) {
    unsigned char buf[sizeof("Wednesday dd:mm:yyyy\\r\\n")];

    buf[0]='\0';
    if (AddHWRTCDate(buf, sizeof(buf))!=ERR_OK) {
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** Failed to get RTC date\r\n", io->stdErr);
      res = ERR_FAILED;
    } else {
      %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)"\r\n");
      %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
    }
  }
  return res;
}

static uint8_t TimeCmd(const unsigned char *cmd, %@Shell@'ModuleName'%.ConstStdIOType *io) {
  uint8_t hour, minute, second, hSecond;
  const unsigned char *p;
  uint8_t res = ERR_OK;

  p = cmd + sizeof("%'ModuleName' time")-1;
  if (*p==' ') { /* has an argument */
    if (%@Utility@'ModuleName'%.ScanTime(&p, &hour, &minute, &second, &hSecond)==ERR_OK) { /* format fine */
      %if defined(OnTimeSet)
      %OnTimeSet(hour, minute, second, hSecond); /* call user event */
      %endif
      /* set RTC time */
      res = %'ModuleName'%.%SetTime(hour, minute, second, hSecond);
      if (res != ERR_OK) {
        %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** Failure setting RTC time\r\n", io->stdErr);
        res = ERR_FAILED;
      } else {
        /* note: spending some time here, as the RTC is busy writing data, we will read data back below */
        %@Shell@'ModuleName'%.SendStr((unsigned char*)"Reading time from RTC: ", io->stdOut);
      }
    } else {
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** Error while reading command: ", io->stdErr);
      %@Shell@'ModuleName'%.SendStr(cmd, io->stdErr);
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdErr);
      res = ERR_FAILED;
    }
  }
  /* print now current time */
  if (res==ERR_OK) {
    unsigned char buf[sizeof("hh:mm:ss.hh (24h)\\r\\n")];

    buf[0] = '\0';
    if (AddHWRTCTime(buf, sizeof(buf))!=ERR_OK) {
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** Failed to get RTC time\r\n", io->stdErr);
      res = ERR_FAILED;
    } else {
      %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)"\r\n");
      %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
    }
  }
  return res;
}

static uint8_t PrintStatus(%@Shell@'ModuleName'%.ConstStdIOType *io) {
  uint8_t buf[32];

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"%'ModuleName'", (const unsigned char*)"Hardware external time and date\r\n", io->stdOut);
  buf[0] = '\0';
  if (AddHWRTCDate(buf, sizeof(buf))!=ERR_OK) {
    %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** Failed to get RTC date!\r\n", io->stdErr);
    return ERR_FAILED;
  }
  %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)"\r\n");
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  date", buf, io->stdOut);
  buf[0] = '\0';
  if (AddHWRTCTime(buf, sizeof(buf))!=ERR_OK) {
    %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** Failed to get RTC time!\r\n", io->stdErr);
    return ERR_FAILED;
  }
  %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)"\r\n");
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  time", buf, io->stdOut);

  %@Utility@'ModuleName'%.Num16uToStr(buf, sizeof(buf), %'ModuleName'%.CONFIG_DEVICE);
  %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)", I2C Addr 0x");
  %@Utility@'ModuleName'%.strcatNum8Hex(buf, sizeof(buf), %'ModuleName'%.CONFIG_DEVICE_ADDRESS);
  %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)"\r\n");
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  device", buf, io->stdOut);

#if %'ModuleName'%.MEM_SIZE==0 /* no RAM on device */
  /* there is no RAM for this device */
#else
  %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"0x");
  %@Utility@'ModuleName'%.strcatNum8Hex(buf, sizeof(buf), %'ModuleName'%.MEM_RAM_START_ADDR);
  %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)"..0x");
  %@Utility@'ModuleName'%.strcatNum8Hex(buf, sizeof(buf), %'ModuleName'%.MEM_RAM_END_ADDR);
  %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)"\r\n");
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  RAM", buf, io->stdOut);
#endif
#if %'ModuleName'%.CONFIG_DEVICE==3231 || %'ModuleName'%.CONFIG_DEVICE==3232
   float temperature;

  if (%'ModuleName'%.GetTemperature(&temperature)==ERR_OK) {
    buf[0] = '\0';
    %@Utility@'ModuleName'%.strcatNumFloat(buf, sizeof(buf), temperature, 2);
    %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)" degree C\r\n");
  } else {
    %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"ERROR\r\n");
  }
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  Temperature", buf, io->stdOut);
#endif
  return ERR_OK;
}

%endif %- ParseCommand
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Read
%ifdef Read
%define! Paraddr
%define! Parbuf
%define! ParbufSize
%define! RetVal
%include Common\RTC_MaximRead.Inc
uint8_t %'ModuleName'%.%Read(uint8_t addr, uint8_t *buf, uint8_t bufSize)
{
  return %@I2C@'ModuleName'%.ReadAddress(%'ModuleName'%.CONFIG_DEVICE_ADDRESS, &addr, 1, buf, bufSize);
}

%endif %- Read
%-BW_METHOD_END Read
%-************************************************************************************************************
%-BW_METHOD_BEGIN Write
%ifdef Write
%define! Paraddr
%define! Parbuf
%define! ParbufSize
%define! RetVal
%include Common\RTC_MaximWrite.Inc
uint8_t %'ModuleName'%.%Write(uint8_t addr, uint8_t *buf, uint8_t bufSize)
{
  return %@I2C@'ModuleName'%.WriteAddress(%'ModuleName'%.CONFIG_DEVICE_ADDRESS, &addr, 1, buf, bufSize);
}

%endif %- Write
%-BW_METHOD_END Write
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadByte
%ifdef ReadByte
%define! Paraddr
%define! Parbuf
%define! RetVal
%include Common\RTC_MaximReadByte.Inc
uint8_t %'ModuleName'%.%ReadByte(uint8_t addr, uint8_t *buf)
{
#if %'ModuleName'%.MEM_SIZE==0 /* no RAM on device */
  (void)addr; /* unused */
  (void)buf;  /* unused */
  return ERR_FAILED; /* there is no RAM for this device */
#else
  if (addr>%'ModuleName'%.MAX_ADDRESS) {
    return ERR_RANGE; /* memory address out of range */
  }
  addr += %'ModuleName'%.MEM_RAM_START_ADDR;
  return %@I2C@'ModuleName'%.ReadAddress(%'ModuleName'%.CONFIG_DEVICE_ADDRESS, &addr, 1, buf, 1);
#endif
}

%endif %- ReadByte
%-BW_METHOD_END ReadByte
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteByte
%ifdef WriteByte
%define! Paraddr
%define! Parbuf
%define! RetVal
%include Common\RTC_MaximWriteByte.Inc
uint8_t %'ModuleName'%.%WriteByte(uint8_t addr, uint8_t buf)
{
#if %'ModuleName'%.MEM_SIZE==0 /* no RAM on device */
  (void)addr; /* unused */
  (void)buf;  /* unused */
  return ERR_FAILED; /* there is no RAM for this device */
#else
  if (addr>%'ModuleName'%.MAX_ADDRESS) {
    return ERR_RANGE; /* memory address out of range */
  }
  addr += %'ModuleName'%.MEM_RAM_START_ADDR;
  return %@I2C@'ModuleName'%.WriteAddress(%'ModuleName'%.CONFIG_DEVICE_ADDRESS, &addr, 1, &buf, 1);
#endif
}

%endif %- WriteByte
%-BW_METHOD_END WriteByte
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadBlock
%ifdef ReadBlock
%define! Paraddr
%define! Parbuf
%define! ParbufSize
%define! RetVal
%include Common\RTC_MaximReadBlock.Inc
uint8_t %'ModuleName'%.%ReadBlock(uint8_t addr, uint8_t *buf, uint8_t bufSize)
{
#if %'ModuleName'%.MEM_SIZE==0 /* no RAM on device */
  (void)addr; /* unused */
  (void)buf;  /* unused */
  (void)bufSize; /* unused */
  return ERR_FAILED; /* there is no RAM for this device */
#else
  if (addr>%'ModuleName'%.MAX_ADDRESS || (addr+bufSize)>%'ModuleName'%.MEM_SIZE) {
    return ERR_RANGE; /* memory address out of range */
  }
  addr += %'ModuleName'%.MEM_RAM_START_ADDR;
  return %@I2C@'ModuleName'%.ReadAddress(%'ModuleName'%.CONFIG_DEVICE_ADDRESS, &addr, 1, buf, bufSize);
#endif
}

%endif %- ReadBlock
%-BW_METHOD_END ReadBlock
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteBlock
%ifdef WriteBlock
%define! Paraddr
%define! Parbuf
%define! ParbufSize
%define! RetVal
%include Common\RTC_MaximWriteBlock.Inc
uint8_t %'ModuleName'%.%WriteBlock(uint8_t addr, uint8_t *buf, uint8_t bufSize)
{
#if %'ModuleName'%.MEM_SIZE==0 /* no RAM on device */
  (void)addr; /* unused */
  (void)buf;  /* unused */
  (void)bufSize; /* unused */
  return ERR_FAILED; /* there is no RAM for this device */
#else
  if (addr>%'ModuleName'%.MAX_ADDRESS || (addr+bufSize)>%'ModuleName'%.MEM_SIZE) {
    return ERR_RANGE; /* memory address out of range */
  }
  addr += %'ModuleName'%.MEM_RAM_START_ADDR;
  return %@I2C@'ModuleName'%.WriteAddress(%'ModuleName'%.CONFIG_DEVICE_ADDRESS, &addr, 1, buf, bufSize);
#endif
}

%endif %- WriteBlock
%-BW_METHOD_END WriteBlock
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetRTCTimeDate
%ifdef GetRTCTimeDate
%define! Partime
%define! Pardate
%define! RetVal
%include Common\RTC_MaximGetRTCTimeDate.Inc
uint8_t %'ModuleName'%.%GetRTCTimeDate(%'ModuleName'_TTIME *time, %'ModuleName'_TDATE *date)
{
  uint8_t buf[%'ModuleName'%.MEM_TIME_DATE_STRUCT_SIZE];

  if (%'ModuleName'%.Read(%'ModuleName'%.MEM_TIME_DATE_STRUCT_ADDR, buf, sizeof(buf))!=ERR_OK) {
    return ERR_FAILED;
  }
  time->sec = (uint8_t)(((buf[0]&0x70)>>4)*10 + (buf[0]&0x0F));
  time->min = (uint8_t)((buf[1]>>4)*10 + (buf[1]&0x0F));
  if (buf[2]&0x40) {
    time->hour =(uint8_t)(buf[2]&0x1F);
    time->mode = %'ModuleName'_TTIME_MODE_12H;
    time->am_pm =(uint8_t)((buf[2]&0x20)>>5);
  } else {
    time->hour = (uint8_t)(buf[2]&0x3F);
    time->mode = %'ModuleName'_TTIME_MODE_24H;
  }
  time->hour = (uint8_t)((time->hour>>4)*10 + (buf[2]&0x0F));
  date->dayOfWeek =(uint8_t)(buf[3]-1);
  date->day = (uint8_t)((buf[4]>>4)*10 + (buf[4]&0x0F));
  date->month = (uint8_t)((buf[5]>>4)*10 + (buf[5]&0x0F));
  date->year = (uint8_t)((buf[6]>>4)*10 + (buf[6]&0x0F));
  return ERR_OK;
}

%endif %- GetRTCTimeDate
%-BW_METHOD_END GetRTCTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetRTCTimeDate
%ifdef SetRTCTimeDate
%define! Partime
%define! Pardate
%define! RetVal
%include Common\RTC_MaximSetRTCTimeDate.Inc
uint8_t %'ModuleName'%.%SetRTCTimeDate(%'ModuleName'_TTIME *time, %'ModuleName'_TDATE *date)
{
  uint8_t buf[%'ModuleName'%.MEM_TIME_DATE_STRUCT_SIZE];

  if (   ((time->mode==%'ModuleName'_TTIME_MODE_12H)&&((time->hour>12)||(time->hour==0)))
      || ((time->mode==%'ModuleName'_TTIME_MODE_24H)&&(time->hour>23))
      || (time->min>59)||(time->sec>59)
      || (date->year>99)||(date->month>12)||(date->month==0)
      || (date->day>31)||(date->day==0)
      || (date->dayOfWeek>6))
  {
    return ERR_RANGE;
  }
  buf[0] = (uint8_t)(((time->sec/10)<<4) | (time->sec%%10));
  buf[1] = (uint8_t)(((time->min/10)<<4) | (time->min%%10));
  buf[2] = (uint8_t)(((time->hour/10)<<4) | (time->hour%%10));
  if (time->mode==%'ModuleName'_TTIME_MODE_12H) {
    buf[2] |= (time->am_pm)?0x60:0x40;
  }
  buf[3] = (uint8_t)(date->dayOfWeek+1);
  buf[4] = (uint8_t)(((date->day/10)<<4) | (date->day%%10));
  buf[5] = (uint8_t)(((date->month/10)<<4) | (date->month%%10));
  buf[6] = (uint8_t)(((date->year/10)<<4) | (date->year%%10));
  if (%'ModuleName'%.Write(%'ModuleName'%.MEM_TIME_DATE_STRUCT_ADDR, buf, sizeof(buf))!=ERR_OK) {
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- SetRTCTimeDate
%-BW_METHOD_END SetRTCTimeDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetRTCTime
%ifdef SetRTCTime
%define! Partime
%define! RetVal
%include Common\RTC_MaximSetRTCTime.Inc
uint8_t %'ModuleName'%.%SetRTCTime(%'ModuleName'_TTIME *time)
{
  uint8_t buf[%'ModuleName'%.MEM_TIME_STRUCT_SIZE];

  if (   ((time->mode==%'ModuleName'_TTIME_MODE_12H)&&((time->hour>12)||(time->hour==0)))
      || ((time->mode==%'ModuleName'_TTIME_MODE_24H)&&(time->hour>23))
      || (time->min>59) || (time->sec>59)
     )
  {
    return ERR_RANGE;
  }
  buf[0] = (uint8_t)(((time->sec/10)<<4) | (time->sec%%10));
  buf[1] = (uint8_t)(((time->min/10)<<4) | (time->min%%10));
  buf[2] = (uint8_t)(((time->hour/10)<<4) | (time->hour%%10));
  if (time->mode==%'ModuleName'_TTIME_MODE_12H) {
    buf[2] |= (time->am_pm)?0x60:0x40;
  }
  if (%'ModuleName'%.Write(%'ModuleName'%.MEM_TIME_STRUCT_ADDR, buf, sizeof(buf))!=ERR_OK) {
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- SetRTCTime
%-BW_METHOD_END SetRTCTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetRTCTime
%ifdef GetRTCTime
%define! Partime
%define! RetVal
%include Common\RTC_MaximGetRTCTime.Inc
uint8_t %'ModuleName'%.%GetRTCTime(%'ModuleName'_TTIME *time)
{
  uint8_t buf[%'ModuleName'%.MEM_TIME_STRUCT_SIZE];

  if (%'ModuleName'%.Read(%'ModuleName'%.MEM_TIME_STRUCT_ADDR, buf, sizeof(buf))!=ERR_OK) {
    return ERR_FAILED;
  }
  time->sec = (uint8_t)(((buf[0]&0x70)>>4)*10 + (buf[0]&0x0F));
  time->min = (uint8_t)((buf[1]>>4)*10 + (buf[1]&0x0F));
  if (buf[2]&0x40) {
    time->hour =(uint8_t)(buf[2]&0x1F);
    time->mode = %'ModuleName'_TTIME_MODE_12H;
    time->am_pm = (uint8_t)((buf[2]&0x20)>>5);
  } else {
    time->hour = (uint8_t)(buf[2]&0x3F);
    time->mode = %'ModuleName'_TTIME_MODE_24H;
  }
  time->hour = (uint8_t)((time->hour>>4)*10 + (buf[2]&0x0F));
  return ERR_OK;
}

%endif %- GetRTCTime
%-BW_METHOD_END GetRTCTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetRTCDate
%ifdef GetRTCDate
%define! Pardate
%define! RetVal
%include Common\RTC_MaximGetRTCDate.Inc
uint8_t %'ModuleName'%.%GetRTCDate(%'ModuleName'_TDATE *date)
{
  uint8_t buf[%'ModuleName'%.MEM_DATE_STRUCT_SIZE];

  if (%'ModuleName'%.Read(%'ModuleName'%.MEM_DATE_STRUCT_ADDR, buf, sizeof(buf))!=ERR_OK) {
    return ERR_FAILED;
  }
  date->dayOfWeek =(uint8_t)(buf[0]-1);
  date->day = (uint8_t)((buf[1]>>4)*10 + (buf[1]&0x0F));
  date->month = (uint8_t)((buf[2]>>4)*10 + (buf[2]&0x0F));
  date->year = (uint8_t)((buf[3]>>4)*10 + (buf[3]&0x0F));
  return ERR_OK;
}

%endif %- GetRTCDate
%-BW_METHOD_END GetRTCDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetRTCDate
%ifdef SetRTCDate
%define! Pardate
%define! RetVal
%include Common\RTC_MaximSetRTCDate.Inc
uint8_t %'ModuleName'%.%SetRTCDate(%'ModuleName'_TDATE *date)
{
  uint8_t buf[%'ModuleName'%.MEM_DATE_STRUCT_SIZE];

  if (   (date->year>99)
      || (date->month>12)||(date->month==0)
      || (date->day>31)||(date->day==0)
      || (date->dayOfWeek>6)
     )
  {
    return ERR_RANGE;
  }
  buf[0] = (uint8_t)(date->dayOfWeek + 1);
  buf[1] = (uint8_t)(((date->day/10)<<4) | (date->day%%10));
  buf[2] = (uint8_t)(((date->month/10)<<4) | (date->month%%10));
  buf[3] = (uint8_t)(((date->year/10)<<4) | (date->year%%10));
  if (%'ModuleName'%.Write(%'ModuleName'%.MEM_DATE_STRUCT_ADDR, buf, sizeof(buf))!=ERR_OK) {
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- SetRTCDate
%-BW_METHOD_END SetRTCDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\RTC_MaximInit.Inc
void %'ModuleName'%.%Init(void)
{
  /* nothing to do */
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\RTC_MaximDeinit.Inc
void %'ModuleName'%.%Deinit(void)
{
  /* nothing to do */
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
%define! Parcmd
%define! Parhandled
%define! Pario
%define! ParIO
%define! RetVal
%include Common\RTC_MaximParseCommand.Inc
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io)
{
  if (%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_HELP)==0 || %@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' help")==0) {
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"%'ModuleName'", (const unsigned char*)"Group of %'ModuleName' commands\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  help|status", (const unsigned char*)"Print help or status information\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  time [hh:mm:ss[,z]]", (const unsigned char*)"Set the current time. Prints the current time if no argument\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  date [dd.mm.yyyy]", (const unsigned char*)"Set the current date. Prints the current date if no argument\r\n", io->stdOut);
    *handled = TRUE;
    return ERR_OK;
  } else if ((%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_STATUS)==0) || (%@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' status")==0)) {
    *handled = TRUE;
    return PrintStatus(io);
  } else if (%@Utility@'ModuleName'%.strncmp((char*)cmd, "%'ModuleName' date", sizeof("%'ModuleName' date")-1)==0) {
    *handled = TRUE;
    return DateCmd(cmd, io);
  } else if (%@Utility@'ModuleName'%.strncmp((char*)cmd, "%'ModuleName' time", sizeof("%'ModuleName' time")-1)==0) {
    *handled = TRUE;
    return TimeCmd(cmd, io);
  }
  return ERR_OK;
}

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTime
%ifdef GetTime
%define! Partime
%define! RetVal
%include Common\RTC_MaximGetTime.Inc
uint8_t %'ModuleName'%.%GetTime(TIMEREC *time)
{
  %'ModuleName'_TTIME ttime;

  if (%'ModuleName'%.%GetRTCTime(&ttime)!=ERR_OK) {
    return ERR_FAILED;
  }
  time->Hour = ttime.hour;
  time->Min = ttime.min;
  time->Sec = ttime.sec;
  time->Sec100 = 0;
  return ERR_OK;
}

%endif %- GetTime
%-BW_METHOD_END GetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetTime
%ifdef SetTime
%define! ParHour
%define! ParMin
%define! ParSec
%define! ParSec100
%define! RetVal
%include Common\RTC_MaximSetTime.Inc
uint8_t %'ModuleName'%.%SetTime(uint8_t Hour, uint8_t Min, uint8_t Sec, uint8_t Sec100)
{
  %'ModuleName'_TTIME ttime;

  ttime.hour = Hour;
  ttime.min = Min;
  ttime.sec = Sec;
  (void)Sec100; /* ignored, as cannot be stored on device */
  ttime.mode = %'ModuleName'%.TTIME_MODE_24H;
  ttime.am_pm = %'ModuleName'%.TTIME_AMPM_AM;
  return %'ModuleName'%.%SetRTCTime(&ttime);
}

%endif %- SetTime
%-BW_METHOD_END SetTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDate
%ifdef GetDate
%define! Pardate
%define! RetVal
%include Common\RTC_MaximGetDate.Inc
uint8_t %'ModuleName'%.%GetDate(DATEREC *date)
{
  %'ModuleName'_TDATE tdate;

  if (%'ModuleName'%.%GetRTCDate(&tdate)!=ERR_OK) {
    return ERR_FAILED;
  }
  date->Year = (uint16_t)(tdate.year+2000);
  date->Month = tdate.month;
  date->Day = tdate.day;
  return ERR_OK;
}

%endif %- GetDate
%-BW_METHOD_END GetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDate
%ifdef SetDate
%define! ParYear
%define! ParMonth
%define! ParDay
%define! RetVal
%include Common\RTC_MaximSetDate.Inc
uint8_t %'ModuleName'%.%SetDate(uint16_t Year, uint8_t Month, uint8_t Day)
{
  %'ModuleName'_TDATE tdate;

  tdate.year = (uint8_t)(Year-2000);
  tdate.month = Month;
  tdate.day = Day;
  tdate.dayOfWeek = %@Utility@'ModuleName'%.WeekDay(Year, Month, Day);
  return %'ModuleName'%.%SetRTCDate(&tdate);
}

%endif %- SetDate
%-BW_METHOD_END SetDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTemperature
%ifdef GetTemperature
%define! Partemperature
%define! RetVal
%include Common\RTC_MaximGetTemperature.Inc
uint8_t %'ModuleName'%.%GetTemperature(float *temperature)
{
#if %'ModuleName'%.CONFIG_DEVICE==3231 || %'ModuleName'%.CONFIG_DEVICE==3232
  int8_t high;
  uint8_t low, res;

  res = %'ModuleName'%.%Read(%'ModuleName'%.MEM_MSB_TEMP_ADDR, (uint8_t*)&high, 1);
  if (res!=ERR_OK) {
    return res;
  }
  res = %'ModuleName'%.%Read(%'ModuleName'%.MEM_LSB_TEMP_ADDR, &low, 1);
  if (res!=ERR_OK) {
    return res;
  }
  /* high values is two's complement of integer part of temperature, the upper two bits of LSB are the number of 0.25 degrees.
     For example 0b00011000 0b01xxxxxx gives 24.25 degree. */
  *temperature = (float)high + (((low&0xC0)>>6)*0.25f);
  return ERR_OK;
#else /* not supported */
  *temperature = 0.0f;
  return ERR_FAILED;
#endif
}

%endif %- GetTemperature
%-BW_METHOD_END GetTemperature
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnTimeSet
%ifdef OnTimeSet
%IMPLEMENTATION OnTimeSet
%define! Parhour
%define! Parminute
%define! Parsecond
%define! ParhSecond
%include Common\RTC_MaximOnTimeSet.Inc
void %OnTimeSet(uint8_t hour, uint8_t minute, uint8_t second, uint8_t hSecond)
{
  /* Write your code here ... */
}

%endif %- OnTimeSet
%-BW_METHOD_END OnTimeSet
%-BW_METHOD_BEGIN OnDateSet
%ifdef OnDateSet
%IMPLEMENTATION OnDateSet
%define! Parday
%define! Parmonth
%define! Paryear
%include Common\RTC_MaximOnDateSet.Inc
void %OnDateSet(uint8_t day, uint8_t month, uint16_t year)
{
  /* Write your code here ... */
}

%endif %- OnDateSet
%-BW_METHOD_END OnDateSet
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%-----------------------------------------------------------------------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for external I2C RTC devices
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is used to configure settings the External I2C RTC module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

#ifndef %'ModuleName'%.CONFIG_DEVICE
%if Device="DS3232"
  #define %'ModuleName'%.CONFIG_DEVICE 3232 /* DS1307, DS3231, DS3232 or DS1342 */
%elif Device="DS3231"
  #define %'ModuleName'%.CONFIG_DEVICE 3231 /* DS1307, DS3231, DS3232 or DS1342 */
%elif Device="DS1307"
  #define %'ModuleName'%.CONFIG_DEVICE 1307 /* DS1307, DS3231, DS3232 or DS1342 */
%elif Device="DS1342"
  #define %'ModuleName'%.CONFIG_DEVICE 1342 /* DS1307, DS3231, DS3232 or DS1342 */
%else
  #error "Unknown device %Device ?"
%endif
#endif

/* I2C address of the device on the bus: */
#ifndef %'ModuleName'%.CONFIG_DEVICE_ADDRESS
  #if %'ModuleName'%.CONFIG_DEVICE==3231
    #define %'ModuleName'%.CONFIG_DEVICE_ADDRESS 0x68  /* I2C DS3232 device address */
  #elif %'ModuleName'%.CONFIG_DEVICE==3232
    #define %'ModuleName'%.CONFIG_DEVICE_ADDRESS 0x68  /* I2C DS3232 device address */
  #elif %'ModuleName'%.CONFIG_DEVICE==1307
    #define %'ModuleName'%.CONFIG_DEVICE_ADDRESS 0x68  /* I2C DS1307 device address */
  #elif %'ModuleName'%.CONFIG_DEVICE==1342
    #define %'ModuleName'%.CONFIG_DEVICE_ADDRESS 0x68  /* I2C DS1342 device address */
  #else
    #error "Unknown device"
  #endif
#endif

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
