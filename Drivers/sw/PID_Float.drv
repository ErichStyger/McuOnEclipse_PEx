%-Driver pre-generated by the Component Development Environment
%-      Copyright: 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Development Environment will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor
%define DriverVersion 01.00
%define DriverDate    04/05/2013
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%define CDEversion Community
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
  %-
%-
%INTERFACE
%define! Settings Common\PID_FloatSettings.Inc
%define! Abstract Common\PID_FloatAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN Set_T
%ifdef Set_T
void %'ModuleName'%.%Set_T(float t);
%define! Part
%include Common\PID_FloatSet_T.inc
%endif  %-Set_T
%-BW_METHOD_END Set_T

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Set_Td
%ifdef Set_Td
void %'ModuleName'%.%Set_Td(float t);
%define! Part
%include Common\PID_FloatSet_Td.inc
%endif  %-Set_Td
%-BW_METHOD_END Set_Td

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Set_Ti
%ifdef Set_Ti
void %'ModuleName'%.%Set_Ti(float t);
%define! Part
%include Common\PID_FloatSet_Ti.inc
%endif  %-Set_Ti
%-BW_METHOD_END Set_Ti

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Set_K
%ifdef Set_K
void %'ModuleName'%.%Set_K(float k);
%define! Park
%include Common\PID_FloatSet_K.inc
%endif  %-Set_K
%-BW_METHOD_END Set_K

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Reset
%ifdef Reset
void %'ModuleName'%.%Reset(void);
%include Common\PID_FloatReset.inc
%endif  %-Reset
%-BW_METHOD_END Reset

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Control
%ifdef Control
void %'ModuleName'%.%Control(float error, %U_TYPE *u);
%define! Parerror
%define! Paru
%include Common\PID_FloatControl.inc
%endif  %-Control
%-BW_METHOD_END Control

%-************************************************************************************************************
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\PID_FloatSettings.Inc
%define! Abstract Common\PID_FloatAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#define K_VAL		%Kp /* Constante proporcional */
#define TI_VAL		%TI /* Tiempo integrativo */
#define TD_VAL		%TD /* Tiempo derivativo */
#define T_VAL		%TAO /* Período de control */
#define U_MIN		%U_MIN /* Valor de salida mínimo */
#define U_MAX		%U_MAX /* Valor de salida máximo */
#define U_CHG_MAX	%U_CHG_MAX /* Cambio máximo en cada ciclo de control */
%-
%ifdef Set_K
%:kt = %'ModuleName'%.K
%else
%:kt = K_VAL
%endif
%-
%ifdef Set_Td
%:tdt = %'ModuleName'%.Td
%else
%:tdt = TD_VAL
%endif
%-
%ifdef Set_Ti
%:tit = %'ModuleName'%.Ti
%else
%:tit = TI_VAL
%endif
%-
%ifdef Set_T
%:tt = %'ModuleName'%.T
%else
%:tt = T_VAL
%endif
/* Coeficientes del control PID */
#define K1		(%kt*(1+(%tdt/%tt)))
#define	K2		(-%kt*(1+((2*%tdt)/%tt)-(%tt/%tit)))
#define	K3		(%kt*(%tdt/%tt))
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%ifdef Set_K
/* Variable para la constante proporcional */
static float %'ModuleName'%.K = K_VAL;
%endif
%ifdef Set_Ti
/* Variable para el tiempo integrativo */
static float %'ModuleName'%.Ti = TI_VAL;
%endif
%ifdef Set_Td
/* Variable para el tiempo derivativo */
static float %'ModuleName'%.Td = TD_VAL;
%endif
%ifdef Set_T
/* Variable para el período de control */
static float %'ModuleName'%.T = T_VAL;
%endif
/* Variable que almacena los errores */
float %'ModuleName'%.error[2] = {0.0, 0.0};
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN Set_T
%ifdef Set_T
%define! Part
%include Common\PID_FloatSet_T.inc
void %'ModuleName'%.%Set_T(float t)
{
  if(t < 0) {
    return;
  }
  %'ModuleName'%.T = t;
}
%endif %-Set_T
%-BW_METHOD_END Set_T

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Set_Td
%ifdef Set_Td
%define! Part
%include Common\PID_FloatSet_Td.inc
void %'ModuleName'%.%Set_Td(float t)
{
  if(t < 0) {
    return;
  }
  %'ModuleName'%.Td = t;
}
%endif %-Set_Td
%-BW_METHOD_END Set_Td

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Set_Ti
%ifdef Set_Ti
%define! Part
%include Common\PID_FloatSet_Ti.inc
void %'ModuleName'%.%Set_Ti(float t)
{
  if (t <= 0) {
    return;
  }
  %'ModuleName'%.Ti = t;
}
%endif %-Set_Ti
%-BW_METHOD_END Set_Ti

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Set_K
%ifdef Set_K
%define! Park
%include Common\PID_FloatSet_K.inc
void %'ModuleName'%.%Set_K(float k)
{
  if(k < 0) {
    return;
  }
  %'ModuleName'%.K = k;
}
%endif %-Set_K
%-BW_METHOD_END Set_K

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Reset
%ifdef Reset
%include Common\PID_FloatReset.inc
void %'ModuleName'%.%Reset(void)
{
  %'ModuleName'%.error[0] = 0.0;
  %'ModuleName'%.error[1] = 0.0;
}
%endif %-Reset
%-BW_METHOD_END Reset

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Control
%ifdef Control
%define! Parerror
%define! Paru
%include Common\PID_FloatControl.inc
#ifdef __HIWARE__
  #pragma MESSAGE DISABLE C5900
  #pragma MESSAGE DISABLE C5917
#endif

void %'ModuleName'%.%Control(float error, %U_TYPE *u)
{
  float ut = 0.0;

  ut = (float) *u;
  ut += K1 * error;
  ut += K2 * %'ModuleName'%.error[0];
  ut += K3 * %'ModuleName'%.error[1];

  %'ModuleName'%.error[1] = %'ModuleName'%.error[0];
  %'ModuleName'%.error[0] = error;

%if U_CHG_MAX >. '0'
  if (ut > ((float) *u + U_CHG_MAX)) {
    ut += U_CHG_MAX;
  } else if (ut < ((float) *u - U_CHG_MAX)) {
    ut -= U_CHG_MAX;
  }
%endif
  %-Deshabilitamos los mensajes de error por el cast
  if (ut > U_MAX) {
    *u = (%U_TYPE) U_MAX;
  } else if (ut < U_MIN) {
    *u = (%U_TYPE) U_MIN;
  } else {
    *u = (%U_TYPE) ut;
  }
}
#ifdef __HIWARE__
  #pragma MESSAGE DISABLE C5919
#endif
%endif %-Control
%-BW_METHOD_END Control

%-************************************************************************************************************
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for a PID component with floats.
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is used to configure settings of the PID_Float module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

/* no configuration supported yet */
%- #define %'ModuleName'%.CONFIG_SETTING

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------
