%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    26.06.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\LEDSettings.Inc
%define! Abstract Common\LEDAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* LED configuration */
%if defined(LEDPin)
#include "%@LEDPin@ModuleName.h" /* interface to pin */
%endif
%if defined(PWMpin)
#include "%@PWMpin@ModuleName.h" /* interface to PWM pin */
%endif
%if defined(Shell)
#include "%@Shell@ModuleName.h" /* interface to Shell */
%endif
%if defined(Utility)
#include "%@Utility@ModuleName.h" /* interface to Utility */
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%include sw\CommonSupport.prg
%-
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%if defined(LEDPin)
#define %'ModuleName'%.ClrVal()    %@LEDPin@'ModuleName'%.ClrVal() /* put the pin on low level */
#define %'ModuleName'%.SetVal()    %@LEDPin@'ModuleName'%.SetVal() /* put the pin on high level */
#define %'ModuleName'%.SetInput()  %@LEDPin@'ModuleName'%.SetInput() /* use the pin as input pin */
#define %'ModuleName'%.SetOutput() %@LEDPin@'ModuleName'%.SetOutput() /* use the pin as output pin */
%elif defined(PWMpin)
#define %'ModuleName'%.ClrVal()    %@PWMpin@'ModuleName'%.SetRatio16(0x0) /* put the pin on low level */
#define %'ModuleName'%.SetVal()    %@PWMpin@'ModuleName'%.SetRatio16(0xffff) /* put the pin on high level */
#define %'ModuleName'%.SetInput()  /* not possible! */ /* use the pin as input pin */
#define %'ModuleName'%.SetOutput() /* not possible! */ /* use the pin as output pin */
extern uint16_t %'ModuleName'%.currPWM; /* current 16bit PWM value */
%endif

%ifdef ParseCommand
#define %'ModuleName'%.PARSE_COMMAND_ENABLED  1 /* set to 1 if method ParseCommand() is present, 0 otherwise */
%else
#define %'ModuleName'%.PARSE_COMMAND_ENABLED  0 /* set to 1 if method ParseCommand() is present, 0 otherwise */
%endif %- ParseCommand
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-BW_METHOD_BEGIN On
%ifdef On
%if defined(LEDPin)
#if %'ModuleName'%.CONFIG_IS_LOW_ACTIVE
  #define %'ModuleName'%.%On() %@LEDPin@'ModuleName'%.ClrVal()
#else
  #define %'ModuleName'%.%On() %@LEDPin@'ModuleName'%.SetVal()
#endif
%elif defined(PWMpin)
#define %'ModuleName'%.%On() %'ModuleName'%.%SetRatio16(0xffff)
%endif
%include Common\LEDOn.Inc

%endif %- On
%-BW_METHOD_END On
%-BW_METHOD_BEGIN Off
%ifdef Off
%if defined(LEDPin)
#if %'ModuleName'%.CONFIG_IS_LOW_ACTIVE
  #define %'ModuleName'%.%Off() %@LEDPin@'ModuleName'%.SetVal()
#else
  #define %'ModuleName'%.%Off() %@LEDPin@'ModuleName'%.ClrVal()
#endif
%elif defined(PWMpin)
#define %'ModuleName'%.%Off() %'ModuleName'%.%SetRatio16(0x0)
%endif
%include Common\LEDOff.Inc

%endif %- Off
%-BW_METHOD_END Off
%-BW_METHOD_BEGIN Neg
%ifdef Neg
%if defined(LEDPin)
#define %'ModuleName'%.%Neg() %@LEDPin@'ModuleName'%.NegVal()
%elif defined(PWMpin)
#define %'ModuleName'%.%Neg() %'ModuleName'%.%SetRatio16(0xffff-%'ModuleName'%.currPWM)
%endif
%include Common\LEDNeg.Inc

%endif %- Neg
%-BW_METHOD_END Neg
%-BW_METHOD_BEGIN Get
%ifdef Get
%if defined(LEDPin)
#if %'ModuleName'%.CONFIG_IS_LOW_ACTIVE
  #define %'ModuleName'%.%Get() (!(%@LEDPin@'ModuleName'%.GetVal()))
#else
  #define %'ModuleName'%.%Get() %@LEDPin@'ModuleName'%.GetVal()
#endif
%elif defined(PWMpin)
#define %'ModuleName'%.%Get() (%'ModuleName'%.currPWM!=0)
%endif
%define! RetVal
%include Common\LEDGet.Inc

%endif %- Get
%-BW_METHOD_END Get
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\LEDInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Put
%ifdef Put
#define %'ModuleName'%.%Put(val)  ((val) ? %'ModuleName'%.%On() : %'ModuleName'%.%Off())
%define! Parval
%include Common\LEDPut.Inc

%endif %- Put
%-BW_METHOD_END Put
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\LEDDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io);
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\LEDParseCommand.Inc

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetRatio16
%ifdef SetRatio16
void %'ModuleName'%.%SetRatio16(uint16_t ratio);
%define! Parratio
%include Common\LEDSetRatio16.Inc

%endif %- SetRatio16
%-BW_METHOD_END SetRatio16
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\LEDSettings.Inc
%define! Abstract Common\LEDAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%if defined(PWMpin)
uint16_t %'ModuleName'%.currPWM; /* current 16bit PWM value */

%endif
%if defined(Shell)
static uint8_t PrintStatus(const %@Shell@'ModuleName'%.StdIOType *io) {
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"%'ModuleName'", (unsigned char*)"\r\n", io->stdOut);
  if (%'ModuleName'%.%Get()!=0) {
    %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  on", (unsigned char*)"yes\r\n", io->stdOut);
  } else {
    %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  on", (unsigned char*)"no\r\n", io->stdOut);
  }
%if defined(PWMpin)
  {
    uint8_t buf[6];

    %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  pwm", (unsigned char*)"0x", io->stdOut);
    buf[0] = '\0';
    %@Utility@'ModuleName'%.strcatNum16Hex(buf, sizeof(buf), %'ModuleName'%.currPWM);
    %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)"\r\n");
    %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  }
%endif
  return ERR_OK;
}

static uint8_t PrintHelp(const %@Shell@'ModuleName'%.StdIOType *io) {
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"%'ModuleName'", (unsigned char*)"Group of %'ModuleName' commands\r\n", io->stdOut);
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  help|status", (unsigned char*)"Print help or status information\r\n", io->stdOut);
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  on|off|neg", (unsigned char*)"Turns it on, off or toggle it\r\n", io->stdOut);
%if defined(PWMpin)
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  duty <value>", (unsigned char*)"Set duty value (unsigned, hex or %% value)\r\n", io->stdOut);
%endif
  return ERR_OK;
}

%endif
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\LEDParseCommand.Inc
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io)
{
  if (%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_HELP)==0 || %@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' help")==0) {
    *handled = TRUE;
    return PrintHelp(io);
  } else if ((%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_STATUS)==0) || (%@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' status")==0)) {
    *handled = TRUE;
    return PrintStatus(io);
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' on")==0) {
    *handled = TRUE;
    %'ModuleName'%.%On();
    return ERR_OK;
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' off")==0) {
    *handled = TRUE;
    %'ModuleName'%.%Off();
    return ERR_OK;
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' neg")==0) {
    *handled = TRUE;
    %'ModuleName'%.%Neg();
    return ERR_OK;
%if defined(PWMpin)
  } else if (%@Utility@'ModuleName'%.strncmp((char*)cmd, "%'ModuleName' duty ", sizeof("%'ModuleName' duty ")-1)==0) {
    uint16_t value;
    uint8_t res;
    const unsigned char *p;

    p = cmd+sizeof("%'ModuleName' duty ")-1;
    if (p[0]=='0' && p[1]=='x') { /* hexadecimal */
      res = %@Utility@'ModuleName'%.ScanHex16uNumber(&p, &value);
    } else { /* decimal */
      res = %@Utility@'ModuleName'%.ScanDecimal16uNumber(&p, &value);
    }
    if (*p=='%%' && value<=100) { /* percent value */
      value = (uint16_t)((0xFFFFUL*value)/100);
    }
    if (res!=ERR_OK) {
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"*** invalid number format! Try e.g. 10, 0x10 or 10%%\r\n", io->stdErr);
      return ERR_FAILED;
    }
    *handled = TRUE;
    %'ModuleName'%.%SetRatio16(value);
    return ERR_OK;
%endif
  }
  return ERR_OK;
}

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN On
%ifdef On
%include Common\LEDOn.Inc
/*
void %'ModuleName'%.%On(void)
{
  *** This method is implemented as macro in the header file
}
*/

%endif %- On
%-BW_METHOD_END On
%-BW_METHOD_BEGIN Off
%ifdef Off
%include Common\LEDOff.Inc
/*
void %'ModuleName'%.%Off(void)
{
  *** This method is implemented as macro in the header file
}
*/

%endif %- Off
%-BW_METHOD_END Off
%-BW_METHOD_BEGIN Neg
%ifdef Neg
%include Common\LEDNeg.Inc
/*
void %'ModuleName'%.%Neg(void)
{
  *** This method is implemented as macro in the header file
}
*/

%endif %- Neg
%-BW_METHOD_END Neg
%-BW_METHOD_BEGIN Get
%ifdef Get
%define! RetVal
%include Common\LEDGet.Inc
/*
uint8_t %'ModuleName'%.%Get(void)
{
  *** This method is implemented as macro in the header file
}
*/

%endif %- Get
%-BW_METHOD_END Get
%-************************************************************************************************************
%-BW_METHOD_BEGIN Put
%ifdef Put
%define! Parval
%include Common\LEDPut.Inc
/*
void %'ModuleName'%.%Put(uint8_t val)
{
  *** This method is implemented as macro in the header file
}
*/

%endif %- Put
%-BW_METHOD_END Put
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\LEDInit.Inc
void %'ModuleName'%.%Init(void)
{
#if %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED != %@sdk@'ModuleName'%.CONFIG_SDK_PROCESSOR_EXPERT
%if defined(LEDPin)
  %@LEDPin@'ModuleName'%.Init();
%else
  #warning "PWM mode not yet implemented with the SDK!"
%endif
#endif
%if LEDonWithInitialization = 'yes'
  %'ModuleName'%.%On();
%else
  %'ModuleName'%.%Off();
%endif
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\LEDDeinit.Inc
void %'ModuleName'%.%Deinit(void)
{
#if %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED != %@sdk@'ModuleName'%.CONFIG_SDK_PROCESSOR_EXPERT
%if defined(LEDPin)
  %@LEDPin@'ModuleName'%.Deinit();
%else
  #warning "PWM mode not yet implemented with the SDK!"
%endif
#endif
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetRatio16
%ifdef SetRatio16
%define! Parratio
%include Common\LEDSetRatio16.Inc
void %'ModuleName'%.%SetRatio16(uint16_t ratio)
{
%if defined(LEDPin)
  /* on/off LED: binary on or off */
  if (ratio<(0xffff/2)) {
    %'ModuleName'%.%Off();
  } else {
    %'ModuleName'%.%On();
  }
%elif defined(PWMpin)
  %'ModuleName'%.currPWM = ratio;
 %if PWMinverted='no' & AnodeOnPortSide = 'no'
  (void)%@PWMpin@'ModuleName'%.SetRatio16(0xffff-ratio);
 %elif PWMinverted='yes' & AnodeOnPortSide = 'yes'
  (void)%@PWMpin@'ModuleName'%.SetRatio16(0xffff-ratio);
 %else
  (void)%@PWMpin@'ModuleName'%.SetRatio16(ratio);
 %endif
%endif
}

%endif %- SetRatio16
%-BW_METHOD_END SetRatio16
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%CODE_BEGIN
%if (CPUfamily = "S32K")
#ifdef CPU_INIT_MCUONECLIPSE_DRIVERS
%endif
  %'ModuleName'%.%Init(); /* ### %DeviceType "%DeviceName" init code ... */
%if (CPUfamily = "S32K")
#endif
%endif
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for LED
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is used to configure settings of the LED module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

#ifndef %'ModuleName'%.CONFIG_USE_GPIO_PIN
%if defined(LEDPin)
  #define %'ModuleName'%.CONFIG_USE_GPIO_PIN   (1)
%elif defined(PWMpin)
  #define %'ModuleName'%.CONFIG_USE_GPIO_PIN   (0)
%endif
    /*!< 1: use GPIO pin; 0: use PWM pin */
#endif

#ifndef %'ModuleName'%.CONFIG_IS_LOW_ACTIVE
%if defined(AnodeOnPortSide) & %AnodeOnPortSide='yes'
  #define %'ModuleName'%.CONFIG_IS_LOW_ACTIVE   (0)
%else
  #define %'ModuleName'%.CONFIG_IS_LOW_ACTIVE   (1)
%endif
    /*!< 1: LED is low active (cathode on port side), 0: LED is HIGH active (anode on port side) */
#endif

#endif /* __%'ModuleName'_CONFIG_H */
