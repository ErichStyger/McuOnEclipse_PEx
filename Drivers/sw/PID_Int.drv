%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    16.10.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\PID_IntSettings.Inc
%define! Abstract Common\PID_IntAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Control
%ifdef Control
void %'ModuleName'%.%Control(void);
%include Common\PID_IntControl.Inc

%endif %- Control
%-BW_METHOD_END Control
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetPoint
%ifdef SetPoint
void %'ModuleName'%.%SetPoint(int32_t value);
%define! Parvalue
%include Common\PID_IntSetPoint.Inc

%endif %- SetPoint
%-BW_METHOD_END SetPoint
%-************************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
void %'ModuleName'%.%Enable(void);
%include Common\PID_IntEnable.Inc

%endif %- Enable
%-BW_METHOD_END Enable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Disable
%ifdef Disable
void %'ModuleName'%.%Disable(void);
%include Common\PID_IntDisable.Inc

%endif %- Disable
%-BW_METHOD_END Disable
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetPoint
%ifdef GetPoint
int32_t %'ModuleName'%.%GetPoint(void);
%define! RetVal
%include Common\PID_IntGetPoint.Inc

%endif %- GetPoint
%-BW_METHOD_END GetPoint
%-************************************************************************************************************
%-BW_METHOD_BEGIN PID
%ifdef PID
int32_t %'ModuleName'%.%PID(int32_t setPoint, int32_t currValue);
%define! ParcurrValue
%define! ParsetPoint
%define! RetVal
%include Common\PID_IntPID.Inc

%endif %- PID
%-BW_METHOD_END PID
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\PID_IntSettings.Inc
%define! Abstract Common\PID_IntAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
static int %'ModuleName'%.setPoint; /* the value to be reached by the PID algorithm */
%if defined(Enable) | defined(Disable)
static bool %'ModuleName'%.enabled;  /* if the PID controller is enabled or not */
%endif
%if %VariableForSetPoint = 'yes'
static int %'ModuleName'%.ControlSetPoint; /* set point variable of the controller, useful for debugging/visualization */
%endif
%if %ProportionalGroup = 'yes'
static
  %if %KpConstant = 'yes'
    %+                                                           %>1 const
  %endif
  %+                                                             %>1 int32_t %'ModuleName'%.KpMul = %KpMul, %'ModuleName'%.KpDiv = %KpDiv; /* the Kp adjustment values */
%endif %- ProportionalGroup
%if %IntegralGroup = 'yes'
static
  %if %KiConstant = 'yes'
    %+                                                           %>1 const
  %endif
    %+                                                           %>1 int32_t %'ModuleName'%.KiMul = %KiMul, %'ModuleName'%.KiDiv = %KiDiv; /* the Ki adjustment values */
%endif %- Integralgroup
%if %DifferentialGroup = 'yes'
static
  %if %KdConstant = 'yes'
    %+                                                           %>1 const
  %endif
  %+                                                             %>1 int32_t %'ModuleName'%.KdMul = %KdMul, %'ModuleName'%.KdDiv = %KdDiv; /* the Kd adjustment values */
%endif %- DifferentialGroup
%if defined(AntiWindUpConstant) & %AntiWindUpConstant = 'no'
static int32_t %'ModuleName'%.AntiWindUpValue = %AntiWindUpValue; /* anti wind-up limit for the I portion of the controller */
%endif

%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN PID
%ifdef PID
%define! Parsetpoint
%define! ParcurrValue
%define! ParsetPoint
%define! RetVal
%include Common\PID_IntPID.Inc
#ifdef __HIWARE__
  #pragma MESSAGE DISABLE C5904 /* Division by one */
  #pragma MESSAGE DISABLE C5905 /* Multiplication with one */
#endif
int32_t %'ModuleName'%.%PID(int32_t setPoint, int32_t currValue)
{
  /* Performs a PID calculation */
%if %DifferentialGroup = 'yes'
  int32_t regDifferential; /* temporary variable for the D part */
%endif
  static int32_t oldDiff = 0; /*!< Remember error for next round (for D part) */
  static int32_t regIntegral = 0;  /*!< Remember integral part for next iteration */
  int32_t diff; /* actual error */
  int32_t pid;  /* pid calculation value */

  pid = 0; /* initialize */
  diff = setPoint-currValue;
%if %ProportionalGroup = 'yes'
  /* P-Part */
  pid += (%'ModuleName'%.KpMul*diff)/%'ModuleName'%.KpDiv;
%endif %- %ProportionalGroup = 'yes'
%if %IntegralGroup = 'yes'
  /* I-Part */
  regIntegral += diff; /* integrate error */
 %if %AntiWindUpEnabled = 'yes'
  %if %AntiWindUpConstant = 'yes'
  if (regIntegral > %AntiWindUpValue) { /* anti wind-up */
    regIntegral = %AntiWindUpValue;
  } else if (regIntegral < -%AntiWindUpValue) {
    regIntegral = -%AntiWindUpValue;
  }
  %else
  if (regIntegral > %'ModuleName'%.AntiWindUpValue) {
    regIntegral = %'ModuleName'%.AntiWindUpValue;
  } else if (regIntegral < -%'ModuleName'%.AntiWindUpValue) {
    regIntegral = -%'ModuleName'%.AntiWindUpValue;
  }
  %endif
 %endif %-%AntiWindUpEnabled = 'yes'
  pid += (%'ModuleName'%.KiMul*regIntegral)/%'ModuleName'%.KiDiv;
%endif %-IntegralGroup = 'yes'
%if %DifferentialGroup = 'yes'
  /* D-Part */
  regDifferential = diff-oldDiff;
  oldDiff = diff; /* remember for next iteration */
  pid += (%'ModuleName'%.KdMul*regDifferential)/%'ModuleName'%.KdDiv; /* add D part */
%endif %- %DifferentialGroup = 'yes'
  return pid;
}

%endif %- PID
%-BW_METHOD_END PID
%-************************************************************************************************************
%-BW_METHOD_BEGIN Control
%ifdef Control
%include Common\PID_IntControl.Inc
void %'ModuleName'%.%Control(void)
{
%if defined(Actor) & defined(Sensor)
  int32_t pid;

%if defined(Enable) | defined(Disable)
  if (!%'ModuleName'%.enabled) { /* PID enabled? */
    return; /* do nothing */
  }
%endif
  if (%'ModuleName'%.setPoint == 0) {
    %@Actor@'ModuleName'%.SetVal(0);
%if %VariableForSetPoint = 'yes'
    %'ModuleName'%.ControlSetPoint = 0;
%endif
    return;
  }
  /* calculate pid */
  pid = %'ModuleName'%.%PID(%'ModuleName'%.setPoint, %@Sensor@'ModuleName'%.GetVal());
%if %VariableForSetPoint = 'yes'
  %'ModuleName'%.ControlSetPoint = pid; /* store value for debugging */
%endif
  %@Actor@'ModuleName'%.SetVal(pid);
%else
  return; /* hardware for sensor and actuator not enabled: enable them in the properties or use the PID() function instead */
%endif
}

%endif %- Control
%-BW_METHOD_END Control
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetPoint
%ifdef SetPoint
%define! Parvalue
%include Common\PID_IntSetPoint.Inc
void %'ModuleName'%.%SetPoint(int32_t value)
{
  %'ModuleName'%.setPoint = value;
}

%endif %- SetPoint
%-BW_METHOD_END SetPoint
%-************************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
%include Common\PID_IntEnable.Inc
void %'ModuleName'%.%Enable(void)
{
  %'ModuleName'%.enabled = TRUE;
}

%endif %- Enable
%-BW_METHOD_END Enable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Disable
%ifdef Disable
%include Common\PID_IntDisable.Inc
void %'ModuleName'%.%Disable(void)
{
  %'ModuleName'%.enabled = FALSE;
}

%endif %- Disable
%-BW_METHOD_END Disable
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetPoint
%ifdef GetPoint
%define! RetVal
%include Common\PID_IntGetPoint.Inc
int32_t %'ModuleName'%.%GetPoint(void)
{
  return %'ModuleName'%.setPoint;
}

%endif %- GetPoint
%-BW_METHOD_END GetPoint
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  /* Write code here ... */
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for PID_Int component.
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is used to configure settings of the PID for integer module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

/* no configuration supported yet */
%- #define %'ModuleName'%.CONFIG_SETTING

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------
