%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    13.12.2011
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_usb_int_dis Disables USB interrupts (if supported)
%define! Description_usb_int_en Enables USB interrupts (if supported).
%ifdef MSDHost
  %ifdef @MSDHost@OnError
    %define! Description_%@MSDHost@OnError Hook called in case of an error The event services the event of the inherited component and eventually invokes other events.
  %endif %- @MSDHost@OnError
%endif %- MSDHost
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%- get and define device name from inherited sub component
%if defined(CDCDevice)
  %define CPUDevice %@CDCDevice@CPUDevice
%elif defined(CDCHost)
  %define CPUDevice %@CDCHost@CPUDevice
%elif defined(HIDKDevice)
  %define CPUDevice %@HIDKDevice@CPUDevice
%elif defined(HIDJDevice)
  %define CPUDevice %@HIDJDevice@CPUDevice
%elif defined(HIDMDevice)
  %define CPUDevice %@HIDMDevice@CPUDevice
%elif defined(MSDHost)
  %define CPUDevice %@MSDHost@CPUDevice
%elif defined(MSDDevice)
  %define CPUDevice %@MSDDevice@CPUDevice
%else
  %define CPUDevice "dummy"
%endif
%-
%- copy files
%include FSL_USB_Stack_Files.prg
%-
%INTERFACE
%define! Settings Common\FSL_USB_StackSettings.Inc
%define! Abstract Common\FSL_USB_StackAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif

%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#include <stddef.h> /* for size_t */
%if defined(CDCDevice)

/* Interfaces/wrappers to the CDC device class, needed for Shell if using default serial/connection to USB (CDC): */
#define %'ModuleName'%.SendString        %@CDCDevice@'ModuleName'%.SendString
#define %'ModuleName'%.RecvChar          %@CDCDevice@'ModuleName'%.GetChar
#define %'ModuleName'%.SendChar          %@CDCDevice@'ModuleName'%.SendChar
#define %'ModuleName'%.GetCharsInRxBuf   %@CDCDevice@'ModuleName'%.GetCharsInRxBuf
#define %'ModuleName'%.DATA_BUFF_SIZE    %@CDCDevice@'ModuleName'%.DATA_BUFF_SIZE /* data buffer size as specified in the properties */

%endif
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

#ifndef __BWUserType_%'ModuleName'_TComData
#define __BWUserType_%'ModuleName'_TComData
  typedef uint8_t %'ModuleName'_TComData ;                       %>40/* User type for communication data type. */
#endif

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-

#define %'ModuleName'%.USB_ERR_SEND            1  /* Error while sending */
#define %'ModuleName'%.USB_ERR_BUSOFF          2  /* Bus not ready */
#define %'ModuleName'%.USB_ERR_INIT            3  /* USB initialization error */
#define %'ModuleName'%.USB_ERR_TX_CHAR         4  /* Error sending character */
#define %'ModuleName'%.USB_ERR_TX_STRING       5  /* Error sending string */
#define %'ModuleName'%.USB_ERR_CHECKED_TXFULL  6  /* Error during sending a checked block */
#define %'ModuleName'%.USB_ERR_RECEIVE         7  /* Error while starting a receive transaction */
#define %'ModuleName'%.USB_ERR_DEINIT          8  /* USB deinitialization error */

%if (CPUDevice="MCF51MM256") | (CPUDevice="MCF51JE256")
/* special USB interrupt handling for %CPUDevice */
extern volatile uint8_t %'ModuleName'%.usb_int_disable;
extern volatile uint8_t %'ModuleName'%.usb_int_en_copy;

%endif
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
uint8_t %'ModuleName'%.%Init(void);
%define! RetVal
%include Common\FSL_USB_StackInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG usb_int_dis
void %'ModuleName'%.usb_int_dis(void);
%include Common\GeneralInternal.inc (usb_int_dis)

%-INTERNAL_METHOD_END usb_int_dis
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG usb_int_en
void %'ModuleName'%.usb_int_en(void);
%include Common\GeneralInternal.inc (usb_int_en)

%-INTERNAL_METHOD_END usb_int_en
%-************************************************************************************************************
%-INHERITED_EVENT_BEGIN MSDHost OnError
%if defined(MSD) & defined(@MSDHost@OnError)
void %@MSDHost@OnError(byte error);

%endif %- @MSDHost@OnError
%-INHERITED_EVENT_END MSDHost OnError
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
uint8_t %'ModuleName'%.%Deinit(void);
%define! RetVal
%include Common\FSL_USB_StackDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnError
%ifdef OnError
%INTERFACE OnError
void %OnError(uint8_t error);
%define! Parerror
%include Common\FSL_USB_StackOnError.Inc

%endif %- OnError
%-BW_METHOD_END OnError
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\FSL_USB_StackSettings.Inc
%define! Abstract Common\FSL_USB_StackAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#include "derivative.h"     /* include peripheral declarations */
#include "types.h"          /* Contains User Defined Data Types */
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%if (CPUDevice="MCF51MM256") | (CPUDevice="MCF51JE256")
/* special variables for %CPUDevice */
volatile uint8_t %'ModuleName'%.usb_int_disable = 0;
volatile uint8_t %'ModuleName'%.usb_int_en_copy = 0;

%endif
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG usb_int_dis
%include Common\GeneralInternal.inc (usb_int_dis)
void %'ModuleName'%.usb_int_dis(void)
{
  /* %CPUDevice */
#if %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED != %@sdk@'ModuleName'%.CONFIG_SDK_PROCESSOR_EXPERT
  NVIC_DisableIRQ(USB0_IRQn);
#else
%if (CPUDevice="MCF51MM256") | (CPUDevice="MCF51JE256")
  %'ModuleName'%.usb_int_disable++;
%elif (CPUDevice="MC9S08JM16") | (CPUDevice="MC9S08JM60")
  CTL_USBEN = 0; /* disable USB module */
%elif (CPUDevice="Kinetis K40") | (CPUDevice="Kinetis K53") | (CPUDevice="Kinetis K60") | (CPUDevice="Kinetis K70")
#if !HIGH_SPEED_DEVICE
  NVICICER2 = (1<<9);   /* Disable interrupts from USB module (Interrupt Clear-Enable Register) */
#else
  NVICICER3 = 1;        /* Disable interrupts on USBHS (Interrupt Clear-Enable Register) */
#endif
%elif (CPUDevice="Kinetis K64F")
  NVICICER1 = (1<<21);   /* Disable interrupts from USB module (Interrupt Clear-Enable Register) */
%elif (CPUDevice="Kinetis L2K")
  NVIC_ICER = (1<<24);    /* Disable interrupts from USB module (Interrupt Clear-Enable Register) */
%elif (CPUDevice="Kinetis KL24Z48")
  NVIC_ICER = (1<<24);    /* Disable interrupts from USB module (Interrupt Clear-Enable Register) */
%elif (CPUDevice="Kinetis KL26Z48")
  NVIC_ICER = (1<<24);    /* Disable interrupts from USB module (Interrupt Clear-Enable Register) */
%elif (CPUDevice="Kinetis KL46Z48")
  NVIC_ICER = (1<<24);    /* Disable interrupts from USB module (Interrupt Clear-Enable Register) */
%elif (CPUDevice="Kinetis K20D50")
  NVICISER1 = (1<<3);   /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
%elif (CPUDevice="Kinetis K20D72")
  NVICISER1 = (1<<9);    /* Disable interrupts from USB module (Interrupt Clear-Enable Register) */
%elif (CPUDevice="Kinetis K21D50")
  NVICISER1 = (1<<21);    /* Disable interrupts from USB module (Interrupt Clear-Enable Register) */
%elif (CPUDevice="Kinetis K21F120")
  NVICISER1 = (1<<21);    /* Disable interrupts from USB module (Interrupt Clear-Enable Register) */
%elif (CPUDevice="Kinetis K22F120")
  NVICISER1 = (1<<21);    /* Disable interrupts from USB module (Interrupt Clear-Enable Register) */
%elif (CPUDevice="Kinetis K22FN120")
  NVICISER1 = (1<<21);    /* Disable interrupts from USB module (Interrupt Clear-Enable Register) */
%elif (CPUDevice="Kinetis K22DX50")
  NVICISER1 = (1<<21);    /* Disable interrupts from USB module (Interrupt Clear-Enable Register) */
%elif (CPUDevice="Kinetis K24FN120") %- vector 69, IRQ 53
  NVICISER1 = (1<<21);    /* Disable interrupts from USB module (Interrupt Clear-Enable Register) */
%else
  /* functionality not needed for %CPUDevice */
%endif
#endif
}

%-INTERNAL_METHOD_END usb_int_dis
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG usb_int_en
%include Common\GeneralInternal.inc (usb_int_en)
void %'ModuleName'%.usb_int_en(void)
{
  /* %CPUDevice */
#if %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED != %@sdk@'ModuleName'%.CONFIG_SDK_PROCESSOR_EXPERT
  NVIC_ClearPendingIRQ(USB0_IRQn);
  NVIC_EnableIRQ(USB0_IRQn);
#else
%if (CPUDevice="MCF51MM256") | (CPUDevice="MCF51JE256")
  volatile uint_8 dummy;

  if (%'ModuleName'%.usb_int_disable) {
    %'ModuleName'%.usb_int_disable--;
  }
  if (INT_ENB == 0) {
    if (%'ModuleName'%.usb_int_disable == 0) {
      dummy = %'ModuleName'%.usb_int_en_copy;
      %'ModuleName'%.usb_int_en_copy = 0;
      INT_ENB = dummy;
    }
  }
%elif (CPUDevice="MC9S08JM16") | (CPUDevice="MC9S08JM60")
  CTL_USBEN = 1; /* enable USB module */
%elif (CPUDevice="Kinetis K40") | (CPUDevice="Kinetis K53") | (CPUDevice="Kinetis K60") | (CPUDevice="Kinetis K70")
#if !HIGH_SPEED_DEVICE
  NVICICPR2 = (1<<9);   /* Clear any pending interrupts on USB (Interrupt Clear-Pending Register) */
  NVICISER2 = (1<<9);   /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
#else
  NVICICPR3 = 1;        /* Clear any pending interrupts on USBHS (Interrupt Clear-Pending Register) */
  NVICISER3 = 1;        /* Enable interrupts on USBHS (Interrupt Set-Enable Register) */
#endif
%elif (CPUDevice="Kinetis K64F")
  /* Vector 0x45 (69) => 69-16=53 => IRQ53 ==> 53 mod 32 ==> 21 */
  NVICICPR1 = (1<<21);    /* Clear any pending interrupts on USB (Interrupt Clear-Pending Register) */
  NVICISER1 = (1<<21);    /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
%elif (CPUDevice="Kinetis L2K")
  NVIC_ICPR = (1<<24);    /* Clear any pending interrupts on USB (Interrupt Clear-Pending Register) */
  NVIC_ISER = (1<<24);    /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
%elif (CPUDevice="Kinetis KL24Z48")
  NVIC_ICPR = (1<<24);    /* Clear any pending interrupts on USB (Interrupt Clear-Pending Register) */
  NVIC_ISER = (1<<24);    /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
%elif (CPUDevice="Kinetis KL26Z48")
  NVIC_ICPR = (1<<24);    /* Clear any pending interrupts on USB (Interrupt Clear-Pending Register) */
  NVIC_ISER = (1<<24);    /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
%elif (CPUDevice="Kinetis KL46Z48")
  NVIC_ICPR = (1<<24);    /* Clear any pending interrupts on USB (Interrupt Clear-Pending Register) */
  NVIC_ISER = (1<<24);    /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
%elif (CPUDevice="Kinetis K20D50") %- /* USB OTG: Vector 51, IRQ *35* (51-16), NVC-non-IPR *1*, NVIC IPR 8  => 35 mod 32 ==> (<< 3)
  NVICICPR1 = (1<<3);   /* Clear any pending interrupts on USB (Interrupt Clear-Pending Register) */
  NVICISER1 = (1<<3);   /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
%elif (CPUDevice="Kinetis K20D72")
  NVICICPR2 = (1<<9);    /* Clear any pending interrupts on USB (Interrupt Clear-Pending Register) */
  NVICISER2 = (1<<9);    /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
%elif (CPUDevice="Kinetis K21D50")
  NVICICPR1 = (1<<21);    /* Clear any pending interrupts on USB (Interrupt Clear-Pending Register) */
  NVICISER1 = (1<<21);    /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
%elif (CPUDevice="Kinetis K21F120")
  NVICICPR1 = (1<<21);    /* Clear any pending interrupts on USB (Interrupt Clear-Pending Register) */
  NVICISER1 = (1<<21);    /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
%elif (CPUDevice="Kinetis K22F120")
  NVICICPR1 = (1<<21);    /* Clear any pending interrupts on USB (Interrupt Clear-Pending Register) */
  NVICISER1 = (1<<21);    /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
%elif (CPUDevice="Kinetis K22FN120")
  NVICICPR1 = (1<<21);    /* Clear any pending interrupts on USB (Interrupt Clear-Pending Register) */
  NVICISER1 = (1<<21);    /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
%elif (CPUDevice="Kinetis K22DX50")
  NVICICPR1 = (1<<21);    /* Clear any pending interrupts on USB (Interrupt Clear-Pending Register) */
  NVICISER1 = (1<<21);    /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
%elif (CPUDevice="Kinetis K24FN120") %- vector 69, IRQ 53
  NVICICPR1 = (1<<21);    /* Clear any pending interrupts on USB (Interrupt Clear-Pending Register) */
  NVICISER1 = (1<<21);    /* Enable interrupts from USB module (Interrupt Set-Enable Register) */
%else
  /* functionality not needed for %CPUDevice */
%endif
#endif
}

%-INTERNAL_METHOD_END usb_int_en
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%define! RetVal
%include Common\FSL_USB_StackDeinit.Inc
uint8_t %'ModuleName'%.%Deinit(void)
{
  uint8_t err;

  %'ModuleName'%.usb_int_dis(); /* disable USB interrupts */
  /* Initialize the USB interface */
%if USBDeviceClass="CDC Device"
  err = %@CDCDevice@'ModuleName'%.Deinit();
%elif USBDeviceClass="CDC Host"
  err = %@CDCHost@'ModuleName'%.Deinit();
%elif USBDeviceClass="HID Keyboard Device"
  err = %@HIDKDevice@'ModuleName'%.Deinit();
%elif USBDeviceClass="HID Joystick Device"
  err = %@HIDJDevice@'ModuleName'%.Deinit();
%elif USBDeviceClass="HID Mouse Device"
  err = %@HIDMDevice@'ModuleName'%.Deinit();
%elif USBDeviceClass="MSD Device"
  err = %@MSDDevice@'ModuleName'%.Deinit();
%elif USBDeviceClass="MSD Host"
  err = %@MSDHost@'ModuleName'%.Deinit();
%else
  #error "unknown USBDeviceClass %USBDeviceClass"
%endif
  if(err != ERR_OK) {
    /* Error deinitializing USB Class */
%if defined(OnError)
    %OnError(%'ModuleName'%.USB_ERR_DEINIT);
%endif
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%define! RetVal
%include Common\FSL_USB_StackInit.Inc
uint8_t %'ModuleName'%.%Init(void)
{
  uint8_t err;
%if %InheritedUSBInitEnabled='no'
  void %InitUSBFunctionName(void); /* no inherited init component, use Init function name from properties */
%endif

%if (CPUDevice="MCF51MM256") | (CPUDevice="MCF51JE256")
  %'ModuleName'%.usb_int_dis();
%endif
%if (CPUDevice="MCF51JM128") | (CPUDevice="MC9S08JM128") | (CPUDevice="MC9S08JM32")
  SOPT2_USB_BIGEND = 0; /* Needs to be in little endian mode. */
%endif
%if (CPUDevice="Kinetis K64F")
  MPU_CESR = 0; /* K64F has memory protection unit, disable it! */
%elif (CPUDevice="Kinetis K22FN120")
  #if 0 /* not needed with KDS V2.0.0? But needed for K64F */
    MPU_CESR = 0; /* K22FN (Kinetis K2) has memory protection unit, disable it! */
  #endif
%endif
%if %InheritedUSBInitEnabled='no'
  %InitUSBFunctionName(); /* no inherited init component, call Init function name from properties */
%endif
  /* Initialize the USB interface */
%if USBDeviceClass="CDC Device"
  err = %@CDCDevice@'ModuleName'%.Init();
%elif USBDeviceClass="CDC Host"
  err = %@CDCHost@'ModuleName'%.Init();
%elif USBDeviceClass="HID Keyboard Device"
  err = %@HIDKDevice@'ModuleName'%.Init();
%elif USBDeviceClass="HID Joystick Device"
  err = %@HIDJDevice@'ModuleName'%.Init();
%elif USBDeviceClass="HID Mouse Device"
  err = %@HIDMDevice@'ModuleName'%.Init();
%elif USBDeviceClass="MSD Device"
  err = %@MSDDevice@'ModuleName'%.Init();
%elif USBDeviceClass="MSD Host"
  err = %@MSDHost@'ModuleName'%.Init();
%else
  #error "unknown USBDeviceClass %USBDeviceClass"
%endif
  if(err != ERR_OK) {
    /* Error initializing USB Class */
%if defined(OnError)
    %OnError(%'ModuleName'%.USB_ERR_INIT);
%endif
    return ERR_FAILED;
  }
  %'ModuleName'%.usb_int_en();
  return ERR_OK;
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-INHERITED_EVENT_BEGIN MSDHost OnError
%if defined(MSD) & defined(@MSDHost@OnError)
%include Common\GeneralInternal.inc (OnError)
void %@MSDHost@OnError(byte error)
{
  /* Write your code here ... */
}

%endif %- @MSDHost@OnError
%-INHERITED_EVENT_END MSDHost OnError
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnError
%ifdef OnError
%IMPLEMENTATION OnError
%define! Parerror
%include Common\FSL_USB_StackOnError.Inc
void %OnError(uint8_t error)
{
  /* Write your code here ... */
}

%endif %- OnError
%-BW_METHOD_END OnError
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%if %CallInitMethod='yes'
  (void)%'ModuleName'%.%Init();
%endif
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for FSL_USB
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is used to configure settings of the Freescale (now NXP) USB Stack module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

/* no configuration supported yet */
%- #define %'ModuleName'%.CONFIG_SETTING

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------

