%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    25.12.2011
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\RingBufferSettings.Inc
%define! Abstract Common\RingBufferAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif

%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
#ifdef __cplusplus
extern "C" {
#endif

#if %'ModuleName'%.CONFIG_ELEM_SIZE==1
  typedef uint8_t %'ModuleName'_ElementType; /* type of single element */
#elif %'ModuleName'%.CONFIG_ELEM_SIZE==2
  typedef uint16_t %'ModuleName'_ElementType; /* type of single element */
#elif %'ModuleName'%.CONFIG_ELEM_SIZE==4
  typedef uint32_t %'ModuleName'_ElementType; /* type of single element */
#else
  #error "illegal element type size in properties"
#endif
#if %'ModuleName'%.CONFIG_BUF_SIZE<256
  typedef uint8_t %'ModuleName'_BufSizeType; /* up to 255 elements (index 0x00..0xff) */
#else
  typedef uint16_t %'ModuleName'_BufSizeType; /* more than 255 elements, up to 2^16 */
#endif

%-
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Put
%ifdef Put
uint8_t %'ModuleName'%.%Put(%'ModuleName'_ElementType elem);
%define! Parelem
%define! RetVal
%include Common\RingBufferPut.Inc

%endif %- Put
%-BW_METHOD_END Put
%-************************************************************************************************************
%-BW_METHOD_BEGIN Get
%ifdef Get
uint8_t %'ModuleName'%.%Get(%'ModuleName'_ElementType *elemP);
%define! ParelemP
%define! RetVal
%include Common\RingBufferGet.Inc

%endif %- Get
%-BW_METHOD_END Get
%-************************************************************************************************************
%-BW_METHOD_BEGIN NofElements
%ifdef NofElements
%'ModuleName'_BufSizeType %'ModuleName'%.%NofElements(void);
%define! RetVal
%include Common\RingBufferNofElements.Inc

%endif %- NofElements
%-BW_METHOD_END NofElements
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\RingBufferInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN NofFreeElements
%ifdef NofFreeElements
%'ModuleName'_BufSizeType %'ModuleName'%.%NofFreeElements(void);
%define! RetVal
%include Common\RingBufferNofFreeElements.Inc

%endif %- NofFreeElements
%-BW_METHOD_END NofFreeElements
%-************************************************************************************************************
%-BW_METHOD_BEGIN Clear
%ifdef Clear
void %'ModuleName'%.%Clear(void);
%include Common\RingBufferClear.Inc

%endif %- Clear
%-BW_METHOD_END Clear
%-************************************************************************************************************
%-BW_METHOD_BEGIN Peek
%ifdef Peek
uint8_t %'ModuleName'%.%Peek(%'ModuleName'_BufSizeType index, %'ModuleName'_ElementType *elemP);
%define! Parindex
%define! ParelemP
%define! RetVal
%include Common\RingBufferPeek.Inc

%endif %- Peek
%-BW_METHOD_END Peek
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
#define %'ModuleName'%.%Deinit() \
   /* nothing to deinitialize */
%include Common\RingBufferDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Delete
%ifdef Delete
uint8_t %'ModuleName'%.%Delete(void);
%define! RetVal
%include Common\RingBufferDelete.Inc

%endif %- Delete
%-BW_METHOD_END Delete
%-************************************************************************************************************
%-BW_METHOD_BEGIN Putn
%ifdef Putn
uint8_t %'ModuleName'%.%Putn(%'ModuleName'_ElementType *elem, %'ModuleName'_BufSizeType nof);
%define! Parelem
%define! Parnof
%define! RetVal
%include Common\RingBufferPutn.Inc

%endif %- Putn
%-BW_METHOD_END Putn
%-************************************************************************************************************
%-BW_METHOD_BEGIN Compare
%ifdef Compare
uint8_t %'ModuleName'%.%Compare(%'ModuleName'_BufSizeType index, %'ModuleName'_ElementType *elemP, %'ModuleName'_BufSizeType nof);
%define! Parindex
%define! ParelemP
%define! Parnof
%define! RetVal
%include Common\RingBufferCompare.Inc

%endif %- Compare
%-BW_METHOD_END Compare
%-************************************************************************************************************
%-BW_METHOD_BEGIN Getn
%ifdef Getn
uint8_t %'ModuleName'%.%Getn(%'ModuleName'_ElementType *buf, %'ModuleName'_BufSizeType nof);
%define! Parnof
%define! Parbuf
%define! RetVal
%include Common\RingBufferGetn.Inc

%endif %- Getn
%-BW_METHOD_END Getn
%-************************************************************************************************************
%-BW_METHOD_BEGIN Update
%ifdef Update
uint8_t %'ModuleName'%.%Update(%'ModuleName'_BufSizeType index, %'ModuleName'_ElementType *elemP);
%define! Parindex
%define! ParelemP
%define! RetVal
%include Common\RingBufferUpdate.Inc

%endif %- Update
%-BW_METHOD_END Update
%-BW_DEFINITION_END
/* END %ModuleName. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnBufferFull
%ifdef OnBufferFull
%INTERFACE OnBufferFull
void %OnBufferFull(void);
%include Common\RingBufferOnBufferFull.Inc

%endif %- OnBufferFull
%-BW_METHOD_END OnBufferFull
%-BW_METHOD_BEGIN OnBufferEmpty
%ifdef OnBufferEmpty
%INTERFACE OnBufferEmpty
void %OnBufferEmpty(void);
%include Common\RingBufferOnBufferEmpty.Inc

%endif %- OnBufferEmpty
%-BW_METHOD_END OnBufferEmpty
%-BW_METHOD_BEGIN OnItemPut
%ifdef OnItemPut
%INTERFACE OnItemPut
void %OnItemPut(%'ModuleName'_ElementType elem);
%define! Parelem
%include Common\RingBufferOnItemPut.Inc

%endif %- OnItemPut
%-BW_METHOD_END OnItemPut
%-BW_METHOD_BEGIN OnItemGet
%ifdef OnItemGet
%INTERFACE OnItemGet
void %OnItemGet(%'ModuleName'_ElementType elem);
%define! Parelem
%include Common\RingBufferOnItemGet.Inc

%endif %- OnItemGet
%-BW_METHOD_END OnItemGet
%-BW_METHOD_BEGIN OnClear
%ifdef OnClear
%INTERFACE OnClear
void %OnClear(void);
%include Common\RingBufferOnClear.Inc

%endif %- OnClear
%-BW_METHOD_END OnClear
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\RingBufferSettings.Inc
%define! Abstract Common\RingBufferAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#if %'ModuleName'%.CONFIG_REENTRANT
  #define %'ModuleName'%.DEFINE_CRITICAL() %@CriticalSection@'ModuleName'%.CriticalVariable()
  #define %'ModuleName'%.ENTER_CRITICAL()  %@CriticalSection@'ModuleName'%.EnterCritical()
  #define %'ModuleName'%.EXIT_CRITICAL()   %@CriticalSection@'ModuleName'%.ExitCritical()
#else
  #define %'ModuleName'%.DEFINE_CRITICAL() /* nothing */
  #define %'ModuleName'%.ENTER_CRITICAL()  /* nothing */
  #define %'ModuleName'%.EXIT_CRITICAL()   /* nothing */
#endif
static %'ModuleName'_ElementType %'ModuleName'%.buffer[%'ModuleName'%.CONFIG_BUF_SIZE]; /* ring buffer */
static %'ModuleName'_BufSizeType %'ModuleName'%.inIdx;  /* input index */
static %'ModuleName'_BufSizeType %'ModuleName'%.outIdx; /* output index */
static %'ModuleName'_BufSizeType %'ModuleName'%.inSize; /* size data in buffer */
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Put
%ifdef Put
%define! Parelem
%define! RetVal
%include Common\RingBufferPut.Inc
uint8_t %'ModuleName'%.%Put(%'ModuleName'_ElementType elem)
{
  uint8_t res = ERR_OK;
  %'ModuleName'%.DEFINE_CRITICAL();

  %'ModuleName'%.ENTER_CRITICAL();
  if (%'ModuleName'%.inSize==%'ModuleName'%.CONFIG_BUF_SIZE) {
    res = ERR_TXFULL;
  } else {
    %'ModuleName'%.buffer[%'ModuleName'%.inIdx] = elem;
    %'ModuleName'%.inIdx++;
    if (%'ModuleName'%.inIdx==%'ModuleName'%.CONFIG_BUF_SIZE) {
      %'ModuleName'%.inIdx = 0;
    }
    %'ModuleName'%.inSize++;
  }
  %'ModuleName'%.EXIT_CRITICAL();
%if defined(OnBufferFull)
  if (res==ERR_TXFULL) {
    %OnBufferFull(); /* call user event */
  }
%endif
%if defined(OnItemPut)
  %OnItemPut(elem); /* call optional user event */
%endif
  return res;
}

%endif %- Put
%-BW_METHOD_END Put
%-************************************************************************************************************
%-BW_METHOD_BEGIN Putn
%ifdef Putn
%define! Parelem
%define! Parnof
%define! RetVal
%include Common\RingBufferPutn.Inc
uint8_t %'ModuleName'%.%Putn(%'ModuleName'_ElementType *elem, %'ModuleName'_BufSizeType nof)
{
  uint8_t res = ERR_OK;

  while(nof>0) {
    res = %'ModuleName'%.%Put(*elem);
    if (res!=ERR_OK) {
      break;
    }
    elem++; nof--;
  }
  return res;
}

%endif %- Putn
%-BW_METHOD_END Putn
%-************************************************************************************************************
%-BW_METHOD_BEGIN Get
%ifdef Get
%define! ParelemP
%define! RetVal
%include Common\RingBufferGet.Inc
uint8_t %'ModuleName'%.%Get(%'ModuleName'_ElementType *elemP)
{
  uint8_t res = ERR_OK;
  %'ModuleName'%.DEFINE_CRITICAL();

  %'ModuleName'%.ENTER_CRITICAL();
  if (%'ModuleName'%.inSize==0) {
    res = ERR_RXEMPTY;
  } else {
    *elemP = %'ModuleName'%.buffer[%'ModuleName'%.outIdx];
    %'ModuleName'%.inSize--;
    %'ModuleName'%.outIdx++;
    if (%'ModuleName'%.outIdx==%'ModuleName'%.CONFIG_BUF_SIZE) {
      %'ModuleName'%.outIdx = 0;
    }
  }
  %'ModuleName'%.EXIT_CRITICAL();
%if defined(OnBufferEmpty)
  if (res==ERR_RXEMPTY) {
    %OnBufferEmpty(); /* call user event */
  }
%endif
%if defined(OnItemGet)
  %OnItemGet(*elemP); /* call optional user event */
%endif
  return res;
}

%endif %- Get
%-BW_METHOD_END Get
%-************************************************************************************************************
%-BW_METHOD_BEGIN Getn
%ifdef Getn
%define! Parnof
%define! Parbuf
%define! RetVal
%include Common\RingBufferGetn.Inc
uint8_t %'ModuleName'%.%Getn(%'ModuleName'_ElementType *buf, %'ModuleName'_BufSizeType nof)
{
  uint8_t res = ERR_OK;

  while(nof>0) {
    res = %'ModuleName'%.%Get(buf);
    if (res!=ERR_OK) {
      break;
    }
    buf++; nof--;
  }
  return res;
}

%endif %- Getn
%-BW_METHOD_END Getn
%-************************************************************************************************************
%-BW_METHOD_BEGIN NofElements
%ifdef NofElements
%define! RetVal
%include Common\RingBufferNofElements.Inc
%'ModuleName'_BufSizeType %'ModuleName'%.%NofElements(void)
{
  return %'ModuleName'%.inSize;
}

%endif %- NofElements
%-BW_METHOD_END NofElements
%-************************************************************************************************************
%-BW_METHOD_BEGIN NofFreeElements
%ifdef NofFreeElements
%define! RetVal
%include Common\RingBufferNofFreeElements.Inc
%'ModuleName'_BufSizeType %'ModuleName'%.%NofFreeElements(void)
{
  return (%'ModuleName'_BufSizeType)(%'ModuleName'%.CONFIG_BUF_SIZE-%'ModuleName'%.inSize);
}

%endif %- NofFreeElements
%-BW_METHOD_END NofFreeElements
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\RingBufferInit.Inc
void %'ModuleName'%.%Init(void)
{
  %'ModuleName'%.inIdx = 0;
  %'ModuleName'%.outIdx = 0;
  %'ModuleName'%.inSize = 0;
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Clear
%ifdef Clear
%include Common\RingBufferClear.Inc
void %'ModuleName'%.%Clear(void)
{
  %'ModuleName'%.DEFINE_CRITICAL();

  %'ModuleName'%.ENTER_CRITICAL();
  %'ModuleName'%.%Init();
  %'ModuleName'%.EXIT_CRITICAL();
%if defined(OnClear)
  %OnClear(); /* call optional user event */
%endif
}

%endif %- Clear
%-BW_METHOD_END Clear
%-************************************************************************************************************
%-BW_METHOD_BEGIN Peek
%ifdef Peek
%define! Parindex
%define! ParelemP
%define! RetVal
%include Common\RingBufferPeek.Inc
uint8_t %'ModuleName'%.%Peek(%'ModuleName'_BufSizeType index, %'ModuleName'_ElementType *elemP)
{
  uint8_t res = ERR_OK;
  int idx; /* index inside ring buffer */
  %'ModuleName'%.DEFINE_CRITICAL();

  %'ModuleName'%.ENTER_CRITICAL();
  if (index>=%'ModuleName'%.CONFIG_BUF_SIZE) {
    res = ERR_OVERFLOW; /* asking for an element outside of ring buffer size */
  } else if (index<%'ModuleName'%.inSize) {
    idx = (%'ModuleName'%.outIdx+index)%%%'ModuleName'%.CONFIG_BUF_SIZE;
    *elemP = %'ModuleName'%.buffer[idx];
  } else { /* asking for an element which does not exist */
    res = ERR_RXEMPTY;
  }
  %'ModuleName'%.EXIT_CRITICAL();
  return res;
}

%endif %- Peek
%-BW_METHOD_END Peek
%-************************************************************************************************************
%-BW_METHOD_BEGIN Compare
%ifdef Compare
%define! Parindex
%define! ParelemP
%define! Parnof
%define! RetVal
%include Common\RingBufferCompare.Inc
uint8_t %'ModuleName'%.%Compare(%'ModuleName'_BufSizeType index, %'ModuleName'_ElementType *elemP, %'ModuleName'_BufSizeType nof)
{
  uint8_t cmpResult = 0;
  uint8_t res;
  %'ModuleName'_ElementType val;

  while(nof>0) {
    res = %'ModuleName'%.%Peek(index, &val);
    if (res!=ERR_OK) { /* general failure? */
      cmpResult = (uint8_t)-1; /* no match */
      break;
    }
    if (val!=*elemP) { /* mismatch */
      cmpResult = (uint8_t)-1; /* no match */
      break;
    }
    elemP++; index++; nof--;
  }

  return cmpResult;
}

%endif %- Compare
%-BW_METHOD_END Compare
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\RingBufferDeinit.Inc
/**
void %'ModuleName'%.%Deinit(void)
{
  ** Function is implemented as macro in the header file
}
*/
%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Delete
%ifdef Delete
%define! RetVal
%include Common\RingBufferDelete.Inc
uint8_t %'ModuleName'%.%Delete(void)
{
  uint8_t res = ERR_OK;
  %'ModuleName'%.DEFINE_CRITICAL();

  %'ModuleName'%.ENTER_CRITICAL();
  if (%'ModuleName'%.inSize==0) {
    res = ERR_RXEMPTY;
  } else {
    %'ModuleName'%.inSize--;
    %'ModuleName'%.outIdx++;
    if (%'ModuleName'%.outIdx==%'ModuleName'%.CONFIG_BUF_SIZE) {
      %'ModuleName'%.outIdx = 0;
    }
  }
  %'ModuleName'%.EXIT_CRITICAL();
%if defined(OnBufferEmpty)
  if (res==ERR_RXEMPTY) {
    %OnBufferEmpty(); /* call user event */
  }
%endif
  return res;
}

%endif %- Delete
%-BW_METHOD_END Delete
%-************************************************************************************************************
%-BW_METHOD_BEGIN Update
%ifdef Update
%define! Parindex
%define! ParelemP
%define! RetVal
%include Common\RingBufferUpdate.Inc
uint8_t %'ModuleName'%.%Update(%'ModuleName'_BufSizeType index, %'ModuleName'_ElementType *elemP)
{
  uint8_t res = ERR_OK;
  int idx; /* index inside ring buffer */
  %'ModuleName'%.DEFINE_CRITICAL();

  %'ModuleName'%.ENTER_CRITICAL();
  if (index>=%'ModuleName'%.CONFIG_BUF_SIZE) {
    res = ERR_OVERFLOW; /* asking for an element outside of ring buffer size */
  } else if (index<%'ModuleName'%.inSize) {
    idx = (%'ModuleName'%.outIdx+index)%%%'ModuleName'%.CONFIG_BUF_SIZE;
    %'ModuleName'%.buffer[idx] = *elemP; /* replace element */
  } else { /* asking for an element which does not exist */
    res = ERR_RXEMPTY;
  }
  %'ModuleName'%.EXIT_CRITICAL();
  return res;
}

%endif %- Update
%-BW_METHOD_END Update
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnBufferFull
%ifdef OnBufferFull
%IMPLEMENTATION OnBufferFull
%include Common\RingBufferOnBufferFull.Inc
void %OnBufferFull(void)
{
  /* Write your code here ... */
}

%endif %- OnBufferFull
%-BW_METHOD_END OnBufferFull
%-BW_METHOD_BEGIN OnBufferEmpty
%ifdef OnBufferEmpty
%IMPLEMENTATION OnBufferEmpty
%include Common\RingBufferOnBufferEmpty.Inc
void %OnBufferEmpty(void)
{
  /* Write your code here ... */
}

%endif %- OnBufferEmpty
%-BW_METHOD_END OnBufferEmpty
%-BW_METHOD_BEGIN OnItemPut
%ifdef OnItemPut
%IMPLEMENTATION OnItemPut
%define! Parelem
%include Common\RingBufferOnItemPut.Inc
void %OnItemPut(%'ModuleName'_ElementType elem)
{
  /* Write your code here ... */
}

%endif %- OnItemPut
%-BW_METHOD_END OnItemPut
%-BW_METHOD_BEGIN OnItemGet
%ifdef OnItemGet
%IMPLEMENTATION OnItemGet
%define! Parelem
%include Common\RingBufferOnItemGet.Inc
void %OnItemGet(%'ModuleName'_ElementType elem)
{
  /* Write your code here ... */
}

%endif %- OnItemGet
%-BW_METHOD_END OnItemGet
%-BW_METHOD_BEGIN OnClear
%ifdef OnClear
%IMPLEMENTATION OnClear
%include Common\RingBufferOnClear.Inc
void %OnClear(void)
{
  /* Write your code here ... */
}

%endif %- OnClear
%-BW_METHOD_END OnClear
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%CODE_BEGIN
%if (CPUfamily = "S32K")
#ifdef CPU_INIT_MCUONECLIPSE_DRIVERS
%endif
  %'ModuleName'%.%Init(); /* ### %DeviceType "%DeviceName" init code ... */
%if (CPUfamily = "S32K")
#endif
%endif
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for RingBuffer.
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is used to configure settings of the Ring Buffer module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

#ifndef %'ModuleName'%.CONFIG_REENTRANT
%if defined(isReentrant) & %isReentrant='yes'
  #define %'ModuleName'%.CONFIG_REENTRANT                        %>40 1 /* 1: reentrant implementation; 0: non-reentrant implementation */
%else
  #define %'ModuleName'%.CONFIG_REENTRANT                        %>40 0 /* 1: reentrant implementation; 0: non-reentrant implementation */
%endif
#endif

#ifndef %'ModuleName'%.CONFIG_BUF_SIZE
%if defined(BufferSize)
  #define %'ModuleName'%.CONFIG_BUF_SIZE                         %>40 %BufferSize   /* number of elements in the buffer */
%else
  #define %'ModuleName'%.CONFIG_BUF_SIZE                         %>40 64   /* number of elements in the buffer */
%endif
#endif

#ifndef %'ModuleName'%.CONFIG_ELEM_SIZE
%if defined(ElementSize)
  #define %'ModuleName'%.CONFIG_ELEM_SIZE                        %>40 %ElementSize   /* size of a single element in bytes */
%else
  #define %'ModuleName'%.CONFIG_ELEM_SIZE                        %>40 64   /* size of a single element in bytes */
%endif
#endif

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
