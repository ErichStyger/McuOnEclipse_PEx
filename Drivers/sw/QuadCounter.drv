%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    15.10.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%ifdef EventCounterC1
  %ifdef @EventCounterC1@OnEnd
    %define! Description_%@EventCounterC1@OnEnd This event is called when the specified number of iterations is generated. This event is available only if a <a href="UntitledProperties.html#IntService">interrupt service/event</a> enabled, the bean is in <a href="UntitledProperties.html#Mode">Repetitive mode</a> and is enabled - <a href="UntitledMethods.html#Enable">Enable</a> and the events are enabled - <a href="UntitledMethods.html#EnableEvent">EnableEvent</a>. The event services the event of the inherited component and eventually invokes other events.
  %endif %- @EventCounterC1@OnEnd
%endif %- EventCounterC1
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\QuadCounterSettings.Inc
%define! Abstract Common\QuadCounterAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%if %C1C2swapped='yes'
#define %'ModuleName'%.SWAP_PINS  1 /* 1: C1 and C2 are swapped */
%else
#define %'ModuleName'%.SWAP_PINS  0 /* 1: C1 and C2 are swapped */
%endif
%ifdef SwapPins
#define %'ModuleName'%.SWAP_PINS_AT_RUNTIME  1 /* 1: C1 and C2 are swapped at runtime, if SwapPins() method is available */
%else
#define %'ModuleName'%.SWAP_PINS_AT_RUNTIME  0 /* 1: C1 and C2 are swapped at runtime, if SwapPins() method is available */
%endif %- SwapPins
%if %SamplingMethod='yes'
#define %'ModuleName'%.GET_C1_PIN()      (%@C1@'ModuleName'%.GetVal())
#define %'ModuleName'%.GET_C2_PIN()      (%@C2@'ModuleName'%.GetVal())
#if %'ModuleName'%.SWAP_PINS
  #define %'ModuleName'%.GET_C1_C2_PINS()               ((%'ModuleName'%.GET_C2_PIN()!=0?2:0)|(%'ModuleName'%.GET_C1_PIN()!=0?1:0))
  #define %'ModuleName'%.GET_C1_C2_PINS_SWAPPED()       ((%'ModuleName'%.GET_C1_PIN()!=0?2:0)|(%'ModuleName'%.GET_C2_PIN()!=0?1:0))
#else
  #define %'ModuleName'%.GET_C1_C2_PINS()               ((%'ModuleName'%.GET_C1_PIN()!=0?2:0)|(%'ModuleName'%.GET_C2_PIN()!=0?1:0))
  #define %'ModuleName'%.GET_C1_C2_PINS_SWAPPED()       ((%'ModuleName'%.GET_C2_PIN()!=0?2:0)|(%'ModuleName'%.GET_C1_PIN()!=0?1:0))
#endif

%if %CounterType='16'
typedef uint16_t %'ModuleName'%.QuadCntrType;
#define %'ModuleName'%.CNTR_BITS  16
  /*!< Number of bits in counter */
%elif %CounterType='32'
typedef uint32_t %'ModuleName'%.QuadCntrType;
#define %'ModuleName'%.CNTR_BITS  32
  /*!< Number of bits in counter */
%else
  %error "Unknown counter type?"
%endif

%ifdef ParseCommand
#define %'ModuleName'%.PARSE_COMMAND_ENABLED  1  /* set to 1 if method ParseCommand() is present, 0 otherwise */
%else
#define %'ModuleName'%.PARSE_COMMAND_ENABLED  0 /* set to 1 if method ParseCommand() is present, 0 otherwise */
%endif %- ParseCommand
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetPos
%ifdef SetPos
void %'ModuleName'%.%SetPos(%'ModuleName'_QuadCntrType pos);
%define! Parpos
%include Common\QuadCounterSetPos.Inc

%endif %- SetPos
%-BW_METHOD_END SetPos
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetPos
%ifdef GetPos
%'ModuleName'_QuadCntrType %'ModuleName'%.%GetPos(void);
%define! RetVal
%include Common\QuadCounterGetPos.Inc

%endif %- GetPos
%-BW_METHOD_END GetPos
%-INHERITED_EVENT_BEGIN EventCounterC1 OnEnd
%if InputCaptureMethod='yes'
%ifdef @EventCounterC1@OnEnd
void %@EventCounterC1@OnEnd(void);

%endif %- @EventCounterC1@OnEnd
%endif
%-INHERITED_EVENT_END EventCounterC1 OnEnd
%-************************************************************************************************************
%-BW_METHOD_BEGIN Sample
%ifdef Sample
void %'ModuleName'%.%Sample(void);
%include Common\QuadCounterSample.Inc

%endif %- Sample
%-BW_METHOD_END Sample
%-************************************************************************************************************
%-BW_METHOD_BEGIN NofErrors
%ifdef NofErrors
uint16_t %'ModuleName'%.%NofErrors(void);
%define! RetVal
%include Common\QuadCounterNofErrors.Inc

%endif %- NofErrors
%-BW_METHOD_END NofErrors
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\QuadCounterDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\QuadCounterInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io);
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\QuadCounterParseCommand.Inc

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
uint8_t %'ModuleName'%.%GetVal(void);
%define! RetVal
%include Common\QuadCounterGetVal.Inc

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN SwapPins
%ifdef SwapPins
uint8_t %'ModuleName'%.%SwapPins(bool swap);
%define! Parswap
%define! RetVal
%include Common\QuadCounterSwapPins.Inc

%endif %- SwapPins
%-BW_METHOD_END SwapPins
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnError
%ifdef OnError
%INTERFACE OnError
void %OnError(void);
%include Common\QuadCounterOnError.Inc

%endif %- OnError
%-BW_METHOD_END OnError
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\QuadCounterSettings.Inc
%define! Abstract Common\QuadCounterAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
#if %'ModuleName'%.SWAP_PINS_AT_RUNTIME
  static bool %'ModuleName'%.swappedPins = FALSE;
#endif
%if %SamplingMethod = 'yes'

/* The decoder has 4 different states, together with the previous state the table has 16 entries.
   The value in the table (0,1,-1) indicates the steps taken since previous sample. */
#define QUAD_ERROR  3 /*!< Value to indicate an error in impulse detection. Has to be different from 0,1,-1 */

%if %ErrorCorrection = 'yes'
static uint8_t %'ModuleName'%.prevlast_quadrature_value; /*! Value of C1&C2 before last_quadrature_value. */

static const signed char %'ModuleName'%.Quad_Table[4][4][4] =
  {               /* pprev prev   new    */
    {             /* c12 c12 c12, c1 leading is backward, c2 leading is forward  */
      {
       0,           /* 00  00  00  no change or missed a step? */
       1,           /* 00  00  01   */
       -1,          /* 00  00  10   */
       QUAD_ERROR,  /* 00  00  11  error, lost impulse */
      },
      {
       -1,          /* 00  01  00   */
       0,           /* 00  01  01   */
       2,           /* 00  01  10  lost impulse, correct error */
       1,           /* 00  01  11   */
      },
      {
       1,           /* 00  10  00   */
      -2,           /* 00  10  01  lost impulse, correct error */
       0,           /* 00  10  10   */
      -1,           /* 00  10  11   */
      },
      {
       QUAD_ERROR,  /* 00  11  00  error */
      -1,           /* 00  11  01  lost impulse, correct error */
       1,           /* 00  11  10   */
       0,           /* 00  11  11   */
      }
    },
    {             /* c12 c12 c12  */
      {
       0,           /* 01  00  00   */
       1,           /* 01  00  01   */
       -1,          /* 01  00  10   */
       -2,          /* 01  00  11  lost impulse, correct error */
      },
      {
       -1,          /* 01  01  00   */
       0,           /* 01  01  01   */
       QUAD_ERROR,  /* 01  01  10   error */
       1,           /* 01  01  11   */
      },
      {
       1,           /* 01  10  00   */
       QUAD_ERROR,  /* 01  10  01   error */
       0,           /* 01  10  10   */
      -1,           /* 01  10  11   */
      },
      {
       2,           /* 01  11  00  lost impulse, correct error */
       -1,          /* 01  11  01   */
       1,           /* 01  11  10   */
       0,           /* 01  11  11   */
      }
    },
    {             /* c12 c12 c12  */
      {
       0,           /* 10  00  00   */
       1,           /* 10  00  01   */
       -1,          /* 10  00  10   */
       2,           /* 10  00  11  lost impulse, correct error */
      },
      {
       -1,          /* 10  01  00   */
       0,           /* 10  01  01   */
       QUAD_ERROR,  /* 10  01  10   error */
       1,           /* 10  01  11   */
      },
      {
       1,           /* 10  10  00   */
       QUAD_ERROR,  /* 10  10  01   error */
       0,           /* 10  10  10   */
      -1,           /* 10  10  11   */
      },
      {
       -2,          /* 10  11  00  lost impulse, correct error */
       -1,          /* 10  11  01   */
       1,           /* 10  11  10   */
       0,           /* 10  11  11   */
      }
    },
    {             /* c12 c12 c12  */
      {
       0,           /* 11  00  00   */
       1,           /* 11  00  01   */
       -1,          /* 11  00  10   */
       QUAD_ERROR,  /* 11  00  11  error */
      },
      {
       -1,          /* 11  01  00   */
       0,           /* 11  01  01   */
       -2,          /* 11  01  10  lost impulse, correct error */
       1,           /* 11  01  11   */
      },
      {
       1,           /* 11  10  00   */
       2,           /* 11  10  01   lost impulse, correct error */
       0,           /* 11  10  10   */
      -1,           /* 11  10  11   */
      },
      {
       QUAD_ERROR,  /* 11  11  00  error */
       -1,          /* 11  11  01   */
       1,           /* 11  11  10   */
       0,           /* 11  11  11   */
      }
    }
  };
%else
static const signed char %'ModuleName'%.Quad_Table[4][4] =
  {               /* prev   new    */
    {             /* c1 c2  c1 c2  */
     0,           /* 0  0   0  0  no change or missed a step? */
     1,           /* 0  0   0  1   */
     -1,          /* 0  0   1  0   */
     QUAD_ERROR   /* 0  0   1  1  error, lost impulse */
     },
    {             /* c1 c2  c1 c2  */
     -1,          /* 0  1   0  0   */
     0,           /* 0  1   0  1   no change or missed a step? */
     QUAD_ERROR,  /* 0  1   1  0   error, lost impulse */
     1            /* 0  1   1  1   */
     },
    {             /* c1 c2  c1 c2  */
     1,           /* 1  0   0  0   */
     QUAD_ERROR,  /* 1  0   0  1   error, lost impulse */
     0,           /* 1  0   1  0   no change or missed a step? */
     -1           /* 1  0   1  1   */
     },
    {             /* c1 c2  c1 c2  */
     QUAD_ERROR,  /* 1  1   0  0   error, lost impulse */
     -1,          /* 1  1   0  1   */
     1,           /* 1  1   1  0   */
     0            /* 1  1   1  1   no change or missed a step? */
     }
  };
%endif %- ErrorCorrection
static uint8_t %'ModuleName'%.last_quadrature_value; /*! Value of C1&C2 during last round. */
%endif %- %SamplingMethod = 'yes'

static %'ModuleName'_QuadCntrType %'ModuleName'%.currPos = 0; /*!< Current position */
%ifdef NofErrors
static uint16_t %'ModuleName'%.nofErrors = 0;
%endif %- NofErrors

%endif
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetPos
%ifdef SetPos
%define! Parpos
%include Common\QuadCounterSetPos.Inc
void %'ModuleName'%.%SetPos(%'ModuleName'_QuadCntrType pos)
{
  %'ModuleName'%.currPos = pos;
}

%endif %- SetPos
%-BW_METHOD_END SetPos
%-************************************************************************************************************
%-INHERITED_EVENT_BEGIN EventCounterC1 OnEnd
%if InputCaptureMethod='yes'
%ifdef @EventCounterC1@OnEnd
%include Common\GeneralInternal.inc (OnEnd)
void %@EventCounterC1@OnEnd(void)
{
  if (%@EventCounterC2@'ModuleName'%.GetVal()) { /* forward */
    %'ModuleName'%.currPos += %NofStepsPerCaptureOverflow*4; /* factor 4 because we only get event on a falling edge */
  } else {
    %'ModuleName'%.currPos -= %NofStepsPerCaptureOverflow*4; /* factor 4 because we only get event on a falling edge */
  }
}

%endif %- @EventCounterC1@OnEnd
%endif
%-INHERITED_EVENT_END EventCounterC1 OnEnd
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetPos
%ifdef GetPos
%define! RetVal
%include Common\QuadCounterGetPos.Inc
%'ModuleName'_QuadCntrType %'ModuleName'%.%GetPos(void)
{
  return %'ModuleName'%.currPos;
}

%endif %- GetPos
%-BW_METHOD_END GetPos
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
%define! RetVal
%include Common\QuadCounterGetVal.Inc
uint8_t %'ModuleName'%.%GetVal(void)
{
#if %'ModuleName'%.SWAP_PINS_AT_RUNTIME
  if (%'ModuleName'%.swappedPins) {
    return %'ModuleName'%.GET_C1_C2_PINS_SWAPPED();
  } else {
    return %'ModuleName'%.GET_C1_C2_PINS();
  }
#else
  return %'ModuleName'%.GET_C1_C2_PINS();
#endif
}

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN Sample
%ifdef Sample
%include Common\QuadCounterSample.Inc
void %'ModuleName'%.%Sample(void)
{
  signed char new_step;
  uint8_t c12; /* value of the two sensor input */

  c12 = %'ModuleName'%.GetVal();
%if %ErrorCorrection = 'yes'
  new_step = %'ModuleName'%.Quad_Table[%'ModuleName'%.prevlast_quadrature_value][%'ModuleName'%.last_quadrature_value][c12];
  %'ModuleName'%.prevlast_quadrature_value = %'ModuleName'%.last_quadrature_value;
%else
  new_step = %'ModuleName'%.Quad_Table[%'ModuleName'%.last_quadrature_value][c12];
%endif %- ErrorCorrection
  %'ModuleName'%.last_quadrature_value = c12;
  if (new_step == QUAD_ERROR) {
%ifdef NofErrors
    %'ModuleName'%.nofErrors++;
%endif %- NofErrors
%ifdef OnError
    %OnError(); /* call error handler */
%endif
  } else if (new_step != 0) {
    %'ModuleName'%.currPos += new_step;
  }
}

%endif %- Sample
%-BW_METHOD_END Sample
%-************************************************************************************************************
%-BW_METHOD_BEGIN NofErrors
%ifdef NofErrors
%define! RetVal
%include Common\QuadCounterNofErrors.Inc
uint16_t %'ModuleName'%.%NofErrors(void)
{
  return %'ModuleName'%.nofErrors;
}

%endif %- NofErrors
%-BW_METHOD_END NofErrors
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\QuadCounterDeinit.Inc
void %'ModuleName'%.%Deinit(void)
{
  /* nothing needed */
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\QuadCounterInit.Inc
void %'ModuleName'%.%Init(void)
{
  %'ModuleName'%.currPos = 0;
%if %SamplingMethod='yes'
  %'ModuleName'%.last_quadrature_value = %'ModuleName'%.GET_C1_C2_PINS();
%endif
%if %SamplingMethod='yes' & %ErrorCorrection = 'yes'
  %'ModuleName'%.prevlast_quadrature_value = %'ModuleName'%.last_quadrature_value;
%endif
%ifdef NofErrors
  %'ModuleName'%.nofErrors = 0;
%endif %- NofErrors
#if %'ModuleName'%.SWAP_PINS_AT_RUNTIME
  %'ModuleName'%.swappedPins = FALSE;
#endif
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\QuadCounterParseCommand.Inc
/*!
 * \brief Parses a command
 * \param cmd Command string to be parsed
 * \param handled Sets this variable to TRUE if command was handled
 * \param io I/O stream to be used for input/output
 * \return Error code, ERR_OK if everything was fine
 */
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io)
{
  uint8_t res=ERR_OK;

  if (%@Utility@'ModuleName'%.strcmp((const char*)cmd, %@Shell@'ModuleName'%.CMD_HELP)==0 || %@Utility@'ModuleName'%.strcmp((const char *)cmd, "%'ModuleName' help")==0) {
    %@Shell@'ModuleName'%.SendHelpStr((const unsigned char*)"%'ModuleName'", (const unsigned char*)"%'ModuleName' command group\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((const unsigned char*)"  help|status", (const unsigned char*)"Print help or status information\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((const unsigned char*)"  reset", (const unsigned char*)"Reset the current position counter\r\n", io->stdOut);
    *handled = TRUE;
  } else if (%@Utility@'ModuleName'%.strcmp((const char*)cmd, %@Shell@'ModuleName'%.CMD_STATUS)==0 || %@Utility@'ModuleName'%.strcmp((const char*)cmd, "%'ModuleName' status")==0) {
    %@Shell@'ModuleName'%.SendStr((const unsigned char*)"%'ModuleName':\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendStatusStr((const unsigned char*)"  pos", (const unsigned char*)"", io->stdOut);
  #if %'ModuleName'%.CNTR_BITS==16
    %@Shell@'ModuleName'%.SendNum16u(%'ModuleName'%.currPos, io->stdOut);
  #elif %'ModuleName'%.CNTR_BITS==32
    %@Shell@'ModuleName'%.SendNum32u(%'ModuleName'%.currPos, io->stdOut);
  #else
    #error "unknown counter size!"
  #endif
    %@Shell@'ModuleName'%.SendStr((const unsigned char*)", ", io->stdOut);
  #if %'ModuleName'%.CNTR_BITS==16
    %@Shell@'ModuleName'%.SendNum16s((int16_t)%'ModuleName'%.currPos, io->stdOut);
  #elif %'ModuleName'%.CNTR_BITS==32
    %@Shell@'ModuleName'%.SendNum32s((int32_t)%'ModuleName'%.currPos, io->stdOut);
  #else
    #error "unknown counter size!"
  #endif
    %@Shell@'ModuleName'%.SendStr((const unsigned char*)"\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendStatusStr((const unsigned char*)"  C1 C2", (const unsigned char*)"", io->stdOut);
    if (%'ModuleName'%.GET_C1_PIN()!=0) {
      %@Shell@'ModuleName'%.SendStr((const unsigned char*)"1 ", io->stdOut);
    } else {
      %@Shell@'ModuleName'%.SendStr((const unsigned char*)"0 ", io->stdOut);
    }
    if (%'ModuleName'%.GET_C2_PIN()!=0) {
      %@Shell@'ModuleName'%.SendStr((const unsigned char*)"1\r\n", io->stdOut);
    } else {
      %@Shell@'ModuleName'%.SendStr((const unsigned char*)"0\r\n", io->stdOut);
    }
%ifdef NofErrors
    %@Shell@'ModuleName'%.SendStatusStr((const unsigned char*)"  errors", (const unsigned char*)"", io->stdOut);
    %@Shell@'ModuleName'%.SendNum16u(%'ModuleName'%.nofErrors, io->stdOut);
    %@Shell@'ModuleName'%.SendStr((const unsigned char*)"\r\n", io->stdOut);
%endif %- NofErrors
    *handled = TRUE;
  } else if (%@Utility@'ModuleName'%.strcmp((const char*)cmd, "%'ModuleName' reset")==0) {
    %'ModuleName'%.SetPos(0);
  %ifdef NofErrors
    %'ModuleName'%.nofErrors = 0;
  %endif
    *handled = TRUE;
  }
  return res;
}

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN SwapPins
%ifdef SwapPins
%define! Parswap
%define! RetVal
%include Common\QuadCounterSwapPins.Inc
uint8_t %'ModuleName'%.%SwapPins(bool swap)
{
  %'ModuleName'%.swappedPins = swap;
  return ERR_OK;
}

%endif %- SwapPins
%-BW_METHOD_END SwapPins
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN OnError
%ifdef OnError
%IMPLEMENTATION OnError
%include Common\QuadCounterOnError.Inc
void %OnError(void)
{
  /* Write your code here ... */
}

%endif %- OnError
%-BW_METHOD_END OnError
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
  %'ModuleName'%.%Init();
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for QuadCounter component
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is used to configure settings of the quadrature counter module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

/* no configuration supported yet */
%- #define %'ModuleName'%.CONFIG_SETTING

#endif /* __%'ModuleName'_CONFIG_H */
