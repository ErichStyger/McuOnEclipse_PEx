%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    16.12.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_WriteData Write a data byte to the display
%ifdef SPILDD
  %ifdef @SPILDD@OnBlockReceived
    %define! Description_%@SPILDD@OnBlockReceived This event is called when the requested number of data is moved to the input buffer. This method is available only if the ReceiveBlock method is enabled. The event services the event of the inherited component and eventually invokes other events.
  %endif %- @SPILDD@OnBlockReceived
%endif %- SPILDD
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\SharpMemDisplaySettings.Inc
%define! Abstract Common\SharpMemDisplayAbstract.Inc
%include Common\Header.h

%if (defined(PEversionDecimal) && (PEversionDecimal <=0 '1283')) %- this is only supported with MCU 10.3
%if (CPUfamily = "Kinetis")
/* PEversionDecimal version: %PEversionDecimal (1283 for MCU10.3) */
#include "PE_LDD.h" /* hack for Processor Expert (e.g. in MCU10.3) and LDD: PE_LDD.h includes at the end all shared modules, causing a recursive header file include conflict */
%endif
%endif

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

#define %'ModuleName'%.DISPLAY_HW_NOF_COLUMNS  %'Width'u         %>40/* number of columns in hardware */
#define %'ModuleName'%.DISPLAY_HW_NOF_ROWS     %'Height'u        %>40/* number of rows in hardware */

extern uint8_t %'ModuleName'%.DisplayBuf[%'ModuleName'%.DISPLAY_HW_NOF_ROWS][((%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS-1)/8)+1]; /* buffer for the display */
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
typedef bool %'ModuleName'%.PixelColor;                          %>40/* one bit is enough to describe the color as we have a monochrome display */
typedef uint8_t %'ModuleName'_PixelDim;                          %>40/* one byte is enough to describe the x/y position */
typedef uint16_t %'ModuleName'_PixelCount;                       %>40/* needed type to hold the number of pixels on the display. */

#define %'ModuleName'%.PIXEL_BLACK  0 /* 0 is a black pixel */
#define %'ModuleName'%.PIXEL_WHITE  1 /* 1 is a white pixel */
#define %'ModuleName'%.COLOR_PIXEL_SET      %'ModuleName'%.PIXEL_WHITE /* color for a pixel set */
#define %'ModuleName'%.COLOR_PIXEL_CLR      %'ModuleName'%.PIXEL_BLACK /* color for a pixel cleared */
%if DisplayInvert='yes'
#define %'ModuleName'%.COLOR_BLACK          %'ModuleName'%.PIXEL_WHITE
#define %'ModuleName'%.COLOR_WHITE          %'ModuleName'%.PIXEL_BLACK
%else
#define %'ModuleName'%.COLOR_BLACK          %'ModuleName'%.PIXEL_BLACK
#define %'ModuleName'%.COLOR_WHITE          %'ModuleName'%.PIXEL_WHITE
%endif
#define %'ModuleName'%.COLOR_RED            %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_RED     %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_DARK_RED       %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_GREEN          %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_GREEN   %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_DARK_GREEN     %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BLUE           %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_BLUE    %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_DARK_BLUE      %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_YELLOW         %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_YELLOW  %'ModuleName'%.COLOR_WHITE
#define %'ModuleName'%.COLOR_ORANGE         %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_GREY           %'ModuleName'%.COLOR_BLACK
#define %'ModuleName'%.COLOR_BRIGHT_GREY    %'ModuleName'%.COLOR_WHITE

typedef enum {
  %'ModuleName'%.ORIENTATION_PORTRAIT    = 0,
  %'ModuleName'%.ORIENTATION_PORTRAIT180 = 1,
  %'ModuleName'%.ORIENTATION_LANDSCAPE   = 2,
  %'ModuleName'%.ORIENTATION_LANDSCAPE180= 3
} %'ModuleName'%.DisplayOrientation;

#define %'ModuleName'%.HW_WIDTH         %'Width'u                %>40/* width of display in pixels */
#define %'ModuleName'%.HW_HEIGHT        %'Height'u               %>40/* height of display in pixels */

%if %Height <. %Width
#define %'ModuleName'%.HW_SHORTER_SIDE  %'Height'u               %>40/* size of shorter display side in pixels */
#define %'ModuleName'%.HW_LONGER_SIDE   %'Width'u                %>40/* size of longer display side in pixels */
%else
#define %'ModuleName'%.HW_SHORTER_SIDE  %'Width'u                %>40/* size of shorter display side in pixels */
#define %'ModuleName'%.HW_LONGER_SIDE   %'Height'u               %>40/* size of longer display side in pixels */
%endif

%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Clear
%ifdef Clear
void %'ModuleName'%.%Clear(void);
%include Common\SharpMemDisplayClear.Inc

%endif %- Clear
%-BW_METHOD_END Clear
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\SharpMemDisplayInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateRegion
%ifdef UpdateRegion
void %'ModuleName'%.%UpdateRegion(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h);
%define! Parx
%define! Pary
%define! Parw
%define! Parh
%include Common\SharpMemDisplayUpdateRegion.Inc

%endif %- UpdateRegion
%-BW_METHOD_END UpdateRegion
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateFull
%ifdef UpdateFull
void %'ModuleName'%.%UpdateFull(void);
%include Common\SharpMemDisplayUpdateFull.Inc

%endif %- UpdateFull
%-BW_METHOD_END UpdateFull
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetWindow
%ifdef SetWindow
void %'ModuleName'%.%SetWindow(%'ModuleName'_PixelDim x0, %'ModuleName'_PixelDim x1, %'ModuleName'_PixelDim y0, %'ModuleName'_PixelDim y1);
%define! Parx0
%define! Parx1
%define! Pary0
%define! Pary1
%include Common\SharpMemDisplaySetWindow.Inc

%endif %- SetWindow
%-BW_METHOD_END SetWindow
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDisplayOrientation
%ifdef GetDisplayOrientation
%'ModuleName'_DisplayOrientation %'ModuleName'%.%GetDisplayOrientation(void);
%define! RetVal
%include Common\SharpMemDisplayGetDisplayOrientation.Inc

%endif %- GetDisplayOrientation
%-BW_METHOD_END GetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetWidth
%ifdef GetWidth
#define %'ModuleName'%.%GetWidth() \
  %'ModuleName'%.HW_WIDTH

%define! RetVal
%include Common\SharpMemDisplayGetWidth.Inc

%endif %- GetWidth
%-BW_METHOD_END GetWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetHeight
%ifdef GetHeight
#define %'ModuleName'%.%GetHeight() \
  %'ModuleName'%.HW_HEIGHT

%define! RetVal
%include Common\SharpMemDisplayGetHeight.Inc

%endif %- GetHeight
%-BW_METHOD_END GetHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLongerSide
%ifdef GetLongerSide
#define %'ModuleName'%.%GetLongerSide() \
  %'ModuleName'%.HW_LONGER_SIDE

%define! RetVal
%include Common\SharpMemDisplayGetLongerSide.Inc

%endif %- GetLongerSide
%-BW_METHOD_END GetLongerSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetShorterSide
%ifdef GetShorterSide
#define %'ModuleName'%.%GetShorterSide() \
  %'ModuleName'%.HW_SHORTER_SIDE

%define! RetVal
%include Common\SharpMemDisplayGetShorterSide.Inc

%endif %- GetShorterSide
%-BW_METHOD_END GetShorterSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDisplayOrientation
%ifdef SetDisplayOrientation
void %'ModuleName'%.%SetDisplayOrientation(%'ModuleName'_DisplayOrientation newOrientation);
%define! ParnewOrientation
%include Common\SharpMemDisplaySetDisplayOrientation.Inc

%endif %- SetDisplayOrientation
%-BW_METHOD_END SetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLCD
%ifdef GetLCD
void %'ModuleName'%.%GetLCD(void);
%include Common\SharpMemDisplayGetLCD.Inc

%endif %- GetLCD
%-BW_METHOD_END GetLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN GiveLCD
%ifdef GiveLCD
void %'ModuleName'%.%GiveLCD(void);
%include Common\SharpMemDisplayGiveLCD.Inc

%endif %- GiveLCD
%-BW_METHOD_END GiveLCD
%-INHERITED_EVENT_BEGIN SPILDD OnBlockReceived
%if defined(SPILDD) && defined(@SPILDD@OnBlockReceived)
void %@SPILDD@OnBlockReceived(LDD_TUserData *UserDataPtr);

%endif %- @SPILDD@OnBlockReceived
%-INHERITED_EVENT_END SPILDD OnBlockReceived
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\SharpMemDisplayDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateLine
%ifdef UpdateLine
void %'ModuleName'%.%UpdateLine(uint8_t line, uint8_t *dataP);
%define! Parline
%define! PardataP
%include Common\SharpMemDisplayUpdateLine.Inc

%endif %- UpdateLine
%-BW_METHOD_END UpdateLine
%-************************************************************************************************************
%-BW_METHOD_BEGIN ToggleVCOM
%ifdef ToggleVCOM
void %'ModuleName'%.%ToggleVCOM(void);
%include Common\SharpMemDisplayToggleVCOM.Inc

%endif %- ToggleVCOM
%-BW_METHOD_END ToggleVCOM
%-************************************************************************************************************
%-BW_METHOD_BEGIN PutPixel
%ifdef PutPixel
void %'ModuleName'%.%PutPixel(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelColor color);
%define! Parx
%define! Pary
%define! Parcolor
%include Common\SharpMemDisplayPutPixel.Inc

%endif %- PutPixel
%-BW_METHOD_END PutPixel
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnBlockReceived
%ifdef OnBlockReceived
%INTERFACE OnBlockReceived
void %OnBlockReceived(LDD_TUserData *UserDataPtr);
%define! ParUserDataPtr
%include Common\SharpMemDisplayOnBlockReceived.Inc

%endif %- OnBlockReceived
%-BW_METHOD_END OnBlockReceived
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\SharpMemDisplaySettings.Inc
%define! Abstract Common\SharpMemDisplayAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;

uint8_t %'ModuleName'%.DisplayBuf[%'ModuleName'%.DISPLAY_HW_NOF_ROWS][((%'ModuleName'%.DISPLAY_HW_NOF_COLUMNS-1)/8)+1]; /* buffer for the display */

/* some aspects of the protocol are pretty timing sensitive... */
%if %HardwareGroupLDD='yes'
static volatile bool %'ModuleName'%.DataReceivedFlag = FALSE;
%endif
#define %'ModuleName'%.BIT_WRITECMD   (0x80)
#define %'ModuleName'%.BIT_VCOM       (0x40)
#define %'ModuleName'%.BIT_CLEAR      (0x20)
#define %'ModuleName'%.TOGGLE_VCOM    do { %'ModuleName'%.sharpmem_vcom = %'ModuleName'%.sharpmem_vcom ? 0x00 : %'ModuleName'%.BIT_VCOM; } while(0);

static uint8_t %'ModuleName'%.sharpmem_vcom;

static uint8_t %'ModuleName'%.RevertBits(uint8_t data) {
  uint8_t tmp, i;

  /* revert bits */
  tmp = 0;
  for(i=0;;i++) {
    if (data&1) {
      tmp |= 0x1;
    }
    if (i==7) {
      break;
    }
    tmp <<= 1;
    data >>= 1;
  }
  return tmp;
}
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG WriteData
static void WriteData(uint8_t data);
%-INTERNAL_LOC_METHOD_END WriteData
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-INTERNAL_METHOD_BEG WriteData
%define! Pardata
%include Common\GeneralInternalGlobal.inc (WriteData)
static void WriteData(uint8_t data)
{
%if defined(SPILDD)
  %'ModuleName'%.DataReceivedFlag = FALSE;
  %@SPILDD@'ModuleName'%.ReceiveBlock(%@SPILDD@'ModuleName'%.DeviceData, &dummy, 1);
  %@SPILDD@'ModuleName'%.SendBlock(%@SPILDD@'ModuleName'%.DeviceData, &data, 1);
  while (!%'ModuleName'%.DataReceivedFlag) {};  /* Wait until data block is transmitted/received */
%elif defined(SPI)
  (void)%@SPI@'ModuleName'%.SendChar(data);                      %>40/* send data byte */
%endif
}

%-INTERNAL_METHOD_END WriteData
%-************************************************************************************************************
%-BW_METHOD_BEGIN ToggleVCOM
%ifdef ToggleVCOM
%include Common\SharpMemDisplayToggleVCOM.Inc
void %'ModuleName'%.%ToggleVCOM(void)
{
 /* send toggle VCOM command */
  %@CS@'ModuleName'%.SetVal();
  WriteData(%'ModuleName'%.sharpmem_vcom);
  WriteData(0x00); /* 8bit trailer */
  %'ModuleName'%.TOGGLE_VCOM;
  %@CS@'ModuleName'%.ClrVal();
}

%endif %- ToggleVCOM
%-BW_METHOD_END ToggleVCOM
%-************************************************************************************************************
%-BW_METHOD_BEGIN Clear
%ifdef Clear
%include Common\SharpMemDisplayClear.Inc
void %'ModuleName'%.%Clear(void)
{
 /* send clear command */
  %@CS@'ModuleName'%.SetVal();
  WriteData(%'ModuleName'%.sharpmem_vcom | %'ModuleName'%.BIT_CLEAR);
  WriteData(0x00);
  %'ModuleName'%.TOGGLE_VCOM;
  %@CS@'ModuleName'%.ClrVal();
}

%endif %- Clear
%-BW_METHOD_END Clear
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\SharpMemDisplayInit.Inc
void %'ModuleName'%.%Init(void)
{
  /* LCD expects LSB first (Send MSB first: no)!
   * Data is valid on clock rising edge and shifted on clock falling edge
   * Clock Idle Polarity: Low
   */
  %@CS@'ModuleName'%.ClrVal(); /* disable device */
%if defined(SPI)
  %@SPI@'ModuleName'%.SetShiftClockPolarity(0); /* 0: falling edge: data is sampled at rising edge and shifted at falling edge */
  %@SPI@'ModuleName'%.SetIdleClockPolarity(0); /* 0: low idle polarity */
%else
  #error "NYI"
%endif
  /* Set the vcom bit to a defined state */
  %'ModuleName'%.sharpmem_vcom = %'ModuleName'%.BIT_VCOM;
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateRegion
%ifdef UpdateRegion
%define! Parx
%define! Pary
%define! Parw
%define! Parh
%include Common\SharpMemDisplayUpdateRegion.Inc
void %'ModuleName'%.%UpdateRegion(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h)
{
  (void)x; (void)y; (void)w; (void)h;
  %'ModuleName'%.%UpdateFull();                                  %>40 /* NYI, we simply refresh everything :-( */
}

%endif %- UpdateRegion
%-BW_METHOD_END UpdateRegion
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateLine
%ifdef UpdateLine
%define! Parline
%define! PardataP
%include Common\SharpMemDisplayUpdateLine.Inc
void %'ModuleName'%.%UpdateLine(uint8_t line, uint8_t *dataP)
{
  int i;

  /* Send the write command */
  %@CS@'ModuleName'%.SetVal();
  WriteData(%'ModuleName'%.BIT_WRITECMD | %'ModuleName'%.sharpmem_vcom);
  %'ModuleName'%.TOGGLE_VCOM;

  /* Send the address for line */
  WriteData(%'ModuleName'%.RevertBits(line+1)); /* line starts with 1 */

  /* Send data byte for selected line */
  for (i=0; i<(%'ModuleName'%.HW_WIDTH/8); i++) {
    WriteData(*dataP);
    dataP++;
  }
  /* Send trailing 16 bits  */
  WriteData(0x00);
  WriteData(0x00);
  %@CS@'ModuleName'%.ClrVal();
}

%endif %- UpdateLine
%-BW_METHOD_END UpdateLine
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateFull
%ifdef UpdateFull
%include Common\SharpMemDisplayUpdateFull.Inc
void %'ModuleName'%.%UpdateFull(void)
{
  uint16_t numBytes = sizeof(%'ModuleName'_DisplayBuf);
  int i, currentline, oldline;
  uint8_t *data = (uint8_t*)%'ModuleName'_DisplayBuf;

  /* Send the write command */
  %@CS@'ModuleName'%.SetVal();
  WriteData(%'ModuleName'%.BIT_WRITECMD | %'ModuleName'%.sharpmem_vcom);
  %'ModuleName'%.TOGGLE_VCOM;

  /* Send the address for line 1 */
  oldline = currentline = 1;
  WriteData(%'ModuleName'%.RevertBits(currentline));

  /* Send image buffer */
  for (i=0; i<numBytes; i++) {
    WriteData(*data);
    data++;
    currentline = ((i+1)/(%'ModuleName'%.HW_WIDTH/8)) + 1;
    if(currentline != oldline) {
      WriteData(0x00); /* send 8 traling bits to finish current line */
      if (currentline <= %'ModuleName'%.HW_HEIGHT) {
        /* send new line number */
        WriteData(%'ModuleName'%.RevertBits(currentline));
      }
      oldline = currentline;
    }
  }
  /* Send another trailing 8 bits for the last line */
  WriteData(0x00);
  %@CS@'ModuleName'%.ClrVal();
}

%endif %- UpdateFull
%-BW_METHOD_END UpdateFull
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetWindow
%ifdef SetWindow
%define! Parx0
%define! Parx1
%define! Pary0
%define! Pary1
%include Common\SharpMemDisplaySetWindow.Inc
void %'ModuleName'%.%SetWindow(%'ModuleName'_PixelDim x0, %'ModuleName'_PixelDim x1, %'ModuleName'_PixelDim y0, %'ModuleName'_PixelDim y1)
{
  /* the display does not implement the window method, so this function shall never be called */
  (void)x0; (void)x1; (void)y0; (void)y1; /* to avoid compiler warnings */
}

%endif %- SetWindow
%-BW_METHOD_END SetWindow
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDisplayOrientation
%ifdef GetDisplayOrientation
%define! RetVal
%include Common\SharpMemDisplayGetDisplayOrientation.Inc
%'ModuleName'_DisplayOrientation %'ModuleName'%.%GetDisplayOrientation(void)
{
  return %'ModuleName'%.ORIENTATION_LANDSCAPE;                   %>40/* Landscape mode */
}

%endif %- GetDisplayOrientation
%-BW_METHOD_END GetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetWidth
%ifdef GetWidth
%define! RetVal
%include Common\SharpMemDisplayGetWidth.Inc
/*
%'ModuleName'_PixelDim %'ModuleName'%.%GetWidth(void)
{
  *** Method is implemented as macro in %'ModuleName'.h
}
*/

%endif %- GetWidth
%-BW_METHOD_END GetWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetHeight
%ifdef GetHeight
%define! RetVal
%include Common\SharpMemDisplayGetHeight.Inc
/*
%'ModuleName'_PixelDim %'ModuleName'%.%GetHeight(void)
{
  *** Method is implemented as macro in %'ModuleName'.h
}
*/

%endif %- GetHeight
%-BW_METHOD_END GetHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLongerSide
%ifdef GetLongerSide
%define! RetVal
%include Common\SharpMemDisplayGetLongerSide.Inc
/*
%'ModuleName'_PixelDim %'ModuleName'%.%GetLongerSide(void)
{
  *** Method is implemented as macro in %'ModuleName'.h
}
*/

%endif %- GetLongerSide
%-BW_METHOD_END GetLongerSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetShorterSide
%ifdef GetShorterSide
%define! RetVal
%include Common\SharpMemDisplayGetShorterSide.Inc
/*
%'ModuleName'_PixelDim %'ModuleName'%.%GetShorterSide(void)
{
  *** Method is implemented as macro in %'ModuleName'.h
}
*/

%endif %- GetShorterSide
%-BW_METHOD_END GetShorterSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDisplayOrientation
%ifdef SetDisplayOrientation
%define! ParnewOrientation
%include Common\SharpMemDisplaySetDisplayOrientation.Inc
void %'ModuleName'%.%SetDisplayOrientation(%'ModuleName'_DisplayOrientation newOrientation)
{
  (void)newOrientation; /* setting the display orientation is not implemented yet */
}

%endif %- SetDisplayOrientation
%-BW_METHOD_END SetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLCD
%ifdef GetLCD
%include Common\SharpMemDisplayGetLCD.Inc
void %'ModuleName'%.%GetLCD(void)
{
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
}

%endif %- GetLCD
%-BW_METHOD_END GetLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN GiveLCD
%ifdef GiveLCD
%include Common\SharpMemDisplayGiveLCD.Inc
void %'ModuleName'%.%GiveLCD(void)
{
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
}

%endif %- GiveLCD
%-BW_METHOD_END GiveLCD
%-INHERITED_EVENT_BEGIN SPILDD OnBlockReceived
%if defined(SPILDD) & defined(@SPILDD@OnBlockReceived)
%include Common\GeneralInternal.inc (OnBlockReceived)
void %@SPILDD@OnBlockReceived(LDD_TUserData *UserDataPtr)
{
  %'ModuleName'%.DataReceivedFlag = TRUE;
  /* Calling inherited event */
  %ifdef OnBlockReceived
     %OnBlockReceived(UserDataPtr);
  %endif OnBlockReceived
}

%endif %- @SPILDD@OnBlockReceived
%-INHERITED_EVENT_END SPILDD OnBlockReceived
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\SharpMemDisplayDeinit.Inc
void %'ModuleName'%.%Deinit(void)
{
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN PutPixel
%ifdef PutPixel
%define! Parx
%define! Pary
%define! Parcolor
%include Common\SharpMemDisplayPutPixel.Inc
void %'ModuleName'%.%PutPixel(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelColor color)
{
  uint8_t val;

#if 0 /* done at the the higher level */
  if (x>=%'ModuleName'%.%GetWidth() || y>=%'ModuleName'%.%GetHeight()) {
    return; /* error case */
  }
#endif
  val = %'ModuleName'%.DisplayBuf[y/8][x]; /* get current value */
  if (color!=0) {
    val |= (1<<(y%%8)); /* set pixel */
  } else {
    val &= ~(1<<(y%%8)); /* clear pixel */
  }
  %'ModuleName'%.DisplayBuf[y/8][x] = val; /* store value */
}

%endif %- PutPixel
%-BW_METHOD_END PutPixel
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnBlockReceived
%ifdef OnBlockReceived
%IMPLEMENTATION OnBlockReceived
%define! ParUserDataPtr
%include Common\SharpMemDisplayOnBlockReceived.Inc
void %OnBlockReceived(LDD_TUserData *UserDataPtr)
{
  /* Write your code here ... */
}

%endif %- OnBlockReceived
%-BW_METHOD_END OnBlockReceived
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%if %InitializeOnInit='yes'
  %'ModuleName'%.Init();
%endif
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
