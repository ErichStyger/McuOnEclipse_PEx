%-Driver pre-generated by the Component Development Environment
%-      Copyright: 1997 - 2014 Freescale Semiconductor, Inc. All Rights Reserved. 
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END 
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Development Environment will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  
%define DriverVersion 01.00
%define DriverDate    09/19/2014
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%ifdef OW
	%ifdef @OW@OnProgramEvent
		%define! Description_%@OW@OnProgramEvent  The event services the event of the inherited component and eventually invokes other events.
		%endif %- @OW@OnProgramEvent
%endif %- OW
%ifdef OW
	%ifdef @OW@OnError
		%define! Description_%@OW@OnError  The event services the event of the inherited component and eventually invokes other events.
		%endif %- @OW@OnError
%endif %- OW
%-BW_INTERN_COMMENTS_END
%-
%define CDEversion Community 
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
  %-
%-
%INTERFACE
%define! Settings Common\DS18B20Settings.inc
%define! Abstract Common\DS18B20Abstract.inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ... 
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger; 
%-
%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN StartConversion
%ifdef StartConversion
%include Common\DS18B20StartConversion.inc
bool %'ModuleName'%.%StartConversion(uint8_t sensor_index);
%define! Parsensor_index
%define!  RetVal
%endif  %-StartConversion
%-BW_METHOD_END StartConversion

%-*****************************************************************************************************
%-BW_METHOD_BEGIN SetResolution
%ifdef SetResolution
%include Common\DS18B20SetResolution.inc
bool %'ModuleName'%.%SetResolution(uint8_t config_bits, uint8_t sensor_index);
%define! Parconfig_bits
%define! Parsensor_index
%define!  RetVal
%endif  %-SetResolution
%-BW_METHOD_END SetResolution

%-*****************************************************************************************************
%-BW_METHOD_BEGIN get_data
%ifdef get_data
%include Common\DS18B20get_data.inc
void %'ModuleName'%.%get_data();
%endif  %-get_data
%-BW_METHOD_END get_data

%-*****************************************************************************************************
%-BW_METHOD_BEGIN ConvertAll
%ifdef ConvertAll
%include Common\DS18B20ConvertAll.inc
bool %'ModuleName'%.%ConvertAll();
%define!  RetVal
%endif  %-ConvertAll
%-BW_METHOD_END ConvertAll

%-*****************************************************************************************************
%-BW_METHOD_BEGIN ReadTemperature
%ifdef ReadTemperature
%include Common\DS18B20ReadTemperature.inc
bool %'ModuleName'%.%ReadTemperature(uint8_t sensor_index);
%define! Parsensor_index
%define!  RetVal
%endif  %-ReadTemperature
%-BW_METHOD_END ReadTemperature

%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetTemperature
%ifdef GetTemperature
%include Common\DS18B20GetTemperature.inc
int32_t %'ModuleName'%.%GetTemperature(uint8_t sensor_index);
%define! Parsensor_index
%define!  RetVal
%endif  %-GetTemperature
%-BW_METHOD_END GetTemperature

%-*****************************************************************************************************


%-*****************************************************************************************************
%-BW_METHOD_BEGIN isBusy
%ifdef isBusy
%include Common\DS18B20isBusy.inc
bool %'ModuleName'%.%isBusy();
%define!  RetVal
%endif  %-isBusy
%-BW_METHOD_END isBusy

%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetRomCode
%ifdef GetRomCode
%include Common\DS18B20GetRomCode.inc
char* %'ModuleName'%.%GetRomCode(uint8_t sensor_index);
%define! Parsensor_index
%define!  RetVal
%endif  %-GetRomCode
%-BW_METHOD_END GetRomCode

%-*****************************************************************************************************
%-BW_METHOD_BEGIN ReadRom
%ifdef ReadRom
%include Common\DS18B20ReadRom.inc
bool %'ModuleName'%.%ReadRom(uint8_t sensor_index);
%define! Parsensor_index
%define!  RetVal
%endif  %-ReadRom
%-BW_METHOD_END ReadRom

%-INHERITED_EVENT_BEGIN OW OnError
%ifdef @OW@OnError
void %@OW@OnError(%@OW@'ModuleName'%.Error error);

%endif %- @OW@OnError
%-INHERITED_EVENT_END OW OnError

%-INHERITED_EVENT_BEGIN OW OnProgramEvent
%ifdef @OW@OnProgramEvent
void %@OW@OnProgramEvent(int8_t key);

%endif %- @OW@OnProgramEvent
%-INHERITED_EVENT_END OW OnProgramEvent

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\DS18B20Init.inc
void %'ModuleName'%.%Init();
%endif  %-Init
%-BW_METHOD_END Init

%-************************************************************************************************************
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif 
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnAllConverted
%ifdef OnAllConverted
%INTERFACE OnAllConverted
void %OnAllConverted();
%include Common\DS18B20OnAllConverted.inc
%endif %-OnAllConverted
%-BW_METHOD_END OnAllConverted
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnRomRead
%ifdef OnRomRead
%INTERFACE OnRomRead
%if %get(connMultiple, Bool) = 'yes'
void %OnRomRead(uint8_t sensor_index, uint8_t *rom_code);
%else
void %OnRomRead(uint8_t *rom_code);
%endif
%include Common\DS18B20OnRomRead.inc
%endif %-OnRomRead
%-BW_METHOD_END OnRomRead
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnTemperatureGet
%ifdef OnTemperatureGet
%INTERFACE OnTemperatureGet
%if %get(connMultiple, Bool) = 'yes'
void %OnTemperatureGet(uint8_t sensor_index, int32_t temperature);
%else
void %OnTemperatureGet(int32_t temperature);
%endif
%include Common\DS18B20OnTemperatureGet.inc
%endif %-OnTemperatureGet
%-BW_METHOD_END OnTemperatureGet
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnError
%ifdef OnError
%INTERFACE OnError
void %OnError(%@OW@'ModuleName'%.Error error);
%include Common\DS18B20OnError.inc
%endif %-OnError
%-BW_METHOD_END OnError
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\DS18B20Settings.inc
%define! Abstract Common\DS18B20Abstract.inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
#include <string.h>
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here 
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
//Events
enum {
	EV_NOTHING,
	EV_INIT,
	EV_NO_BUSY,
	EV_READ_ROM,
	EV_READ_TEMP,
	EV_READ_TEMP_ALL
};

//Rom commands
#define RC_READ_ROM          0x33
#define RC_MATCH_ROM         0x55
#define RC_SKIP_ROM          0xCC
#define RC_RELEASE           0xFF

//Function commands
#define FC_CONVERT_T         0x44
#define FC_WRITE_SCRATCHPAD  0x4E
#define FC_READ_SCRATCHPAD   0xBE
#define FC_COPY_SCRATCHPAD   0x48

typedef struct {
	int32 Temperature;
	uint8 Rom[8];
	union {
		uint8 ConfigByte;
		struct {
			unsigned :5;
			unsigned Resolution:2;
		};
	};
} Sensor_t;

struct {
	int32 Value;
	uint8 Data[10];
%if %get(connMultiple, Bool) = 'yes'
	uint8 WorkSensor;
	unsigned MaxResolution:2;
%endif
	unsigned Busy:1;
} Device;

static uint16 ConvTime[4] = {94, 188, 375, 750};

%if %get(connMultiple, Bool) = 'yes'
Sensor_t Sensor[%get(deviceCount, Value)];
%else
Sensor_t Sensor;
%endif

%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN StartConversion
%ifdef StartConversion
%define! Parsensor_index
%define! RetVal
%include Common\DS18B20StartConversion.inc
bool %'ModuleName'%.%StartConversion(uint8_t sensor_index)
{
%CODE_BEGIN
	if(Device.Busy) return FALSE;
	Device.Busy = TRUE;
	%@OW@'ModuleName'%.SendReset();
%if %get(connMultiple, Bool) = 'yes'
	%@OW@'ModuleName'%.SendByte(RC_MATCH_ROM);
	%@OW@'ModuleName'%.SendBytes(Sensor[sensor_index].Rom, 8);
	%@OW@'ModuleName'%.SendByte(FC_CONVERT_T);
%if %get(readAuto, Bool) = 'yes'
	%@OW@'ModuleName'%.Waitms(EV_NOTHING, ConvTime[Sensor[sensor_index].Resolution]);
	%@OW@'ModuleName'%.SendReset();
	%@OW@'ModuleName'%.SendByte(RC_MATCH_ROM);
	%@OW@'ModuleName'%.SendBytes(Sensor[sensor_index].Rom, 8);
	%@OW@'ModuleName'%.SendByte(FC_READ_SCRATCHPAD);
	%@OW@'ModuleName'%.Receive(9);
	%@OW@'ModuleName'%.SendByte(0xFF);
	%@OW@'ModuleName'%.ProgramEvent(EV_READ_TEMP);
%else
	%@OW@'ModuleName'%.ProgramEvent(EV_NO_BUSY);
%endif
%else
	%@OW@'ModuleName'%.SendByte(RC_SKIP_ROM);
	%@OW@'ModuleName'%.SendByte(FC_CONVERT_T);
%if %get(readAuto, Bool) = 'yes'
	%@OW@'ModuleName'%.Waitms(EV_NOTHING, ConvTime[Sensor.Resolution]);
	%@OW@'ModuleName'%.SendReset();
	%@OW@'ModuleName'%.SendByte(RC_SKIP_ROM);
	%@OW@'ModuleName'%.SendByte(FC_READ_SCRATCHPAD);
	%@OW@'ModuleName'%.Receive(9);
	%@OW@'ModuleName'%.SendByte(0xFF);
	%@OW@'ModuleName'%.ProgramEvent(EV_READ_TEMP);
%else
	%@OW@'ModuleName'%.ProgramEvent(EV_NO_BUSY);
%endif
%endif
	return TRUE;
%CODE_END
}
%endif %-StartConversion
%-BW_METHOD_END StartConversion

%-*****************************************************************************************************
%-BW_METHOD_BEGIN SetResolution
%ifdef SetResolution
%define! Parconfig_bits
%define! Parsensor_index
%define! RetVal
%include Common\DS18B20SetResolution.inc
bool %'ModuleName'%.%SetResolution(uint8_t config_bits, uint8_t sensor_index)
{
%CODE_BEGIN
	if(Device.Busy) return FALSE;
	Device.Busy = TRUE;
	%@OW@'ModuleName'%.SendReset();
%if %get(connMultiple, Bool) = 'yes'
	Device.WorkSensor = sensor_index;
	Sensor[sensor_index].ConfigByte = 0x1F;
	Sensor[sensor_index].Resolution = config_bits;
	%@OW@'ModuleName'%.SendByte(RC_MATCH_ROM);
	%@OW@'ModuleName'%.SendBytes(Sensor[sensor_index].Rom, 8);
	%@OW@'ModuleName'%.SendByte(FC_WRITE_SCRATCHPAD);
	%@OW@'ModuleName'%.SendByte(0x01);
	%@OW@'ModuleName'%.SendByte(0x10);
	%@OW@'ModuleName'%.SendByte(Sensor[sensor_index].ConfigByte);
%else
	Sensor.ConfigByte = 0x1F;
	Sensor.Resolution = config_bits;
	%@OW@'ModuleName'%.SendByte(RC_SKIP_ROM);
	%@OW@'ModuleName'%.SendByte(FC_WRITE_SCRATCHPAD);
	%@OW@'ModuleName'%.SendByte(0x01);
	%@OW@'ModuleName'%.SendByte(0x10);
	%@OW@'ModuleName'%.SendByte(Sensor.ConfigByte);
%endif
	%@OW@'ModuleName'%.ProgramEvent(EV_NO_BUSY);
	return TRUE;
%CODE_END
}
%endif %-SetResolution
%-BW_METHOD_END SetResolution

%-*****************************************************************************************************
%-BW_METHOD_BEGIN get_data
%ifdef get_data
%include Common\DS18B20get_data.inc
void %'ModuleName'%.%get_data()
{
%CODE_BEGIN
	uint8 *p, i;
	int16 *val;
	p = Device.Data;
	for(i=0;i<9;i++) {
		OW1_GetByte(p);
		// *p = Input_Get();
		p++;
	}
	val = (int16 *) Device.Data;
	Device.Value = *val;
	Device.Value *= 10000;
	Device.Value /= 16;
%if %get(connMultiple, Bool) = 'yes'
	Sensor[Device.WorkSensor].Temperature = Device.Value;
	Sensor[Device.WorkSensor].ConfigByte = Device.Data[2];
%else
	Sensor.Temperature = Device.Value;
	Sensor.ConfigByte = Device.Data[2];
%endif
%CODE_END
}
%endif %-get_data
%-BW_METHOD_END get_data

%-*****************************************************************************************************
%-BW_METHOD_BEGIN ConvertAll
%ifdef ConvertAll
%define! RetVal
%include Common\DS18B20ConvertAll.inc
bool %'ModuleName'%.%ConvertAll()
{
%CODE_BEGIN
	if(Device.Busy) return FALSE;
	%@OW@'ModuleName'%.SendReset();
	%@OW@'ModuleName'%.SendByte(RC_SKIP_ROM);
	%@OW@'ModuleName'%.SendByte(FC_CONVERT_T);
%if %get(readAuto, Bool) = 'yes'
	Device.Busy = TRUE;
	Device.WorkSensor = 0;
	%@OW@'ModuleName'%.Waitms(EV_READ_TEMP_ALL, ConvTime[Sensor[0].Resolution]);
	%@OW@'ModuleName'%.SendReset();
	%@OW@'ModuleName'%.SendByte(RC_MATCH_ROM);
	%@OW@'ModuleName'%.SendBytes(Sensor[0].Rom, 8);
	%@OW@'ModuleName'%.SendByte(FC_READ_SCRATCHPAD);
	%@OW@'ModuleName'%.Receive(9);
	%@OW@'ModuleName'%.SendByte(0xFF);
	%@OW@'ModuleName'%.ProgramEvent(EV_READ_TEMP_ALL);
	return TRUE;
%endif
%CODE_END
}
%endif %-ConvertAll
%-BW_METHOD_END ConvertAll

%-*****************************************************************************************************
%-BW_METHOD_BEGIN ReadTemperature
%ifdef ReadTemperature
%define! Parsensor_index
%define! RetVal
%include Common\DS18B20ReadTemperature.inc
bool %'ModuleName'%.%ReadTemperature(uint8_t sensor_index)
{
%CODE_BEGIN
	if(Device.Busy) return FALSE;
	Device.Busy = TRUE;
	%@OW@'ModuleName'%.SendReset();
%if %get(connMultiple, Bool) = 'yes'
	%@OW@'ModuleName'%.SendByte(RC_MATCH_ROM);
	%@OW@'ModuleName'%.SendBytes(Sensor[sensor_index].Rom, 8);
	%@OW@'ModuleName'%.SendByte(FC_READ_SCRATCHPAD);
	%@OW@'ModuleName'%.Receive(9);
	%@OW@'ModuleName'%.SendByte(0xFF);
	%@OW@'ModuleName'%.ProgramEvent(EV_READ_TEMP);
%else
	%@OW@'ModuleName'%.SendByte(RC_SKIP_ROM);
	%@OW@'ModuleName'%.SendByte(FC_READ_SCRATCHPAD);
	%@OW@'ModuleName'%.Receive(9);
	%@OW@'ModuleName'%.SendByte(0xFF);
	%@OW@'ModuleName'%.ProgramEvent(EV_READ_TEMP);
%endif
	return TRUE;
%CODE_END
}
%endif %-ReadTemperature
%-BW_METHOD_END ReadTemperature

%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetTemperature
%ifdef GetTemperature
%define! Parsensor_index
%define! RetVal
%include Common\DS18B20GetTemperature.inc
int32_t %'ModuleName'%.%GetTemperature(uint8_t sensor_index)
{
%CODE_BEGIN
%if %get(connMultiple, Bool) = 'yes'
	return Sensor[sensor_index].Temperature;
%else
	return Sensor.Temperature;
%endif
%CODE_END
}
%endif %-GetTemperature
%-BW_METHOD_END GetTemperature

%-*****************************************************************************************************


%-*****************************************************************************************************
%-BW_METHOD_BEGIN isBusy
%ifdef isBusy
%define! RetVal
%include Common\DS18B20isBusy.inc
bool %'ModuleName'%.%isBusy()
{
%CODE_BEGIN
	return Device.Busy;
%CODE_END
}
%endif %-isBusy
%-BW_METHOD_END isBusy

%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetRomCode
%ifdef GetRomCode
%define! Parsensor_index
%define! RetVal
%include Common\DS18B20GetRomCode.inc
char* %'ModuleName'%.%GetRomCode(uint8_t sensor_index)
{
%CODE_BEGIN
%if %get(connMultiple, Bool) = 'yes'
	return Sensor[sensor_index].Rom;
%else
	return Sensor.Rom;
%endif
%CODE_END
}
%endif %-GetRomCode
%-BW_METHOD_END GetRomCode

%-*****************************************************************************************************
%-BW_METHOD_BEGIN ReadRom
%ifdef ReadRom
%define! Parsensor_index
%define! RetVal
%include Common\DS18B20ReadRom.inc
bool %'ModuleName'%.%ReadRom(uint8_t sensor_index)
{
%CODE_BEGIN
	if(Device.Busy) return FALSE;
	Device.Busy = TRUE;
%if %get(connMultiple, Bool) = 'yes'
	Device.WorkSensor = sensor_index;
%endif
	%@OW@'ModuleName'%.SendReset();
	%@OW@'ModuleName'%.SendByte(RC_READ_ROM);
	%@OW@'ModuleName'%.Receive(8);
	%@OW@'ModuleName'%.SendByte(0xFF);
	%@OW@'ModuleName'%.ProgramEvent(EV_READ_ROM);
	return TRUE;
%CODE_END
}
%endif %-ReadRom
%-BW_METHOD_END ReadRom

%-INHERITED_EVENT_BEGIN OW OnError
%ifdef @OW@OnError
%include Common\GeneralInternal.inc (OnError)
void %@OW@OnError(%@OW@'ModuleName'%.Error error)
{
%CODE_BEGIN
%ifdef OnError
	%OnError(error);
%endif
%CODE_END
}
%endif %- @OW@OnError
%-INHERITED_EVENT_END OW OnError

%-INHERITED_EVENT_BEGIN OW OnProgramEvent
%ifdef @OW@OnProgramEvent
%include Common\GeneralInternal.inc (OnProgramEvent)
void %@OW@OnProgramEvent(int8_t key)
{
%CODE_BEGIN
	uint8 *p, i;
	switch(key) {
		case EV_NO_BUSY:
			Device.Busy = FALSE;
			break;
		case EV_READ_ROM:
%if %get(connMultiple, Bool) = 'yes'
			p = Sensor[Device.WorkSensor].Rom;
%else
			p = Sensor.Rom;
%endif
			for(i=0;i<8;i++) {
				*p = Input_Get();
				p++;
			}
			Device.Busy = FALSE;
%ifdef OnRomRead
	%if %get(connMultiple, Bool) = 'yes'
			%OnRomRead(Device.WorkSensor, Sensor[Device.WorkSensor].Rom);
	%else
			%OnRomRead(Sensor.Rom);
	%endif
%endif
			break;
		case EV_READ_TEMP:
			%'ModuleName'%.get_data();
			Device.Busy = FALSE;
%ifdef OnTemperatureGet
	%if %get(connMultiple, Bool) = 'yes'
			%OnTemperatureGet(Device.WorkSensor, Sensor[Device.WorkSensor].Temperature);
	%else
			%OnTemperatureGet(Sensor.Temperature);
	%endif
%endif
			break;
%if %get(connMultiple, Bool) = 'yes'
%if %get(readAuto, Bool) = 'yes'
		case EV_READ_TEMP_ALL:
			%'ModuleName'%.get_data();
			Device.WorkSensor++;
			if(Device.WorkSensor == %get(deviceCount, Value)) {
				Device.Busy = FALSE;			
%ifdef OnAllConverted
				%OnAllConverted();
%endif
			} else {
				%@OW@'ModuleName'%.Waitms(EV_READ_TEMP_ALL, ConvTime[Sensor[Device.WorkSensor].Resolution]);
				%@OW@'ModuleName'%.SendReset();
				%@OW@'ModuleName'%.SendByte(RC_MATCH_ROM);
				%@OW@'ModuleName'%.SendBytes(Sensor[Device.WorkSensor].Rom, 8);
				%@OW@'ModuleName'%.SendByte(FC_READ_SCRATCHPAD);
				%@OW@'ModuleName'%.Receive(9);
				%@OW@'ModuleName'%.SendByte(0xFF);
				%@OW@'ModuleName'%.ProgramEvent(EV_READ_TEMP_ALL);
			}
			break;
%endif
%endif
	}
%CODE_END
}
%endif %- @OW@OnProgramEvent
%-INHERITED_EVENT_END OW OnProgramEvent

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\DS18B20Init.inc
void %'ModuleName'%.%Init()
{
%CODE_BEGIN
%if %get(connMultiple, Bool) = 'yes'
	uint8 i;
	for(i=0;i<%get(deviceCount, Value);i++) {
		Sensor[i].Resolution = 0b11;
	}
%for i from [0..%EXPR(%get(deviceCount, Value)-1)]
	memcpy(Sensor[%i].Rom, "\x%#b%get(rom0%i, Value)\x%#b%get(rom1%i, Value)\x%#b%get(rom2%i, Value)\x%#b%get(rom3%i, Value)\x%#b%get(rom4%i, Value)\x%#b%get(rom5%i, Value)\x%#b%get(rom6%i, Value)\x%#b%get(rom7%i, Value)", 8);
%endfor
%else
	Sensor.Resolution = 0b11;
%endif
	Device.Value = 8500000;
%CODE_END
}
%endif %-Init
%-BW_METHOD_END Init

%-************************************************************************************************************
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnAllConverted
%ifdef OnAllConverted
%IMPLEMENTATION OnAllConverted
%include Common\DS18B20OnAllConverted.inc
void %OnAllConverted()
{
%CODE_BEGIN
/******Write your code here*******/
%CODE_END
}
%endif %-OnAllConverted
%-BW_METHOD_END OnAllConverted

%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnRomRead
%ifdef OnRomRead
%IMPLEMENTATION OnRomRead
%define! Parsensor_index
%define! Parrom_code
%include Common\DS18B20OnRomRead.inc
%if %get(connMultiple, Bool) = 'yes'
void %OnRomRead(uint8_t sensor_index, uint8_t *rom_code)
%else
void %OnRomRead(uint8_t *rom_code)
%endif
{
%CODE_BEGIN
	/* Write your code here ... */
%CODE_END
}
%endif %-OnRomRead
%-BW_METHOD_END OnRomRead

%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnTemperatureGet
%ifdef OnTemperatureGet
%IMPLEMENTATION OnTemperatureGet
%define! Parsensor_index
%define! Partemperature
%include Common\DS18B20OnTemperatureGet.inc
%if %get(connMultiple, Bool) = 'yes'
void %OnTemperatureGet(uint8_t sensor_index, int32_t temperature)
%else
void %OnTemperatureGet(int32_t temperature)
%endif
{
%CODE_BEGIN
	/* Write your code here ... */
%CODE_END
}
%endif %-OnTemperatureGet
%-BW_METHOD_END OnTemperatureGet

%-*****************************************************************************************************
%-BW_METHOD_BEGIN OnError
%ifdef OnError
%IMPLEMENTATION OnError
%define! Parerror
%include Common\DS18B20OnError.inc
void %OnError(%@OW@'ModuleName'%.Error error)
{
%CODE_BEGIN
	/* Write your code here ... */
%CODE_END
}
%endif %-OnError
%-BW_METHOD_END OnError

%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
