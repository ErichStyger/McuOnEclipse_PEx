%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    01.08.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_CheckCallbacks Goes through the list of triggers and returns TRUE in case we had to call a callback
%define! Description_Init Initializes the module.
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\TriggerSettings.Inc
%define! Abstract Common\TriggerAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

#define %'ModuleName'%.TICK_PERIOD_MS  %'ModuleName'%.CONFIG_TICK_PERIOD_MS  /* trigger period in milli-seconds */

/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif

%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

%include sw\CommonSupport.prg

#ifdef __cplusplus
extern "C" {
#endif

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTrigger
%ifdef AddTrigger
void %'ModuleName'%.%AddTrigger(uint8_t trigger, uint16_t incTicks, void (*callback)(void));
%define! Partrigger
%define! Parcallback
%define! ParincTicks
%include Common\TriggerAddTrigger.Inc

%endif %- AddTrigger
%-BW_METHOD_END AddTrigger
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTick
%ifdef AddTick
void %'ModuleName'%.%AddTick(void);
%include Common\TriggerAddTick.Inc

%endif %- AddTick
%-BW_METHOD_END AddTick
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Init
void %'ModuleName'%.Init(void);
%include Common\GeneralInternal.inc (Init)

%-INTERNAL_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN AnyTriggerPending
%ifdef AnyTriggerPending
bool %'ModuleName'%.%AnyTriggerPending(void);
%define! RetVal
%include Common\TriggerAnyTriggerPending.Inc

%endif %- AnyTriggerPending
%-BW_METHOD_END AnyTriggerPending
%-************************************************************************************************************
%-BW_METHOD_BEGIN TriggerPending
%ifdef TriggerPending
bool %'ModuleName'%.%TriggerPending(uint8_t trigger);
%define! Partrigger
%define! RetVal
%include Common\TriggerTriggerPending.Inc

%endif %- TriggerPending
%-BW_METHOD_END TriggerPending
#ifdef __cplusplus
}  /* extern "C" */
#endif
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\TriggerSettings.Inc
%define! Abstract Common\TriggerAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#include <stddef.h> /* for NULL */
%----------------
%if defined(OperatingSystemId)
%- Include RTOS adapter file so we can use RTOS functions (RTOSAdap_genCriticalSectionBegin(), RTOSAdap_genCriticalSectionEnd())
%include sw\RTOSAdaptor\%'OperatingSystemId'_RTOSAdaptor.prg
%endif
%if defined(OperatingSystemId) & OperatingSystemId = 'FreeRTOS'
%- need this for the RTOS adapter, if we have an RTOS and disabled 'RTOS' in the settings
  #if %@sdk@'ModuleName'%.CONFIG_CPU_IS_ESP32
    #include "freertos/FreeRTOS.h" /* for vTaskDelay() */
    #include "freertos/task.h"
  #else
    #include "FreeRTOS.h"
    #include "task.h"
  #endif
%endif
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
/*!
  \brief Descriptor defining a trigger. Triggers are used set as 'reminders' for the future.
*/
typedef struct TriggerDesc {
  uint16_t triggerTime;       %>%CTAB /*!< trigger 'time' in ticks */
  void (*callback)(void); %>%CTAB /*!< callback function */
} TriggerDesc;

static TriggerDesc TriggerList[%TriggerNameListLines]; %>%CTAB /*!< Array of triggers */

#ifndef TRUE
  #define TRUE 1
#endif
#ifndef FALSE
  #define FALSE 0
#endif
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG CheckCallbacks
static bool CheckCallbacks(void);
%-INTERNAL_LOC_METHOD_END CheckCallbacks
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTrigger
%ifdef AddTrigger
%define! Partrigger
%define! Parcallback
%define! ParincTicks
%include Common\TriggerAddTrigger.Inc
void %'ModuleName'%.%AddTrigger(uint8_t trigger, uint16_t incTicks, void (*callback)(void))
{
  %@CriticalSection@'ModuleName'%.CriticalVariable();

  /* method can be called from an interrupt service routine! */
  %@CriticalSection@'ModuleName'%.EnterCritical();
  TriggerList[trigger].triggerTime = incTicks;
  TriggerList[trigger].callback = callback;
  %@CriticalSection@'ModuleName'%.ExitCritical();
}

%endif %- AddTrigger
%-BW_METHOD_END AddTrigger
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG CheckCallbacks
%define! RetVal
%include Common\GeneralInternalGlobal.inc (CheckCallbacks)
static bool CheckCallbacks(void)
{
  /* This method is called from %'ModuleName'%.%AddTick() which is called from a timer interrupt! */
  uint8_t i; /* counter through all triggers */
  void (*callback)(void); /* variable to temporarily store the callback pointer */
  bool calledCallBack = FALSE; /* flag to indicate if the callback has been called */
  %@CriticalSection@'ModuleName'%.CriticalVariable();

  for(i=0;i<sizeof(TriggerList)/sizeof(TriggerDesc);i++) {
    %@CriticalSection@'ModuleName'%.EnterCritical();
    if (TriggerList[i].callback!=NULL && TriggerList[i].triggerTime==0) {   %>%CTAB /* we have a trigger to check */
      callback = TriggerList[i].callback;
      TriggerList[i].callback = NULL;    %>%CTAB /* do not trigger again */
      %@CriticalSection@'ModuleName'%.ExitCritical();
      callback();
      calledCallBack = TRUE;              %>%CTAB /* callback may have set a trigger at the current time: rescan trigger list */
    } else {
      %@CriticalSection@'ModuleName'%.ExitCritical();
    }
  } /* for */
  return calledCallBack;
}

%-INTERNAL_METHOD_END CheckCallbacks
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTick
%ifdef AddTick
%include Common\TriggerAddTick.Inc
void %'ModuleName'%.%AddTick(void)
{
  /* This method is usually called from a periodic timer interrupt! */
  uint8_t i;
  %@CriticalSection@'ModuleName'%.CriticalVariable();

  for(i=0;i<sizeof(TriggerList)/sizeof(TriggerDesc);i++) {
    %@CriticalSection@'ModuleName'%.EnterCritical();
    if (TriggerList[i].triggerTime!=0) { /* prevent underflow */
      TriggerList[i].triggerTime--;
    }
    %@CriticalSection@'ModuleName'%.ExitCritical();
  } /* for */
  while(CheckCallbacks()) {
    /* while we have callbacks, re-iterate the list as this may have added new triggers at the current time */
  }
}

%endif %- AddTick
%-BW_METHOD_END AddTick
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG Init
%include Common\GeneralInternal.inc (Init)
void %'ModuleName'%.Init(void)
{
  uint8_t i;

  for(i=0;i<sizeof(TriggerList)/sizeof(TriggerDesc);i++) {
    TriggerList[i].triggerTime = 0;
    TriggerList[i].callback = NULL;
  }
}

%-INTERNAL_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN AnyTriggerPending
%ifdef AnyTriggerPending
%define! RetVal
%include Common\TriggerAnyTriggerPending.Inc
bool %'ModuleName'%.%AnyTriggerPending(void)
{
  uint8_t i;
  bool res = FALSE;
  %@CriticalSection@'ModuleName'%.CriticalVariable();

%- %if defined(OperatingSystemId)
%-  %inclSUB RTOSAdap_genCriticalSectionBegin(no)
%- %else
  %@CriticalSection@'ModuleName'%.EnterCritical();
%- %endif
  for(i=0;i<sizeof(TriggerList)/sizeof(TriggerDesc);i++) {
    if (TriggerList[i].callback != NULL) {
      res = TRUE;
      break;                                                     %>40/* leave the for loop */
    }
  }
%- %if defined(OperatingSystemId)
%-   %inclSUB RTOSAdap_genCriticalSectionEnd(no)
%- %else
  %@CriticalSection@'ModuleName'%.ExitCritical();
%- %endif
  return res;
}

%endif %- AnyTriggerPending
%-BW_METHOD_END AnyTriggerPending
%-************************************************************************************************************
%-BW_METHOD_BEGIN TriggerPending
%ifdef TriggerPending
%define! Partrigger
%define! RetVal
%include Common\TriggerTriggerPending.Inc
bool %'ModuleName'%.%TriggerPending(uint8_t trigger)
{
  return (bool)(TriggerList[trigger].callback != NULL);
}

%endif %- TriggerPending
%-BW_METHOD_END TriggerPending
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%if InitializeOnInit='yes'
 %if LowPowerEnabled='yes' & %@LowPower@SpecialInit='yes'
  %if %@LowPower@RAMlostAfterRecovery='yes'
  %'ModuleName'%.Init();
  %else
  if (%@LowPower@'ModuleName'%.InitializeRAMinInit()) { /* only initialize driver RAM if needed */
    %'ModuleName'%.Init();
  }
  %endif
 %else
  %'ModuleName'%.Init();
 %endif
%endif
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Application configuration file for Trigger module
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is a configuration header file to configure the module %'ModuleName'.
 * You can configure the defines directly in this file or with the compiler -D option.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

/* no configuration supported yet */
%- #define %'ModuleName'%.CONFIG_SETTING
/*! Definition of triggers */
%for i from TriggerNameList
#define %'ModuleName'%.%i                                        %>40 %for_index_0
%endfor

#define %'ModuleName'%.CONFIG_TICK_PERIOD_MS \
%if defined(RTOS)
  (1000/%@RTOS@TickRateHz)                                       %>40 /* Period in milliseconds as defined in RTOS component properties, at which %'ModuleName'.%.AddTick() is called */
%else
  %TickPeriodMs                                                  %>40 /* Period in milliseconds as defined in component properties, at which %'ModuleName'.%.AddTick() is called */
%endif

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------
