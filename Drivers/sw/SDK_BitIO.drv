%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    09.03.2016
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\SDK_BitIOSettings.Inc
%define! Abstract Common\SDK_BitIOAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
#if %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_KINETIS_1_3
  #include "fsl_gpio_driver.h"

  /* only GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF and GPIOG are currently supported */
%if %PortName='GPIOA'
  #define %'ModuleName'%.GPIO_IDX GPIOA_IDX   /* %PortName */
%elif %PortName='GPIOB'
  #define %'ModuleName'%.GPIO_IDX GPIOB_IDX   /* %PortName */
%elif %PortName='GPIOC'
  #define %'ModuleName'%.GPIO_IDX GPIOC_IDX   /* %PortName */
%elif %PortName='GPIOD'
  #define %'ModuleName'%.GPIO_IDX GPIOD_IDX   /* %PortName */
%elif %PortName='GPIOE'
  #define %'ModuleName'%.GPIO_IDX GPIOE_IDX   /* %PortName */
%elif %PortName='GPIOF'
  #define %'ModuleName'%.GPIO_IDX GPIOF_IDX   /* %PortName */
%elif %PortName='GPIOG'
  #define %'ModuleName'%.GPIO_IDX GPIOG_IDX   /* %PortName */
%else
  %warning "only GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF and GPIOG are currently supported!"
  #error "only GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF and GPIOG are currently supported!"
%endif

  enum %'ModuleName'%.pinNames{
    %'ModuleName'%.CONFIG_PIN_SYMBOL = GPIO_MAKE_PIN(%'ModuleName'%.GPIO_IDX, %'ModuleName'%.CONFIG_PIN_NUMBER),
  };

  extern const gpio_output_pin_user_config_t %'ModuleName'%.OutputConfig[];
  extern const gpio_input_pin_user_config_t %'ModuleName'%.InputConfig[];
#endif
%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\SDK_BitIOInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClrVal
%ifdef ClrVal
void %'ModuleName'%.%ClrVal(void);
%include Common\SDK_BitIOClrVal.Inc

%endif %- ClrVal
%-BW_METHOD_END ClrVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetVal
%ifdef SetVal
void %'ModuleName'%.%SetVal(void);
%include Common\SDK_BitIOSetVal.Inc

%endif %- SetVal
%-BW_METHOD_END SetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN NegVal
%ifdef NegVal
void %'ModuleName'%.%NegVal(void);
%include Common\SDK_BitIONegVal.Inc

%endif %- NegVal
%-BW_METHOD_END NegVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\SDK_BitIODeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
bool %'ModuleName'%.%GetVal(void);
%define! RetVal
%include Common\SDK_BitIOGetVal.Inc

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDir
%ifdef GetDir
bool %'ModuleName'%.%GetDir(void);
%define! RetVal
%include Common\SDK_BitIOGetDir.Inc

%endif %- GetDir
%-BW_METHOD_END GetDir
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDir
%ifdef SetDir
void %'ModuleName'%.%SetDir(bool Dir);
%define! ParDir
%include Common\SDK_BitIOSetDir.Inc

%endif %- SetDir
%-BW_METHOD_END SetDir
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetInput
%ifdef SetInput
void %'ModuleName'%.%SetInput(void);
%include Common\SDK_BitIOSetInput.Inc

%endif %- SetInput
%-BW_METHOD_END SetInput
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetOutput
%ifdef SetOutput
void %'ModuleName'%.%SetOutput(void);
%include Common\SDK_BitIOSetOutput.Inc

%endif %- SetOutput
%-BW_METHOD_END SetOutput
%-************************************************************************************************************
%-BW_METHOD_BEGIN PutVal
%ifdef PutVal
void %'ModuleName'%.%PutVal(bool Val);
%define! ParVal
%include Common\SDK_BitIOPutVal.Inc

%endif %- PutVal
%-BW_METHOD_END PutVal
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\SDK_BitIOSettings.Inc
%define! Abstract Common\SDK_BitIOAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#if %@sdk@'ModuleName'%.CONFIG_NXP_SDK_2_0_USED
  #if %'ModuleName'%.CONFIG_DO_PIN_MUXING
    #if %@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC
      #include "fsl_iocon.h" /* include SDK header file for I/O connection muxing */
    #else /* Kinetis */
      #include "fsl_port.h" /* include SDK header file for port muxing */
    #endif
  #endif
  #include "fsl_gpio.h" /* include SDK header file for GPIO */
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_KINETIS_1_3
  #include "fsl_gpio_driver.h" /* include SDK header file for GPIO */
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_S32K
  #include "pins_gpio_hw_access.h"
  #include "pins_driver.h" /* include SDK header file for GPIO */
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_NORDIC_NRF5
  #include "nrf_gpio.h"
#else
  #error "Unsupported SDK!"
#endif
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#if %@sdk@'ModuleName'%.CONFIG_NXP_SDK_2_0_USED
  static const gpio_pin_config_t %'ModuleName'%.configOutput = {
    kGPIO_DigitalOutput,  /* use as output pin */
    %'ModuleName'%.CONFIG_INIT_PIN_VALUE,  /* initial value */
  };

  static const gpio_pin_config_t %'ModuleName'%.configInput = {
    kGPIO_DigitalInput,  /* use as input pin */
    %'ModuleName'%.CONFIG_INIT_PIN_VALUE,  /* initial value */
  };
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_KINETIS_1_3
  const gpio_output_pin_user_config_t %'ModuleName'%.OutputConfig[] = {
    {
      .pinName = %'ModuleName'%.CONFIG_PIN_SYMBOL,
      .config.outputLogic = %'ModuleName'%.CONFIG_INIT_PIN_VALUE,
    #if FSL_FEATURE_PORT_HAS_SLEW_RATE
      .config.slewRate = kPortSlowSlewRate,
    #endif
    #if FSL_FEATURE_PORT_HAS_OPEN_DRAIN
      .config.isOpenDrainEnabled = true,
    #endif
    #if FSL_FEATURE_PORT_HAS_DRIVE_STRENGTH
      .config.driveStrength = kPortLowDriveStrength,
    #endif
    },
    {
      .pinName = GPIO_PINS_OUT_OF_RANGE,
    }
  };

  const gpio_input_pin_user_config_t %'ModuleName'%.InputConfig[] = {
    {
      .pinName = %'ModuleName'%.CONFIG_PIN_SYMBOL,
    #if FSL_FEATURE_PORT_HAS_PULL_ENABLE
      #if %'ModuleName'%.CONFIG_PULL_RESISTOR==0 /* 0: no pull resistor, 1: pull-up, 2: pull-down, 3: pull-up or no pull, 4: pull-down or no pull: 4: autoselect-pull */
      .config.isPullEnable = false,
      #else
      .config.isPullEnable = true,
      #endif
    #endif
    #if FSL_FEATURE_PORT_HAS_PULL_SELECTION
      #if %'ModuleName'%.CONFIG_PULL_RESISTOR==1
      .config.pullSelect = kPortPullUp,
      #else
      .config.pullSelect = kPortPullDown,
      #endif
    #endif
    #if FSL_FEATURE_PORT_HAS_PASSIVE_FILTER
      .config.isPassiveFilterEnabled = true,
    #endif
    #if FSL_FEATURE_PORT_HAS_DIGITAL_FILTER
      .config.isDigitalFilterEnabled = true,
    #endif
    #if FSL_FEATURE_GPIO_HAS_INTERRUPT_VECTOR
      .config.interrupt = kPortIntDisabled
    #endif
    },
    {
      .pinName = GPIO_PINS_OUT_OF_RANGE,
    }
  };
#endif

static bool %'ModuleName'%.isOutput = false;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClrVal
%ifdef ClrVal
%include Common\SDK_BitIOClrVal.Inc
void %'ModuleName'%.%ClrVal(void)
{
#if %@sdk@'ModuleName'%.CONFIG_NXP_SDK_2_0_USED
  #if %@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC
  GPIO_PortClear(%'ModuleName'%.CONFIG_GPIO_NAME, %'ModuleName'%.CONFIG_PORT_NAME, 1<<%'ModuleName'%.CONFIG_PIN_NUMBER);
  #elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION < 250
  GPIO_ClearPinsOutput(%'ModuleName'%.CONFIG_GPIO_NAME, 1<<%'ModuleName'%.CONFIG_PIN_NUMBER);
  #else
  GPIO_PortClear(%'ModuleName'%.CONFIG_GPIO_NAME, 1<<%'ModuleName'%.CONFIG_PIN_NUMBER);
  #endif
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_KINETIS_1_3
  GPIO_DRV_ClearPinOutput(%'ModuleName'%.CONFIG_PIN_SYMBOL);
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_S32K
  PINS_GPIO_WritePin(%'ModuleName'%.CONFIG_PORT_NAME, %'ModuleName'%.CONFIG_PIN_NUMBER, 0);
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_NORDIC_NRF5
  nrf_gpio_pin_clear(%'ModuleName'%.CONFIG_PIN_NUMBER);
#endif
}

%endif %- ClrVal
%-BW_METHOD_END ClrVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetVal
%ifdef SetVal
%include Common\SDK_BitIOSetVal.Inc
void %'ModuleName'%.%SetVal(void)
{
#if %@sdk@'ModuleName'%.CONFIG_NXP_SDK_2_0_USED
  #if %@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC
  GPIO_PortSet(%'ModuleName'%.CONFIG_GPIO_NAME, %'ModuleName'%.CONFIG_PORT_NAME, 1<<%'ModuleName'%.CONFIG_PIN_NUMBER);
  #elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION < 250
  GPIO_SetPinsOutput(%'ModuleName'%.CONFIG_GPIO_NAME, 1<<%'ModuleName'%.CONFIG_PIN_NUMBER);
  #else
  GPIO_PortSet(%'ModuleName'%.CONFIG_GPIO_NAME, 1<<%'ModuleName'%.CONFIG_PIN_NUMBER);
  #endif
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_KINETIS_1_3
  GPIO_DRV_SetPinOutput(%'ModuleName'%.CONFIG_PIN_SYMBOL);
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_S32K
  PINS_GPIO_WritePin(%'ModuleName'%.CONFIG_PORT_NAME, %'ModuleName'%.CONFIG_PIN_NUMBER, 1);
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_NORDIC_NRF5
  nrf_gpio_pin_set(%'ModuleName'%.CONFIG_PIN_NUMBER);
#endif
}

%endif %- SetVal
%-BW_METHOD_END SetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN NegVal
%ifdef NegVal
%include Common\SDK_BitIONegVal.Inc
void %'ModuleName'%.%NegVal(void)
{
#if %@sdk@'ModuleName'%.CONFIG_NXP_SDK_2_0_USED
  #if %@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC
  GPIO_PortToggle(%'ModuleName'%.CONFIG_GPIO_NAME, %'ModuleName'%.CONFIG_PORT_NAME, 1<<%'ModuleName'%.CONFIG_PIN_NUMBER);
  #elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION < 250
  GPIO_TogglePinsOutput(%'ModuleName'%.CONFIG_GPIO_NAME, 1<<%'ModuleName'%.CONFIG_PIN_NUMBER);
  #else
  GPIO_PortToggle(%'ModuleName'%.CONFIG_GPIO_NAME, 1<<%'ModuleName'%.CONFIG_PIN_NUMBER);
  #endif
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_KINETIS_1_3
  GPIO_DRV_TogglePinOutput(%'ModuleName'%.CONFIG_PIN_SYMBOL);
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_S32K
  pins_channel_type_t val;

  val = PINS_GPIO_GetPinsOutput(%'ModuleName'%.CONFIG_PORT_NAME);
  if (val&(1<<%'ModuleName'%.CONFIG_PIN_NUMBER)) {
    PINS_GPIO_WritePin(%'ModuleName'%.CONFIG_PORT_NAME, %'ModuleName'%.CONFIG_PIN_NUMBER, 0);
  } else {
    PINS_GPIO_WritePin(%'ModuleName'%.CONFIG_PORT_NAME, %'ModuleName'%.CONFIG_PIN_NUMBER, 1);
  }
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_NORDIC_NRF5
  nrf_gpio_pin_toggle(%'ModuleName'%.CONFIG_PIN_NUMBER);
#endif
}

%endif %- NegVal
%-BW_METHOD_END NegVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetVal
%ifdef GetVal
%define! RetVal
%include Common\SDK_BitIOGetVal.Inc
bool %'ModuleName'%.%GetVal(void)
{
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC
  return GPIO_PinRead(%'ModuleName'%.CONFIG_GPIO_NAME, %'ModuleName'%.CONFIG_PORT_NAME, %'ModuleName'%.CONFIG_PIN_NUMBER);
#elif %@sdk@'ModuleName'%.CONFIG_NXP_SDK_2_0_USED
  #if %@sdk@'ModuleName'%.CONFIG_SDK_VERSION < 250
  return GPIO_ReadPinInput(%'ModuleName'%.CONFIG_GPIO_NAME, %'ModuleName'%.CONFIG_PIN_NUMBER)!=0;
  #else
  return GPIO_PinRead(%'ModuleName'%.CONFIG_GPIO_NAME, %'ModuleName'%.CONFIG_PIN_NUMBER)!=0;
  #endif
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_KINETIS_1_3
  return GPIO_DRV_ReadPinInput(%'ModuleName'%.CONFIG_PIN_SYMBOL)!=0;
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_S32K
  return (PINS_DRV_ReadPins(%'ModuleName'%.CONFIG_PORT_NAME)&(1<<%'ModuleName'%.CONFIG_PIN_NUMBER))!=0;
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_NORDIC_NRF5
  return nrf_gpio_pin_read(%'ModuleName'%.CONFIG_PIN_NUMBER)!=0;
#else
  return FALSE;
#endif
}

%endif %- GetVal
%-BW_METHOD_END GetVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDir
%ifdef GetDir
%define! RetVal
%include Common\SDK_BitIOGetDir.Inc
bool %'ModuleName'%.%GetDir(void)
{
  return %'ModuleName'%.isOutput;
}

%endif %- GetDir
%-BW_METHOD_END GetDir
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDir
%ifdef SetDir
%define! ParDir
%include Common\SDK_BitIOSetDir.Inc
void %'ModuleName'%.%SetDir(bool Dir)
{
  if (Dir) {
    %'ModuleName'%.%SetOutput();
  } else {
    %'ModuleName'%.%SetInput();
  }
}

%endif %- SetDir
%-BW_METHOD_END SetDir
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetInput
%ifdef SetInput
%include Common\SDK_BitIOSetInput.Inc
void %'ModuleName'%.%SetInput(void)
{
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC
  GPIO_PinInit(%'ModuleName'%.CONFIG_GPIO_NAME, %'ModuleName'%.CONFIG_PORT_NAME, %'ModuleName'%.CONFIG_PIN_NUMBER, &%'ModuleName'%.configInput);
#elif %@sdk@'ModuleName'%.CONFIG_NXP_SDK_2_0_USED
  GPIO_PinInit(%'ModuleName'%.CONFIG_GPIO_NAME, %'ModuleName'%.CONFIG_PIN_NUMBER, &%'ModuleName'%.configInput);
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_KINETIS_1_3
  GPIO_DRV_SetPinDir(%'ModuleName'%.CONFIG_PIN_SYMBOL, kGpioDigitalInput);
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_S32K
  pins_channel_type_t val;

  val = PINS_GPIO_GetPinsDirection(%'ModuleName'%.CONFIG_PORT_NAME); /* bit 0: pin is input; 1: pin is output */
  val &= ~(1<<%'ModuleName'%.CONFIG_PIN_NUMBER); /* clear bit ==> input */
  PINS_DRV_SetPinsDirection(%'ModuleName'%.CONFIG_PORT_NAME, val);
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_NORDIC_NRF5
  nrf_gpio_cfg_input(%'ModuleName'%.CONFIG_PIN_NUMBER, NRF_GPIO_PIN_NOPULL);
#endif
  %'ModuleName'%.isOutput = false;
}

%endif %- SetInput
%-BW_METHOD_END SetInput
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetOutput
%ifdef SetOutput
%include Common\SDK_BitIOSetOutput.Inc
void %'ModuleName'%.%SetOutput(void)
{
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC
  GPIO_PinInit(%'ModuleName'%.CONFIG_GPIO_NAME, %'ModuleName'%.CONFIG_PORT_NAME, %'ModuleName'%.CONFIG_PIN_NUMBER, &%'ModuleName'%.configOutput);
#elif %@sdk@'ModuleName'%.CONFIG_NXP_SDK_2_0_USED
  GPIO_PinInit(%'ModuleName'%.CONFIG_GPIO_NAME, %'ModuleName'%.CONFIG_PIN_NUMBER, &%'ModuleName'%.configOutput);
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_KINETIS_1_3
  GPIO_DRV_SetPinDir(%'ModuleName'%.CONFIG_PIN_SYMBOL, kGpioDigitalOutput);
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_S32K
  pins_channel_type_t val;

  val = PINS_GPIO_GetPinsDirection(%'ModuleName'%.CONFIG_PORT_NAME); /* bit 0: pin is input; 1: pin is output */
  val |= (1<<%'ModuleName'%.CONFIG_PIN_NUMBER); /* set bit ==> output */
  PINS_DRV_SetPinsDirection(%'ModuleName'%.CONFIG_PORT_NAME, val);
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_NORDIC_NRF5
  nrf_gpio_cfg_output(%'ModuleName'%.CONFIG_PIN_NUMBER);
#endif
  %'ModuleName'%.isOutput = true;
}

%endif %- SetOutput
%-BW_METHOD_END SetOutput
%-************************************************************************************************************
%-BW_METHOD_BEGIN PutVal
%ifdef PutVal
%define! ParVal
%include Common\SDK_BitIOPutVal.Inc
void %'ModuleName'%.%PutVal(bool Val)
{
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC
  if (Val) {
    GPIO_PortSet(%'ModuleName'%.CONFIG_GPIO_NAME, %'ModuleName'%.CONFIG_PORT_NAME, 1<<%'ModuleName'%.CONFIG_PIN_NUMBER);
  } else {
    GPIO_PortClear(%'ModuleName'%.CONFIG_GPIO_NAME, %'ModuleName'%.CONFIG_PORT_NAME, 1<<%'ModuleName'%.CONFIG_PIN_NUMBER);
  }
#elif %@sdk@'ModuleName'%.CONFIG_NXP_SDK_2_0_USED
  #if %@sdk@'ModuleName'%.CONFIG_SDK_VERSION < 250
  if (Val) {
    GPIO_SetPinsOutput(%'ModuleName'%.CONFIG_GPIO_NAME, 1<<%'ModuleName'%.CONFIG_PIN_NUMBER);
  } else {
    GPIO_ClearPinsOutput(%'ModuleName'%.CONFIG_GPIO_NAME, 1<<%'ModuleName'%.CONFIG_PIN_NUMBER);
  }
  #else
  if (Val) {
    GPIO_PortSet(%'ModuleName'%.CONFIG_GPIO_NAME, 1<<%'ModuleName'%.CONFIG_PIN_NUMBER);
  } else {
    GPIO_PortClear(%'ModuleName'%.CONFIG_GPIO_NAME, 1<<%'ModuleName'%.CONFIG_PIN_NUMBER);
  }
  #endif
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_KINETIS_1_3
  GPIO_DRV_WritePinOutput(%'ModuleName'%.CONFIG_PIN_SYMBOL, Val);
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_S32K
  PINS_DRV_WritePin(%'ModuleName'%.CONFIG_PORT_NAME, %'ModuleName'%.CONFIG_PIN_NUMBER, Val);
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_NORDIC_NRF5
  /* NYI */
#endif
}

%endif %- PutVal
%-BW_METHOD_END PutVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\SDK_BitIOInit.Inc
void %'ModuleName'%.%Init(void)
{
#if %@sdk@'ModuleName'%.CONFIG_NXP_SDK_2_0_USED
  #if %'ModuleName'%.CONFIG_DO_PIN_MUXING
      #if %@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC
        #define IOCON_PIO_DIGITAL_EN 0x0100u  /*!<@brief Enables digital function */
        #define IOCON_PIO_FUNC0 0x00u         /*!<@brief Selects pin function 0 */
        #define IOCON_PIO_INV_DI 0x00u        /*!<@brief Input function is not inverted */
        #define IOCON_PIO_MODE_PULLUP 0x20u   /*!<@brief Selects pull-up function */
        #define IOCON_PIO_OPENDRAIN_DI 0x00u  /*!<@brief Open drain is disabled */
        #define IOCON_PIO_SLEW_STANDARD 0x00u /*!<@brief Standard mode, output slew rate control is enabled */

        const uint32_t port_pin_config = (/* Pin is configured as PI<portname>_<pinnumber> */
                                      IOCON_PIO_FUNC0 |
                                      /* Selects pull-up function */
                                      IOCON_PIO_MODE_PULLUP |
                                      /* Standard mode, output slew rate control is enabled */
                                      IOCON_PIO_SLEW_STANDARD |
                                      /* Input function is not inverted */
                                      IOCON_PIO_INV_DI |
                                      /* Enables digital function */
                                      IOCON_PIO_DIGITAL_EN |
                                      /* Open drain is disabled */
                                      IOCON_PIO_OPENDRAIN_DI);
        #if (%@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC && %@sdk@'ModuleName'%.CONFIG_CORTEX_M==0)
          IOCON_PinMuxSet(%'ModuleName'%.CONFIG_PORT_NAME, %'ModuleName'%.CONFIG_PIN_NUMBER, port_pin_config);
        #else
          IOCON_PinMuxSet(IOCON, %'ModuleName'%.CONFIG_PORT_NAME, %'ModuleName'%.CONFIG_PIN_NUMBER, port_pin_config);
        #endif
      #else
        PORT_SetPinMux(%'ModuleName'%.CONFIG_PORT_NAME, %'ModuleName'%.CONFIG_PIN_NUMBER, kPORT_MuxAsGpio); /* mux as GPIO */
      #endif
  #endif
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_KINETIS_1_3
  /*! Pin Muxing not implemented */
  GPIO_DRV_Init(%'ModuleName'%.InputConfig, %'ModuleName'%.OutputConfig);
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_S32K
  /* the following needs to be called in the application first:
  PINS_DRV_Init(NUM_OF_CONFIGURED_PINS, g_pin_mux_InitConfigArr);
  */
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_NORDIC_NRF5
  /* nothing needed */
#endif
#if %'ModuleName'%.CONFIG_INIT_PIN_DIRECTION == %'ModuleName'%.CONFIG_INIT_PIN_DIRECTION_INPUT
  %'ModuleName'%.%SetInput();
#elif %'ModuleName'%.CONFIG_INIT_PIN_DIRECTION == %'ModuleName'%.CONFIG_INIT_PIN_DIRECTION_OUTPUT
  %'ModuleName'%.%SetOutput();
#endif
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\SDK_BitIODeinit.Inc
void %'ModuleName'%.%Deinit(void)
{
  /* nothing needed */
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%CODE_BEGIN
%if (CPUfamily = "S32K")
#ifdef CPU_INIT_MCUONECLIPSE_DRIVERS
%endif
  %'ModuleName'%.%Init(); /* ### %DeviceType "%DeviceName" init code ... */
%if (CPUfamily = "S32K")
#endif
%endif
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for SDK_BitIO
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is used to configure settings of the SDK Bit I/O module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

#if %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED == %@sdk@'ModuleName'%.CONFIG_SDK_MCUXPRESSO_2_0
  #include "pin_mux.h" /* include pin muxing header file */

  #if defined(BOARD_INITPINS_%'ModuleName'_PIN)
    #define %'ModuleName'%.CONFIG_PIN_NUMBER    BOARD_INITPINS_%'ModuleName'_PIN
  #endif
  #if defined(BOARD_INITPINS_%'ModuleName'_GPIO)
    #define %'ModuleName'%.CONFIG_GPIO_NAME     BOARD_INITPINS_%'ModuleName'_GPIO
  #endif
  #if defined(BOARD_INITPINS_%'ModuleName'_PORT)
    #define %'ModuleName'%.CONFIG_PORT_NAME     BOARD_INITPINS_%'ModuleName'_PORT
  #endif
#endif

#ifndef %'ModuleName'%.CONFIG_PORT_NAME
  #if %@sdk@'ModuleName'%.CONFIG_CPU_IS_IMXRT
    #define %'ModuleName'%.CONFIG_PORT_NAME       GPIO1
  #elif %@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC
    #define %'ModuleName'%.CONFIG_PORT_NAME       0
  #else /* name from properties */
    #define %'ModuleName'%.CONFIG_PORT_NAME       %PORT_Name
  #endif
    /*!< name of PORT, is pointer to PORT_Type */
#endif

#ifndef %'ModuleName'%.CONFIG_GPIO_NAME
  #if %@sdk@'ModuleName'%.CONFIG_CPU_IS_IMXRT
    #define %'ModuleName'%.CONFIG_GPIO_NAME       GPIO1
  #elif %@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC
    #define %'ModuleName'%.CONFIG_GPIO_NAME       GPIO
  #else /* name from properties */
    #define %'ModuleName'%.CONFIG_GPIO_NAME       %PortName
  #endif
    /*!< name of GPIO, is pointer to GPIO_Type, not used for S32K SDK */
#endif

#ifndef %'ModuleName'%.CONFIG_PIN_NUMBER
  #define %'ModuleName'%.CONFIG_PIN_NUMBER      %'PinNumber'u
    /*!< number of pin, type unsigned integer */
#endif

#ifndef %'ModuleName'%.CONFIG_PIN_SYMBOL
  #define %'ModuleName'%.CONFIG_PIN_SYMBOL      %'PinSymbol'
    /*!< symbolic name for pin, used for NXP SDK V1.3 */
#endif

#ifndef %'ModuleName'%.CONFIG_INIT_PIN_VALUE
%if defined(InitPinValue) & %InitPinValue='1'
  #define %'ModuleName'%.CONFIG_INIT_PIN_VALUE  1
%else
  #define %'ModuleName'%.CONFIG_INIT_PIN_VALUE  0
%endif
  /*!< 0: Pin data is initialized with 0 (low); 1: pin value is initialized with 1 (high) */
#endif

/* different types of pin direction settings */
#define %'ModuleName'%.CONFIG_INIT_PIN_DIRECTION_NONE    (0)
#define %'ModuleName'%.CONFIG_INIT_PIN_DIRECTION_INPUT   (1)
#define %'ModuleName'%.CONFIG_INIT_PIN_DIRECTION_OUTPUT  (2)

#ifndef %'ModuleName'%.CONFIG_INIT_PIN_DIRECTION
%if defined(PinDirection) & %PinDirection='Input'
  #define %'ModuleName'%.CONFIG_INIT_PIN_DIRECTION  %'ModuleName'%.CONFIG_INIT_PIN_DIRECTION_INPUT
%elif defined(PinDirection) & %PinDirection='Output'
  #define %'ModuleName'%.CONFIG_INIT_PIN_DIRECTION  %'ModuleName'%.CONFIG_INIT_PIN_DIRECTION_OUTPUT
%else
  #define %'ModuleName'%.CONFIG_INIT_PIN_DIRECTION  %'ModuleName'%.CONFIG_INIT_PIN_DIRECTION_NONE
%endif
#endif

#ifndef %'ModuleName'%.CONFIG_DO_PIN_MUXING
%if defined(DoPinMuxing) & %DoPinMuxing='yes'
  #define %'ModuleName'%.CONFIG_DO_PIN_MUXING  1
%else
  #define %'ModuleName'%.CONFIG_DO_PIN_MUXING  0
%endif
  /*!< 1: perform pin muxing in Init(), 0: do not do pin muxing */
#endif

#ifndef %'ModuleName'%.CONFIG_PULL_RESISTOR
%if defined(PullResistor)
  #define %'ModuleName'%.CONFIG_PULL_RESISTOR  %PullResistor
%else
  #define %'ModuleName'%.CONFIG_PULL_RESISTOR  0
%endif
  /*!< pull resistor setting. 0: no pull resistor, 1: pull-up, 2: pull-down, 3: pull-up or no pull, 4: pull-down or no pull: 4: autoselect-pull */
#endif

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------
