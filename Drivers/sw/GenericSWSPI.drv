%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for losing or damaging your code!
%-
%- readyINTERFACE Bit_IO
%- readyINTERFACE Bit_IO_In
%- readyCOMPILER COSMIC 68HC08 C Compiler V4.2c
%- readyCOMPILER Metrowerks HC08 C Compiler
%- readyCOMPILER Metrowerks HCS08 C Compiler
%- readyCOMPILER Metrowerks HC12 C Compiler
%- readyCOMPILER Metrowerks DSP C Compiler
%- readyCOMPILER FFMC16 C-Compiler V30
%- readyCOMPILER CodeWarrior HC12X C Compiler
%- readyCOMPILER CodeWarrior ColdFireV1 C Compiler
%- readyCOMPILER CodeWarrior RS08 C Compiler
%-
%define DriverVersion 01.15
%define DriverDate    11.10.2001
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%ifdef AfterNewSpeed
  %add AfterNewSpeedList %AfterNewSpeed
%endif
%ifdef BeforeNewSpeed
  %add BeforeNewSpeedList %BeforeNewSpeed
%endif
%-
%-----------------------------------------------------
%-         Definiton section
%-----------------------------------------------------
%-
%define! Delay 1
%-----------------------------------------------------
%-
%INTERFACE
%-define! Settings Common\SWSPISettings.Inc
%define! Abstract Common\GenericSWSPIAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES
%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-

%-BW_CUSTOM_USERTYPE_END

#ifdef __cplusplus
extern "C" {
#endif

%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\GenericSWSPIDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetFastMode
%ifdef SetFastMode
void %'ModuleName'%.%SetFastMode(void);
%include Common\GenericSWSPISetFastMode.Inc

%endif %- SetFastMode
%-BW_METHOD_END SetFastMode
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetSlowMode
%ifdef SetSlowMode
void %'ModuleName'%.%SetSlowMode(void);
%include Common\GenericSWSPISetSlowMode.Inc

%endif %- SetSlowMode
%-BW_METHOD_END SetSlowMode
%-************************************************************************************************************
%-BW_METHOD_BEGIN Write_ReadDummy
%ifdef Write_ReadDummy
void %'ModuleName'%.%Write_ReadDummy(uint8_t val);
%define! Parval
%include Common\GenericSWSPIWrite_ReadDummy.Inc

%endif %- Write_ReadDummy
%-BW_METHOD_END Write_ReadDummy
%-************************************************************************************************************
%-BW_METHOD_BEGIN RecvChar
%ifdef RecvChar
uint8_t %'ModuleName'%.%RecvChar(uint8_t *Chr);
%define! ParChr
%define! RetVal
%include Common\GenericSWSPIRecvChar.Inc

%endif %- RecvChar
%-BW_METHOD_END RecvChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendChar
%ifdef SendChar
uint8_t %'ModuleName'%.%SendChar(uint8_t val);
%define! Parval
%define! RetVal
%include Common\GenericSWSPISendChar.Inc

%endif %- SendChar
%-BW_METHOD_END SendChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN CharsInRxBuf
%ifdef CharsInRxBuf
uint8_t %'ModuleName'%.%CharsInRxBuf(void);
%define! RetVal
%include Common\GenericSWSPICharsInRxBuf.Inc

%endif %- CharsInRxBuf
%-BW_METHOD_END CharsInRxBuf
%-************************************************************************************************************
%-BW_METHOD_BEGIN CharsInTxBuf
%ifdef CharsInTxBuf
#define %'ModuleName'%.%CharsInTxBuf()  0 /* we always directly send the characters without buffering */
%define! RetVal
%include Common\GenericSWSPICharsInTxBuf.Inc

%endif %- CharsInTxBuf
%-BW_METHOD_END CharsInTxBuf
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetShiftClockPolarity
%ifdef SetShiftClockPolarity
uint8_t %'ModuleName'%.%SetShiftClockPolarity(uint8_t Edge);
%define! ParEdge
%define! RetVal
%include Common\GenericSWSPISetShiftClockPolarity.Inc

%endif %- SetShiftClockPolarity
%-BW_METHOD_END SetShiftClockPolarity
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetIdleClockPolarity
%ifdef SetIdleClockPolarity
uint8_t %'ModuleName'%.%SetIdleClockPolarity(uint8_t Level);
%define! ParLevel
%define! RetVal
%include Common\GenericSWSPISetIdleClockPolarity.Inc

%endif %- SetIdleClockPolarity
%-BW_METHOD_END SetIdleClockPolarity
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'_Init(void);
%include Common\GeneralInternal.Inc (Init)

%endif %- Init

%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_DEFINITION_END
/* END %ModuleName. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif /* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%IMPLEMENTATION
%-define! Settings Common\SWSPISettings.Inc
%define! Abstract Common\GenericSWSPIAbstract.Inc
%include Common\Header.C


/* MODULE %ModuleName. */
%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"

/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif

%-
%if (ClockEdge='rising' & SKpolarity='Low') | (ClockEdge='falling' & SKpolarity='High')
  %- clock change, then data, then clock change
  %define ClockDataClock
%else
  %- data, then clock change, then clock change
  /* data-clock-clock */
  %define DataClockClock
%endif
%-
%if defined(SetIdleClockPolarity) | defined(SetShiftClockPolarity)
  %define DynamicClockSettings
%endif

#define OVERRUN_ERR  %#h1                                        %>40/* Overrun error flag bit   */
#define CHAR_IN_RX   %#h8                                        %>40/* Char is in RX buffer     */

%if defined(SetSlowMode) | defined(SetFastMode)
static uint8_t %'ModuleName'%.FastMode; /* 0: slow, 1: fast */
%endif
%if %OutputPinPolarity='Low'
#define MOSI_IDLE_POLARITY    0                                  %>>/* MOSI idle polarity is low */
%else
#define MOSI_IDLE_POLARITY    1                                  %>>/* MOSI idle polarity is high */
%endif
%if %SKpolarity='Low'
#define CLOCK_IDLE_POLARITY   0                                  %>>/* Clock idle polarity is low */
%else
#define CLOCK_IDLE_POLARITY   1                                  %>>/* Clock idle polarity is high */
%endif

%if defined(DynamicClockSettings)
static uint8_t CLKshift;
static uint8_t CLKsampl;
%elif (SKpolarity='Low' & ClockEdge='falling')
/* clock idle low, rising edge: Data - Sample - Shift */
#define CLKsampl  1
#define CLKshift  0
%elif (SKpolarity='Low' & ClockEdge='rising')
/* clock idle low, falling edge: Shift - Data - Sample */
#define CLKshift  1
#define CLKsampl  0
%elif (SKpolarity='High' & ClockEdge='rising')
/* clock idle high, falling edge: Data - Sample - Shift */
#define CLKsampl  0
#define CLKshift  1
%elif (SKpolarity='High' & ClockEdge='falling')
/* clock idle high, rising edge: Shift - Data - Sample */
#define CLKshift  0
#define CLKsampl  1
%endif
static uint8_t InputBuffer;
static uint8_t SerFlag;                                          %>40/* Flags for serial communication */
                                                                 %>40/* Bits: 0 - OverRun error */
                                                                 %>40/*       1 - Unused */
                                                                 %>40/*       2 - Unused */
                                                                 %>40/*       3 - Char in RX buffer */
                                                                 %>40/*       4 - Unused */
                                                                 %>40/*       5 - Unused */
                                                                 %>40/*       6 - Unused */
                                                                 %>40/*       7 - Unused */
#define %'ModuleName'%.DELAY() \
  %if defined(SetSlowMode) | defined(SetFastMode)
    if (%'ModuleName'%.FastMode) { /* we can change the speed at runtime */ \
      %@Wait@'ModuleName'%.Waitus(%FastModeDelayUS);             %>>/* delay for some cycles */ \
    } else { \
      %@Wait@'ModuleName'%.Waitus(%SlowModeDelayUS);             %>>/* delay for some cycles */ \
    }
  %else
    %if %FastModeDelayUS >. '0'
    %@Wait@'ModuleName'%.Waitus(%FastModeDelayUS)                %>>/* delay for some cycles */
    %else
    /* no delay specified by user for fast mode */
    %endif
  %endif
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetFastMode
%ifdef SetFastMode
%include Common\GenericSWSPISetFastMode.Inc
void %'ModuleName'%.%SetFastMode(void)
{
  %'ModuleName'%.FastMode = 1;
}

%endif %- SetFastMode
%-BW_METHOD_END SetFastMode
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetSlowMode
%ifdef SetSlowMode
%include Common\GenericSWSPISetSlowMode.Inc
void %'ModuleName'%.%SetSlowMode(void)
{
  %'ModuleName'%.FastMode = 0;
}

%endif %- SetSlowMode
%-BW_METHOD_END SetSlowMode
%-************************************************************************************************************
%-BW_METHOD_BEGIN RecvChar
%ifdef RecvChar
%define! ParChr
%define! RetVal
%include Common\GenericSWSPIRecvChar.Inc
uint8_t %'ModuleName'%.%RecvChar(uint8_t *Chr)
{
  if(!(SerFlag & CHAR_IN_RX)) {                                  %>>/* Is char. received */
    return ERR_RXEMPTY;
  }
  *Chr = InputBuffer;                                            %>>/* Store the character */
  if(SerFlag&OVERRUN_ERR) {                                      %>>/* Is "overrun" occurred? */
    SerFlag &= ~(OVERRUN_ERR|CHAR_IN_RX);                        %>>/* If yes, clear flags */
    return ERR_OVERRUN;                                          %>>/* ... and return error */
  } else {
    SerFlag &= ~CHAR_IN_RX;                                      %>>/* If no, clear flag */
    return ERR_OK;                                               %>>/* ... and return */
  }
}

%endif %- RecvChar
%-BW_METHOD_END RecvChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN Write_ReadDummy
%ifdef Write_ReadDummy
%define! Parval
%include Common\GenericSWSPIWrite_ReadDummy.Inc
void %'ModuleName'%.%Write_ReadDummy(uint8_t val)
{
  int i;

  for(i=0; i<8; i++) {
    %'ModuleName'%.DELAY();
%ifdef ClockDataClock
    %@Clk@'ModuleName'%.PutVal(CLKshift);                        %>>/* Set CLK to shift value */
%endif
%if MSB_first = 'yes'
    %@Dout@'ModuleName'%.PutVal((bool)(val&128));                %>>/* Set value on MOSI */
    InputBuffer <<= 1;
%else
    %@Dout@'ModuleName'%.PutVal((bool)(val&1));                  %>>/* Set value on MOSI */
    InputBuffer >>= 1;
%endif
    %'ModuleName'%.DELAY();
    %@Clk@'ModuleName'%.PutVal(CLKsampl);                        %>>/* Set CLK to sample value */
      %if MSB_first = 'yes'
    val <<= 1;
      %else
    val >>= 1;
      %endif
    %ifdef DataClockClock
    %@Clk@'ModuleName'%.PutVal(CLKshift);                        %>>/* Set CLK to shift value */
    %endif
  }
  %@Dout@'ModuleName'%.PutVal((bool)MOSI_IDLE_POLARITY);         %>>/* Set value on MOSI */
}

%endif %- Write_ReadDummy
%-BW_METHOD_END Write_ReadDummy
%-************************************************************************************************************
%-BW_METHOD_BEGIN SendChar
%ifdef SendChar
%define! Parval
%define! RetVal
%include Common\GenericSWSPISendChar.Inc
uint8_t %'ModuleName'%.%SendChar(uint8_t val)
{
  int i;

  for(i=0; i<8; i++) {
    %'ModuleName'%.DELAY();
%ifdef ClockDataClock
    %@Clk@'ModuleName'%.PutVal(CLKshift);                        %>>/* Set CLK to shift value */
%endif
%if MSB_first = 'yes'
    %@Dout@'ModuleName'%.PutVal((bool)(val&128));                %>>/* Set value on MOSI */
    InputBuffer <<= 1;
%else
    %@Dout@'ModuleName'%.PutVal((bool)(val&1));                  %>>/* Set value on MOSI */
    InputBuffer >>= 1;
%endif
    %'ModuleName'%.DELAY();
    %@Clk@'ModuleName'%.PutVal(CLKsampl);                        %>>/* Set CLK to sample value */
      %if MSB_first = 'yes'
      %if %InputPinEnabled='yes'
    InputBuffer |= %@Din@'ModuleName'%.GetVal()?1:0;             %>>/* Read value from MISO */
      %endif
    val <<= 1;
      %else
      %if %InputPinEnabled='yes'
    InputBuffer |= %@Din@'ModuleName'%.GetVal()?128:0;           %>>/* Read value from MISO */
      %endif
    val >>= 1;
      %endif
    %ifdef DataClockClock
    %@Clk@'ModuleName'%.PutVal(CLKshift);                        %>>/* Set CLK to shift value */
    %endif
  }
  %@Dout@'ModuleName'%.PutVal((bool)MOSI_IDLE_POLARITY);         %>>/* Set value on MOSI */
  if(SerFlag&CHAR_IN_RX) {                                       %>>/* Is char. received? */
    SerFlag |= OVERRUN_ERR;                                      %>>/* If yes then set "overrun" flag */
  } else {
    SerFlag |= CHAR_IN_RX;                                       %>>/* If no then set "char in Rx" flag */
  }
  return ERR_OK;
}

%endif %- SendChar
%-BW_METHOD_END SendChar
%-************************************************************************************************************
%-BW_METHOD_BEGIN CharsInRxBuf
%ifdef CharsInRxBuf
%define! RetVal
%include Common\GenericSWSPICharsInRxBuf.Inc
uint8_t %'ModuleName'%.%CharsInRxBuf(void)
{
  return (uint8_t)((SerFlag & CHAR_IN_RX)?(uint8_t)1:(uint8_t)0);%>>/* Return number of chars in receive buffer */
}

%endif %- CharsInRxBuf
%-BW_METHOD_END CharsInRxBuf
%-************************************************************************************************************
%-BW_METHOD_BEGIN CharsInTxBuf
%ifdef CharsInTxBuf
%define! RetVal
%include Common\GenericSWSPICharsInTxBuf.Inc
#if 0 /* implemented as macro in the header file */
uint8_t %'ModuleName'%.%CharsInTxBuf(void)
{
  return 0;                                                      %>>/* Return number of chars in transmit buffer */
}
#endif
%endif %- CharsInTxBuf
%-BW_METHOD_END CharsInTxBuf
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetShiftClockPolarity
%ifdef SetShiftClockPolarity
%define! ParEdge
%define! RetVal
%include Common\GenericSWSPISetShiftClockPolarity.Inc
uint8_t %'ModuleName'%.%SetShiftClockPolarity(uint8_t Edge)
{
  CLKshift = (uint8_t)(Edge?(uint8_t)1:(uint8_t)0);              %>>/* Set shift value */
  CLKsampl = (uint8_t)(CLKshift^(uint8_t)%#h1);                  %>>/* Set sample value */
  return ERR_OK;
}

%endif %- SetShiftClockPolarity
%-BW_METHOD_END SetShiftClockPolarity
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetIdleClockPolarity
%ifdef SetIdleClockPolarity
%define! ParLevel
%define! RetVal
%include Common\GenericSWSPISetIdleClockPolarity.Inc
uint8_t %'ModuleName'%.%SetIdleClockPolarity(uint8_t Level)
{
  %@Clk@'ModuleName'%.PutVal((uint8_t)Level);                    %>>/* Set CLK to (new) idle value */
  return ERR_OK;
}

%endif %- SetIdleClockPolarity
%-BW_METHOD_END SetIdleClockPolarity
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\GenericSWSPIInit.Inc
void %'ModuleName'%.%Init(void)
{
#if %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED != %@sdk@'ModuleName'%.CONFIG_SDK_PROCESSOR_EXPERT
%if defined(Din)
  %@Din@'ModuleName'%.Init();
%endif
  %@Dout@'ModuleName'%.Init();
  %@Clk@'ModuleName'%.Init();
#endif
%ifdef SetSlowMode
  %'ModuleName'%.SetSlowMode();                                  %>>/* slow mode is default */
%endif
%if defined(DynamicClockSettings)
  %if (SKpolarity='Low' & ClockEdge='falling')
  /* clock idle low, falling edge: Data - Sample - Shift */
  CLKsampl = 1;
  CLKshift = 0;
  %elif (SKpolarity='Low' & ClockEdge='rising')
  /* clock idle low, rising edge: Shift - Data - Sample */
  CLKshift = 1;
  CLKsampl = 0;
  %elif (SKpolarity='High' & ClockEdge='rising')
  /* clock idle high, rising edge: Data - Sample - Shift */
  CLKsampl = 0;
  CLKshift = 1;
  %elif (SKpolarity='High' & ClockEdge='falling')
  /* clock idle high, falling edge: Shift - Data - Sample */
  CLKshift = 0;
  CLKsampl = 1;
  %endif
%endif
  %@Clk@'ModuleName'%.PutVal((bool)CLOCK_IDLE_POLARITY);         %>>/* Set CLK to idle value */
  %@Dout@'ModuleName'%.PutVal((bool)MOSI_IDLE_POLARITY);         %>>/* Set value on MOSI */
  SerFlag = 0;                                                   %>>/* Clear flags */
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\GenericSWSPIDeinit.Inc
void %'ModuleName'%.%Deinit(void)
{
#if %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED != %@sdk@'ModuleName'%.CONFIG_SDK_PROCESSOR_EXPERT
%if defined(Din)
  %@Din@'ModuleName'%.Deinit();
%endif
  %@Dout@'ModuleName'%.Deinit();
  %@Clk@'ModuleName'%.Deinit();
#endif
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************

/* END __%'ModuleName'_H */

%include Common\Header.End
%-
%INITIALIZATION
%CODE_BEGIN
%if (CPUfamily = "S32K")
#ifdef CPU_INIT_MCUONECLIPSE_DRIVERS
%endif
  %'ModuleName'%.%Init(); /* ### %DeviceType "%DeviceName" init code ... */
%if (CPUfamily = "S32K")
#endif
%endif
%CODE_END
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for GenericSWSPI
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is used to configure settings of the software (bit-banging) SPI module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

#ifndef %'ModuleName'%.CONFIG_CLOCK_POLARITY
%if defined(SKpolarity) & SKpolarity='Low'
  #define %'ModuleName'%.CONFIG_CLOCK_POLARITY  0
%else
  #define %'ModuleName'%.CONFIG_CLOCK_POLARITY  1
%endif
    /*!< 0: clock is low if idle; 1: clock is high if idle */
#endif

#ifndef %'ModuleName'%.CONFIG_CLOCK_EDGE
%if defined(ClockEdge) & ClockEdge='falling'
  #define %'ModuleName'%.CONFIG_CLOCK_EDGE  0
%else
  #define %'ModuleName'%.CONFIG_CLOCK_EDGE  1
%endif
    /*!< 0: data is shifted on falling clock edge; 1: data is shifted on rising clock edge */
#endif


#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------

%else %- Language='ANSIC'
  %error^ This bean is not implemented in the selected language & compiler!%--
%endif %- Language='ANSIC'
%-
%DEBUG
%ALL_SYMBOLS
%-
