%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    22.05.2010
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\TimeoutSettings.Inc
%define! Abstract Common\TimeoutAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

#ifndef __BWUserType_%'ModuleName'_CounterType
#define __BWUserType_%'ModuleName'_CounterType
  typedef uint32_t %'ModuleName'_CounterType ;                   %>40/* Base type of counter which holds the counting value */
#endif
#ifndef __BWUserType_%'ModuleName'_CounterHandle
#define __BWUserType_%'ModuleName'_CounterHandle
  typedef uint8_t %'ModuleName'_CounterHandle ;                  %>40/* Type for the timeout counter handle. */
#endif

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
#define %'ModuleName'%.OUT_OF_HANDLE 0xff  /* special handle to indicate that we were running out of handlers */
#define %'ModuleName'_TICK_PERIOD_MS  \
%if defined(RTOS)
  (1000/%@RTOS@TickRateHz)                                       %>40 /* Tick period in milliseconds as defined in RTOS component properties, at which %'ModuleName'.%.AddTick() is called */
%else
  %CounterTickPeriod                                             %>40 /* Tick period of timeout counter in milliseconds, as specified in component properties */
%endif
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCounter
%ifdef GetCounter
%'ModuleName'_CounterHandle %'ModuleName'%.%GetCounter(%'ModuleName'_CounterType nofTicks);
%define! ParnofTicks
%define! RetVal
%include Common\TimeoutGetCounter.Inc

%endif %- GetCounter
%-BW_METHOD_END GetCounter
%-************************************************************************************************************
%-BW_METHOD_BEGIN LeaveCounter
%ifdef LeaveCounter
void %'ModuleName'%.%LeaveCounter(%'ModuleName'_CounterHandle handle);
%define! Parhandle
%include Common\TimeoutLeaveCounter.Inc

%endif %- LeaveCounter
%-BW_METHOD_END LeaveCounter
%-************************************************************************************************************
%-BW_METHOD_BEGIN CounterExpired
%ifdef CounterExpired
bool %'ModuleName'%.%CounterExpired(%'ModuleName'_CounterHandle handle);
%define! Parhandle
%define! RetVal
%include Common\TimeoutCounterExpired.Inc

%endif %- CounterExpired
%-BW_METHOD_END CounterExpired
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTick
%ifdef AddTick
void %'ModuleName'%.%AddTick(void);
%include Common\TimeoutAddTick.Inc

%endif %- AddTick
%-BW_METHOD_END AddTick
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\TimeoutInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Value
%ifdef Value
%'ModuleName'_CounterType %'ModuleName'%.%Value(%'ModuleName'_CounterHandle handle);
%define! Parhandle
%define! RetVal
%include Common\TimeoutValue.Inc

%endif %- Value
%-BW_METHOD_END Value
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetCounter
%ifdef SetCounter
%'ModuleName'_CounterType %'ModuleName'%.%SetCounter(%'ModuleName'_CounterHandle handle, %'ModuleName'_CounterType nofTicks);
%define! Parhandle
%define! ParnofTicks
%define! RetVal
%include Common\TimeoutSetCounter.Inc

%endif %- SetCounter
%-BW_METHOD_END SetCounter
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\TimeoutSettings.Inc
%define! Abstract Common\TimeoutAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#define %'ModuleName'%.NOF_COUNTERS  %MaxTimeoutCounters         %>40/* number of timeout counters available */

static %'ModuleName'%.CounterType %'ModuleName'%.Counters[%'ModuleName'%.NOF_COUNTERS];%>40/* array of timeout counters */
static bool %'ModuleName'%.FreeCounters[%'ModuleName'%.NOF_COUNTERS];%>40/* array to indicate which counters are free */

%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCounter
%ifdef GetCounter
%define! ParnofTicks
%define! RetVal
%include Common\TimeoutGetCounter.Inc
%'ModuleName'_CounterHandle %'ModuleName'%.%GetCounter(%'ModuleName'_CounterType nofTicks)
{
  %'ModuleName'%.CounterHandle handle;
  %@CriticalSection@'ModuleName'%.CriticalVariable();

  handle = 0;
  if (nofTicks==0) {
    nofTicks = 1; /* wait at least for one tick, otherwise will timeout immediately */
  }
  %@CriticalSection@'ModuleName'%.EnterCritical();
  while (handle<%'ModuleName'%.NOF_COUNTERS && !%'ModuleName'%.FreeCounters[handle]) {
    handle++;
  }
  if (handle<%'ModuleName'%.NOF_COUNTERS) {
    %'ModuleName'%.FreeCounters[handle]=FALSE;
    %'ModuleName'%.Counters[handle] = nofTicks;
  }
  %@CriticalSection@'ModuleName'%.ExitCritical();
  if (handle==%'ModuleName'%.NOF_COUNTERS) {
    return %'ModuleName'%.OUT_OF_HANDLE;
  }
  return handle;
}

%endif %- GetCounter
%-BW_METHOD_END GetCounter
%-************************************************************************************************************
%-BW_METHOD_BEGIN LeaveCounter
%ifdef LeaveCounter
%define! Parhandle
%include Common\TimeoutLeaveCounter.Inc
void %'ModuleName'%.%LeaveCounter(%'ModuleName'_CounterHandle handle)
{
  %@CriticalSection@'ModuleName'%.CriticalVariable();

  if (handle==%'ModuleName'%.OUT_OF_HANDLE) {
    return;
  }
  %@CriticalSection@'ModuleName'%.EnterCritical();
  %'ModuleName'%.Counters[handle] = 0;
  %'ModuleName'%.FreeCounters[handle]=TRUE;
  %@CriticalSection@'ModuleName'%.ExitCritical();
}

%endif %- LeaveCounter
%-BW_METHOD_END LeaveCounter
%-************************************************************************************************************
%-BW_METHOD_BEGIN CounterExpired
%ifdef CounterExpired
%define! Parhandle
%define! RetVal
%include Common\TimeoutCounterExpired.Inc
bool %'ModuleName'%.%CounterExpired(%'ModuleName'_CounterHandle handle)
{
  bool res;
  %@CriticalSection@'ModuleName'%.CriticalVariable();

  if (handle==%'ModuleName'%.OUT_OF_HANDLE) {
    return TRUE;
  }
  %@CriticalSection@'ModuleName'%.EnterCritical();
  res = (bool)(%'ModuleName'%.Counters[handle]==0);
  %@CriticalSection@'ModuleName'%.ExitCritical();
  return res;
}

%endif %- CounterExpired
%-BW_METHOD_END CounterExpired
%-************************************************************************************************************
%-BW_METHOD_BEGIN AddTick
%ifdef AddTick
%include Common\TimeoutAddTick.Inc
void %'ModuleName'%.%AddTick(void)
{
  uint8_t i;
  %@CriticalSection@'ModuleName'%.CriticalVariable();

  %@CriticalSection@'ModuleName'%.EnterCritical();
  for(i=0;i<%'ModuleName'%.NOF_COUNTERS;i++) {
    if (%'ModuleName'%.Counters[i]>0) {
      %'ModuleName'%.Counters[i]--;
    }
  }
  %@CriticalSection@'ModuleName'%.ExitCritical();
}

%endif %- AddTick
%-BW_METHOD_END AddTick
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\TimeoutInit.Inc
void %'ModuleName'%.%Init(void)
{
  uint8_t i;

  for(i=0;i<%'ModuleName'%.NOF_COUNTERS;i++) {
    %'ModuleName'%.Counters[i] = 0;
    %'ModuleName'%.FreeCounters[i] = TRUE;
  }
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN Value
%ifdef Value
%define! Parhandle
%define! RetVal
%include Common\TimeoutValue.Inc
%'ModuleName'_CounterType %'ModuleName'%.%Value(%'ModuleName'_CounterHandle handle)
{
  %'ModuleName'_CounterType val;
  %@CriticalSection@'ModuleName'%.CriticalVariable();

  if (handle==%'ModuleName'%.OUT_OF_HANDLE) {
    return 0; /* return dummy value */
  }
  %@CriticalSection@'ModuleName'%.EnterCritical();
  val = %'ModuleName'%.Counters[handle];
  %@CriticalSection@'ModuleName'%.ExitCritical();
  return val;
}

%endif %- Value
%-BW_METHOD_END Value
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetCounter
%ifdef SetCounter
%define! Parhandle
%define! ParnofTicks
%define! RetVal
%include Common\TimeoutSetCounter.Inc
%'ModuleName'_CounterType %'ModuleName'%.%SetCounter(%'ModuleName'_CounterHandle handle, %'ModuleName'_CounterType nofTicks)
{
  %'ModuleName'%.CounterType res;
  %@CriticalSection@'ModuleName'%.CriticalVariable();

  if (handle==%'ModuleName'%.OUT_OF_HANDLE) {
    return 0; /* return dummy value */
  }
  %@CriticalSection@'ModuleName'%.EnterCritical();
  res = %'ModuleName'%.Counters[handle];
  %'ModuleName'%.Counters[handle] = nofTicks;
  %@CriticalSection@'ModuleName'%.ExitCritical();
  return res;
}

%endif %- SetCounter
%-BW_METHOD_END SetCounter
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.%Init();
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for Timeout
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is used to configure settings of the Timeout module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

/* no configuration supported yet */
%- #define %'ModuleName'%.CONFIG_SETTING

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------
