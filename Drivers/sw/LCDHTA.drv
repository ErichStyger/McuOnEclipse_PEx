%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Erich Styger
%define DriverVersion 01.00
%define DriverDate    10.07.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_EnablePulse Creates a pulse to transfer data and/or commands
%define! Description_WaitForLCDReady Waits until the display is ready
%define! Description_WriteLCDData Writes data to the display
%define! Description_Init Display driver initialization routine.
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\LCDHTASettings.Inc
%define! Abstract Common\LCDHTAAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

%include sw\CommonSupport.prg

/* ID's for the soft characters which can be used as first argument for %'ModuleName'%.LoadSoftChar().
  Note that ID's can start with zero, but if you want to use a zero byte in %'ModuleName'%.WriteString()
  then this would be the zero delimiter byte, so not very useful. */
#define %'ModuleName'%.SOFTCHAR_UE 1 /*<! ID for 'ü' */
#define %'ModuleName'%.SOFTCHAR_AE 2 /*<! ID for 'ä' */
#define %'ModuleName'%.SOFTCHAR_OE 3 /*<! ID for 'ö' */

/* support for custom soft characters in the display which can be used with %'ModuleName'%.LoadSoftChar() */
extern const uint8_t %'ModuleName'%.SoftCharUE[8]; /* ü */
extern const uint8_t %'ModuleName'%.SoftCharAE[8]; /* ä */
extern const uint8_t %'ModuleName'%.SoftCharOE[8]; /* ö */

#define %'ModuleName'%.MAX_LCD_LINE_CHARS  %CharsPerLine /* number of chars of the LCD on a line */

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-
%-BW_CUSTOM_USERTYPE_END
%-BW_DEFINITION_START
%-INTERNAL_METHOD_BEG WriteLCDData
void %'ModuleName'%.WriteLCDData(uint8_t ch);
%define! Parch
%include Common\GeneralInternal.inc (WriteLCDData)

%-INTERNAL_METHOD_END WriteLCDData
%-INTERNAL_METHOD_BEG Init
void %'ModuleName'%.Init(void);
%include Common\GeneralInternal.inc (Init)

%-INTERNAL_METHOD_END Init
%-BW_METHOD_BEGIN Clear
%ifdef Clear
void %'ModuleName'%.%Clear(void);
%include Common\LCDHTAClear.Inc

%endif %- Clear
%-BW_METHOD_END Clear
%-BW_METHOD_BEGIN Home
%ifdef Home
void %'ModuleName'%.%Home(void);
%include Common\LCDHTAHome.Inc

%endif %- Home
%-BW_METHOD_END Home
%-BW_METHOD_BEGIN GotoXY
%ifdef GotoXY
void %'ModuleName'%.%GotoXY(uint8_t line, uint8_t column);
%define! Parcolumn
%define! Parline
%include Common\LCDHTAGotoXY.Inc

%endif %- GotoXY
%-BW_METHOD_END GotoXY
%-BW_METHOD_BEGIN ShiftLeft
%ifdef ShiftLeft
void %'ModuleName'%.%ShiftLeft(void);
%include Common\LCDHTAShiftLeft.Inc

%endif %- ShiftLeft
%-BW_METHOD_END ShiftLeft
%-BW_METHOD_BEGIN Write
%define INLINE_ME_WRITE
%ifdef Write
%- void %'ModuleName'%.%Write(char ch);
#define %'ModuleName'%.%Write(ch)   %'ModuleName'%.WriteLCDData((uint8_t)ch)
%define! Parch
%include Common\LCDHTAWrite.Inc

%endif %- Write
%-BW_METHOD_END Write
%-BW_METHOD_BEGIN WriteLn
%ifdef WriteLn
void %'ModuleName'%.%WriteLn(void);
%include Common\LCDHTAWriteLn.Inc

%endif %- WriteLn
%-BW_METHOD_END WriteLn
%-BW_METHOD_BEGIN WriteString
%ifdef WriteString
void %'ModuleName'%.%WriteString(char *str);
%define! Parstr
%include Common\LCDHTAWriteString.Inc

%endif %- WriteString
%-BW_METHOD_END WriteString
%-BW_METHOD_BEGIN WriteLineStr
%ifdef WriteLineStr
void %'ModuleName'%.%WriteLineStr(uint8_t line, char *str);
%define! Parline
%define! Parstr
%include Common\LCDHTAWriteLineStr.Inc

%endif %- WriteLineStr
%-BW_METHOD_END WriteLineStr
%-BW_METHOD_BEGIN LoadSoftChar
%ifdef LoadSoftChar
void %'ModuleName'%.%LoadSoftChar(uint8_t charCode, uint8_t *softChar);
%define! ParcharCode
%define! ParsoftChar
%include Common\LCDHTALoadSoftChar.Inc

%endif %- LoadSoftChar
%-BW_METHOD_END LoadSoftChar
%-BW_METHOD_BEGIN Line
%ifdef Line
void %'ModuleName'%.%Line(uint8_t line);
%include Common\LCDHTALine.Inc

%endif %- Line
%-BW_METHOD_END Line
%-BW_METHOD_BEGIN ShiftRight
%ifdef ShiftRight
void %'ModuleName'%.%ShiftRight(void);
%include Common\LCDHTAShiftRight.Inc

%endif %- ShiftRight
%-BW_METHOD_END ShiftRight
%-BW_METHOD_BEGIN CursorOn
%ifdef CursorOn
void %'ModuleName'%.%CursorOn(void);
%include Common\LCDHTACursorOn.Inc

%endif %- CursorOn
%-BW_METHOD_END CursorOn
%-BW_METHOD_BEGIN CursorOff
%ifdef CursorOff
void %'ModuleName'%.%CursorOff(void);
%include Common\LCDHTACursorOff.Inc

%endif %- CursorOff
%-BW_METHOD_END CursorOff
%-BW_METHOD_BEGIN DisplayOn
%ifdef DisplayOn
void %'ModuleName'%.%DisplayOn(void);
%include Common\LCDHTADisplayOn.Inc

%endif %- DisplayOn
%-BW_METHOD_END DisplayOn
%-BW_METHOD_BEGIN DisplayOff
%ifdef DisplayOff
void %'ModuleName'%.%DisplayOff(void);
%include Common\LCDHTADisplayOff.Inc

%endif %- DisplayOff
%-BW_METHOD_END DisplayOff
%-BW_METHOD_BEGIN BlinkingOn
%ifdef BlinkingOn
void %'ModuleName'%.%BlinkingOn(void);
%include Common\LCDHTABlinkingOn.Inc

%endif %- BlinkingOn
%-BW_METHOD_END BlinkingOn
%-BW_METHOD_BEGIN BlinkingOff
%ifdef BlinkingOff
void %'ModuleName'%.%BlinkingOff(void);
%include Common\LCDHTABlinkingOff.Inc

%endif %- BlinkingOff
%-BW_METHOD_END BlinkingOff
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetEntryMode
%ifdef SetEntryMode
void %'ModuleName'%.%SetEntryMode(bool increment, bool shiftLeft);
%define! Parincrement
%define! ParshiftLeft
%include Common\LCDHTASetEntryMode.Inc

%endif %- SetEntryMode
%-BW_METHOD_END SetEntryMode
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG WaitForLCDReady
void %'ModuleName'%.WaitForLCDReady(void);
%include Common\GeneralInternal.inc (WaitForLCDReady)

%-INTERNAL_METHOD_END WaitForLCDReady
%-************************************************************************************************************
%-BW_METHOD_BEGIN UseDisplay
%ifdef UseDisplay
uint8_t %'ModuleName'%.%UseDisplay(uint8_t display);
%define! Pardisplay
%define! RetVal
%include Common\LCDHTAUseDisplay.Inc

%endif %- UseDisplay
%-BW_METHOD_END UseDisplay
%-************************************************************************************************************
%-BW_METHOD_BEGIN CursorShiftRight
%ifdef CursorShiftRight
void %'ModuleName'%.%CursorShiftRight(void);
%include Common\LCDHTACursorShiftRight.Inc

%endif %- CursorShiftRight
%-BW_METHOD_END CursorShiftRight
%-************************************************************************************************************
%-BW_METHOD_BEGIN CursorShiftLeft
%ifdef CursorShiftLeft
void %'ModuleName'%.%CursorShiftLeft(void);
%include Common\LCDHTACursorShiftLeft.Inc

%endif %- CursorShiftLeft
%-BW_METHOD_END CursorShiftLeft
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteLCDCommand
%ifdef WriteLCDCommand
void %'ModuleName'%.%WriteLCDCommand(uint8_t cmd);
%define! Parcmd
%include Common\LCDHTAWriteLCDCommand.Inc

%endif %- WriteLCDCommand
%-BW_METHOD_END WriteLCDCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN DeInit
%ifdef DeInit
void %'ModuleName'%.%DeInit(void);
%include Common\LCDHTADeInit.Inc

%endif %- DeInit
%-BW_METHOD_END DeInit
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\LCDHTASettings.Inc
%define! Abstract Common\LCDHTAAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */
#include "%'ModuleName'.h"
#include "%@Wait@ModuleName.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M
%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-

/* DEFINES for display commands.
   See
   - www.freescale.com/files/microcontrollers/doc/app_note/AN1745.pdf
   - http://www.mikrocontroller.net/articles/HD44780
   for additional details.
*/
#define ClearDisplayCmd                 0x01 /* clears the display */

#define ReturnHomeCmd                   0x02 /* moves the cursor to the beginning of the first line */

#define EntryModeSetCmd                 0x04
  #define EntryModeSet_ShiftOn             1 /* S flag: shift display */
  #define EntryModeSet_IncrementOn         2 /* I/D flag: increment cursor */

#define DisplayOnOffControlCmd          0x08 /* Display on/off control command. There are 3 bits D, C and B as well */
  #define DisplayOnOffControl_BlinkOn      1 /* B flag: blinking cursor on/off; B=1 blinking, B=0 not blinking */
  #define DisplayOnOffControl_CursorOn     2 /* C flag: cursor on/off, C=1 cursor on, C=0 cursor off */
  #define DisplayOnOffControl_DisplayOn    4 /* D flag: display on/off, D=1 display on, D=0 display off */

#define FunctionSetCmd                  0x20
  #define FunctionSet_8bit              0x10 /* DL flag: DL=1: 8bit, DL=0: 4bit */
  #define FunctionSet_4bit                 0 /* DL flag: DL=1: 8bit, DL=0: 4bit */
  #define FunctionSet_2Lines            0x08 /* N flag: number of display lines: N=1 2 or 4 lines, N=0 1 line */
  #define FunctionSet_1Line                0 /* N flag: number of display lines: N=1 2 or 4 lines, N=0 1 line */
  #define FunctionSet_Font5x10          0x04 /* F flag: character font, F=1 5x10 dots, F=0 5x8 dots */
  #define FunctionSet_Font5x8              0 /* F flag: character font, F=1 5x10 dots, F=0 5x8 dots */

#define CursorOnCmd    (DisplayOnOffControlCmd|DisplayOnOffControl_DisplayOn|DisplayOnOffControl_CursorOn)
#define CursorOffCmd   (DisplayOnOffControlCmd|DisplayOnOffControl_DisplayOn)
#define GotoXYCmd      0x80  /* 0x80 | Display RAM address */
#define Line1Offset    0x%#b%Line1Address /* Display RAM address of first line, usually 0x00 */
#define Line2Offset    0x%#b%Line2Address /* Display RAM address of second line, usually 0x40 */
#define Line3Offset    0x%#b%Line3Address /* Display RAM address of third line, usually 0x10 */
#define Line4Offset    0x%#b%Line4Address /* Display RAM address of fourth line, usually 0x50 */
#define FirstLineCmd   (GotoXYCmd|Line1Offset)
#define SecondLineCmd  (GotoXYCmd|Line2Offset)
#define ThirdLineCmd   (GotoXYCmd|Line3Offset)
#define FourthLineCmd  (GotoXYCmd|Line4Offset)

#define RightShiftCmd      0x1C
#define LeftShiftCmd       0x18
#define RightShiftCursor   0x14
#define LeftShiftCursor    0x10

static uint8_t DisplayOnOffControlStatus = 0;

#define BusyFlag       0x80 /* BF Flag */

/* support for custom soft characters in the display which can be used with %'ModuleName'%.LoadSoftChar() */
const uint8_t %'ModuleName'%.SoftCharUE[8] = { /* ü */
  0x11, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0d, 0
/* X...X
   .....
   X...X
   X...X
   X...X
   X..XX
   .XX.X */
};

const uint8_t %'ModuleName'%.SoftCharAE[8] = { /* ä */
  0x11, 0x00, 0x0E, 0x01, 0x0F, 0x11, 0x0F, 0
/* X...X
   .....
   .XXX.
   ....X
   .XXXX
   X...X
   .XXXX */
};

const uint8_t %'ModuleName'%.SoftCharOE[8] = { /* ö */
  0x11, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0
/* X...X
   .....
   .XXX.
   X...X
   X...X
   X...X
   .XXX. */
};

#if %'ModuleName'%.CONFIG_USE_RW_SIGNAL
/* macros for the RW pin */
#define ClrRW() \
  %if defined(RW)
        %@RW@'ModuleName'%.ClrVal()                              %>40 /* RW=0: write mode */
  %else
        RW1_ClrVal()                                             %>40 /* RW=0: write mode */
  %endif
#define SetRW() \
  %if defined(RW)
        %@RW@'ModuleName'%.SetVal()                              %>40 /* RW=1: read mode */
  %else
        RW1_SetVal()                                             %>40 /* RW=1: read mode */
  %endif
#endif /* %'ModuleName'%.CONFIG_USE_RW_SIGNAL */

/* macros for the RS pin */
#define ClrRS() \
        %@RS@'ModuleName'%.ClrVal()                              %>40 /* RS=0: command mode */
#define SetRS() \
        %@RS@'ModuleName'%.SetVal()                              %>40 /* RS=1: data mode */

/* macros for the EN pin */
#define ClrEN() \
        %@EN@'ModuleName'%.ClrVal()                              %>40 /* EN=0 */
#define SetEN() \
        %@EN@'ModuleName'%.SetVal()                              %>40 /* EN=1 */

#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  /* macros for the EN2 pin */
  #define ClrEN2() \
    %if defined(E2)
        %@E2@'ModuleName'%.ClrVal()                              %>40 /* E2=0 */
    %else
        EN2_ClrVal()                                             %>40 /* E2=0 */
    %endif
  #define SetEN2() \
    %if defined(E2)
        %@E2@'ModuleName'%.SetVal()                              %>40 /* E2=1 */
    %else
        EN2_SetVal()                                             %>40 /* E2=1 */
    %endif
  static uint8_t %'ModuleName'%.currDisplay = 1; /* only for displays with E1 and E2: if set to 1, it will use E1, if set to 2 it will use E2 */
#endif

/* macros for the data bus */
#if %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==8
  #define DataAsOutput03() \
  %if defined(DB0)
        %@DB0@'ModuleName'%.SetOutput();                         %>40 /* set data port as output */ \
        %@DB1@'ModuleName'%.SetOutput();                         %>40 /* set data port as output */ \
        %@DB2@'ModuleName'%.SetOutput();                         %>40 /* set data port as output */ \
        %@DB3@'ModuleName'%.SetOutput();                         %>40 /* set data port as output */
  %else
        DB01_SetOutput();                                        %>40 /* set data port as output */ \
        DB11_SetOutput();                                        %>40 /* set data port as output */ \
        DB21_SetOutput();                                        %>40 /* set data port as output */ \
        DB31_SetOutput();                                        %>40 /* set data port as output */
  %endif
#endif

#if %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==8 || %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==4
  #define DataAsOutput47() \
  %if defined(DB4)
        %@DB4@'ModuleName'%.SetOutput();                         %>40 /* set data port as output */ \
        %@DB5@'ModuleName'%.SetOutput();                         %>40 /* set data port as output */ \
        %@DB6@'ModuleName'%.SetOutput();                         %>40 /* set data port as output */ \
        %@DB7@'ModuleName'%.SetOutput()                          %>40 /* set data port as output */
  %else
        DB41_SetOutput();                                        %>40 /* set data port as output */ \
        DB51_SetOutput();                                        %>40 /* set data port as output */ \
        DB61_SetOutput();                                        %>40 /* set data port as output */ \
        DB71_SetOutput()                                         %>40 /* set data port as output */
  %endif
#endif

#if %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==8 || %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==4
  #define DataAsInput03() \
  %if defined(DB0)
        %@DB0@'ModuleName'%.SetInput();                          %>40 /* set data port as input */ \
        %@DB1@'ModuleName'%.SetInput();                          %>40 /* set data port as input */ \
        %@DB2@'ModuleName'%.SetInput();                          %>40 /* set data port as input */ \
        %@DB3@'ModuleName'%.SetInput();                          %>40 /* set data port as input */
  %else
        DB01_SetInput();                                         %>40 /* set data port as input */ \
        DB11_SetInput();                                         %>40 /* set data port as input */ \
        DB21_SetInput();                                         %>40 /* set data port as input */ \
        DB31_SetInput();                                         %>40 /* set data port as input */
  %endif
#endif

#if %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==4
  #define DataAsInput47() \
  %if defined(DB4)
        %@DB4@'ModuleName'%.SetInput();                          %>40 /* set data port as input */ \
        %@DB5@'ModuleName'%.SetInput();                          %>40 /* set data port as input */ \
        %@DB6@'ModuleName'%.SetInput();                          %>40 /* set data port as input */ \
        %@DB7@'ModuleName'%.SetInput()                           %>40 /* set data port as input */
  %else
        DB41_SetInput();                                         %>40 /* set data port as input */ \
        DB51_SetInput();                                         %>40 /* set data port as input */ \
        DB61_SetInput();                                         %>40 /* set data port as input */ \
        DB71_SetInput()                                          %>40 /* set data port as input */
  %endif
#endif

#if %'ModuleName'%.CONFIG_LCD_DATA_BUS_PORT_8BIT
  %if defined(DataBus)
  #define DataAsOutput()        %@DataBus@'ModuleName'%.SetOutput()%>40 /* set data port as output */
  #define DataAsInput()         %@DataBus@'ModuleName'%.SetInput()%>40 /* set data port as input */
  %else
  #define DataAsOutput()        DataBus_SetOutput()              %>40 /* set data port as output */
  #define DataAsInput()         DataBus_SetInput()               %>40 /* set data port as input */
  %endif
#elif %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==4
  #define DataAsOutput()        DataAsOutput47()
  #define DataAsInput()         DataAsInput47()
#elif %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==8
  #define DataAsOutput()        DataAsOutput03(); DataAsOutput47()
  #define DataAsInput()         DataAsInput03(); DataAsInput47()
#endif


%if defined(DataBus)
#define DataGet() \
        %@DataBus@'ModuleName'%.GetVal()                         %>40 /* read data */
#define DataPut(x) \
        %@DataBus@'ModuleName'%.PutVal(x)                        %>40 /* write data */
%endif

/* waiting macros */
#define Waitns(x) \
        %@Wait@'ModuleName'%.Waitns(x)                           %>40 /* Wait x ns */
#define Waitus(x) \
        %@Wait@'ModuleName'%.Waitus(x)                           %>40 /* Wait x us */
#define Waitms(x) \
        %@Wait@'ModuleName'%.Waitms(x)                           %>40 /* Wait x ms */

/* timings from Hitachi HD44708.pdf */
#define Timing_PWeh_ns   230 /* PWeh: Enable Pulse width (high level) */
#define Timing_tAS_ns     40 /* tAB: Address set-up time (RS, RW to E ) */
#define Timing_tDDR_ns   160 /* tDDR: Data delay time */
#define Timing_tCYCLE_ns 500 /* tCYLE: Enable Cycle time */

%if ndefined(DataBus)
#if %'ModuleName'%.CONFIG_USE_DISPLAY_READ && %'ModuleName'%.CONFIG_USE_DISPLAY_READ_CHECK_BUSY_FLAG
static uint8_t DataGet(void) {
  uint8_t val;

#if %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==4
%if defined(DB7)
  val =  (%@DB7@'ModuleName'%.GetVal()<<3)
        |(%@DB6@'ModuleName'%.GetVal()<<2)
        |(%@DB5@'ModuleName'%.GetVal()<<1)
        |(%@DB4@'ModuleName'%.GetVal()<<0);
%else
  val =  DB71_GetVal()<<3)
         DB61_GetVal()<<2)
         DB51_GetVal()<<1)
         DB41_GetVal()<<0);
%endif
#elif %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==8 /* 8bit */
  %if defined(DB7)
  val =  (%@DB7@'ModuleName'%.GetVal()<<7)
  %else
  val =  (DB71_GetVal()<<7)
  %endif
  %if defined(DB6)
        |(%@DB6@'ModuleName'%.GetVal()<<6)
  %else
        |(DB61_GetVal()<<6)
  %endif
  %if defined(DB5)
        |(%@DB5@'ModuleName'%.GetVal()<<5)
  %else
        |(DB51_GetVal()<<5)
  %endif
  %if defined(DB4)
        |(%@DB4@'ModuleName'%.GetVal()<<4)
  %else
        |(DB41_GetVal()<<4)
  %endif
  %if defined(DEB3)
        |(%@DB3@'ModuleName'%.GetVal()<<3)
  %else
        |(DB31_GetVal()<<3)
  %endif
  %if defined(DB2)
        |(%@DB2@'ModuleName'%.GetVal()<<2)
  %else
        |(DB21_GetVal()<<2)
  %endif
  %if defined(DB1)
        |(%@DB1@'ModuleName'%.GetVal()<<1)
  %else
        |(DB11_GetVal()<<1)
  %endif
  %if defined(DB0)
        |(%@DB0@'ModuleName'%.GetVal()<<0);
  %else
        |(DB01_GetVal()<<0);
  %endif
#endif
  return val;
}
#endif /* #if %'ModuleName'%.CONFIG_USE_DISPLAY_READ && %'ModuleName'%.CONFIG_USE_DISPLAY_READ_CHECK_BUSY_FLAG */

static void DataPut(uint8_t val) {
#if %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==4
%if defined(DB7)
  %@DB7@'ModuleName'%.PutVal((val&(1<<3))!=0);
%else
 DB71_PutVal((val&(1<<3))!=0);
%endif
%if defined(DB6)
  %@DB6@'ModuleName'%.PutVal((val&(1<<2))!=0);
%else
  DB61_PutVal((val&(1<<2))!=0);
%endif
%if defined(DB5)
  %@DB5@'ModuleName'%.PutVal((val&(1<<1))!=0);
%else
  DB51_PutVal((val&(1<<1))!=0);
%endif
%if defined(DB4)
  %@DB4@'ModuleName'%.PutVal((val&(1<<0))!=0);
%else
  DB41_PutVal((val&(1<<0))!=0);
%endif
#else /* 8bit */
%if defined(DB7)
  %@DB7@'ModuleName'%.PutVal((val&(1<<7))!=0);
%else
  DB71_PutVal((val&(1<<7))!=0);
%endif
%if defined(DB6)
  %@DB6@'ModuleName'%.PutVal((val&(1<<6))!=0);
%else
  DB61_PutVal((val&(1<<6))!=0);
%endif
%if defined(DB5)
  %@DB5@'ModuleName'%.PutVal((val&(1<<5))!=0);
%else
  DB51_PutVal((val&(1<<5))!=0);
%endif
%if defined(DB4)
  %@DB4@'ModuleName'%.PutVal((val&(1<<4))!=0);
%else
  DB41_PutVal((val&(1<<4))!=0);
%endif
%if defined(DB3)
  %@DB3@'ModuleName'%.PutVal((val&(1<<3))!=0);
%else
  DB3Pin_PutVal((val&(1<<3))!=0);
%endif
%if defined(DB2)
  %@DB2@'ModuleName'%.PutVal((val&(1<<2))!=0);
%else
  DB21_PutVal((val&(1<<2))!=0);
%endif
%if defined(DB1)
  %@DB1@'ModuleName'%.PutVal((val&(1<<1))!=0);
%else
  DB11_PutVal((val&(1<<1))!=0);
%endif
%if defined(DB0)
  %@DB0@'ModuleName'%.PutVal((val&(1<<0))!=0);
%else
  DB0Pin_PutVal((val&(1<<0))!=0);
%endif
#endif
}

%endif
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG EnablePulse
static void EnablePulse(void);
%-INTERNAL_LOC_METHOD_END EnablePulse
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-INTERNAL_METHOD_BEG EnablePulse
%include Common\GeneralInternalGlobal.inc (EnablePulse)
static void EnablePulse(void)
{
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  if (%'ModuleName'%.currDisplay==1) {
    SetEN();
  } else {
    SetEN2();
  }
#else
  SetEN();
#endif                                                           %>40 /* set EN to 1 to create pulse */
#if %'ModuleName'%.CONFIG_LCD_TYPE==1
  /* Diplaytech 162c: not clear why this is not according to the 500ns spec? */
  Waitms(2);
#else
  Waitns(Timing_PWeh_ns);
#endif
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  if (%'ModuleName'%.currDisplay==1) {
    ClrEN();                                                     %>40 /* set to 0 to finish pulse */
  } else {
    ClrEN2();                                                    %>40 /* set to 0 to finish pulse */
  }
#else
  ClrEN();                                                       %>40 /* set to 0 to finish pulse */
#endif
}

%-INTERNAL_METHOD_END EnablePulse
%-INTERNAL_METHOD_BEG WaitForLCDReady
#if %'ModuleName'%.CONFIG_USE_DISPLAY_READ && %'ModuleName'%.CONFIG_USE_DISPLAY_READ_CHECK_BUSY_FLAG
%include Common\GeneralInternal.inc (WaitForLCDReady)
void %'ModuleName'%.WaitForLCDReady(void)
{
  uint8_t ch;

  /* Wait until the display is ready for new data.
     This means that we wait until the busy flag (MSB) in the status register is cleared */
  DataAsInput();                                                 %>40 /* set data port as input */
  SetRW();                                                       %>40 /* RW = 1: read mode */
  Waitns(Timing_tAS_ns);
  for(;;) {                                                      %>40 /* loop breaks as soon the busy flag is cleared */
  #if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
    if(%'ModuleName'%.currDisplay==1) {
      SetEN();                                                   %>40 /* EN = 1; EN to high for getting the busy flag  */
    } else {
      SetEN2();                                                  %>40 /* EN = 1; EN to high for getting the busy flag  */
    }
  #else
    SetEN();                                                     %>40 /* EN = 1; EN to high for getting the busy flag  */
  #endif
    Waitns(Timing_tDDR_ns);                                      %>40 /* Read mode timing tDDR: time until we can read data */
#if %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==4
    /* for 4bit data bus: need to do read twice */
    ch = (uint8_t)(DataGet()<<4);                                %>40 /* read high byte */
    Waitns(Timing_PWeh_ns-Timing_tDDR_ns);                       %>40 /* for accurate lenght of EN pulse */
  #if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
    if(%'ModuleName'%.currDisplay==1) {
      ClrEN();
    } else {
      ClrEN2();
    }
  #else
    ClrEN();
  #endif
    Waitns(Timing_tCYCLE_ns-Timing_PWeh_ns);                     %>40 /* need to wait a cycle time until we can enable EN again */
  #if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
    if(%'ModuleName'%.currDisplay==1) {
      SetEN();                                                   %>40 /* EN = 1; EN to high for getting the busy flag  */
    } else {
      SetEN2();                                                  %>40 /* EN = 1; EN to high for getting the busy flag  */
    }
  #else
    SetEN();                                                     %>40 /* EN = 1; EN to high for getting the busy flag  */
  #endif
    Waitns(Timing_tDDR_ns);                                      %>40 /* Read mode timing tDDR: time until we can read data */
    ch |= DataGet();                                             %>40 /* read low byte */
#else
    ch = DataGet();                                              %>40 /* read status */
#endif
    Waitns(Timing_PWeh_ns-Timing_tDDR_ns);                       %>40 /* for accurate length of EN pulse */
  #if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
    if(%'ModuleName'%.currDisplay==1) {
      ClrEN();
    } else {
      ClrEN2();
    }
  #else
    ClrEN();
  #endif
    if (!(ch&BusyFlag)) {
      break;
    }
    Waitns(Timing_tCYCLE_ns-Timing_PWeh_ns);                     %>40 /* need to wait a cycle time until we can enable EN again */
  } /* for */
  #if %'ModuleName'%.CONFIG_USE_RW_SIGNAL
  ClrRW();                                                       %>40 /* RW = 0: back to write mode */
  #endif
  DataAsOutput();                                                %>40 /* set data port as output */
}
#endif /* %'ModuleName'%.CONFIG_USE_DISPLAY_READ && %'ModuleName'%.CONFIG_USE_DISPLAY_READ_CHECK_BUSY_FLAG */
%-INTERNAL_METHOD_END WaitForLCDReady

%-BW_METHOD_BEGIN WriteLCDCommand
%ifdef WriteLCDCommand
%define! Parcmd
%include Common\LCDHTAWriteLCDCommand.Inc
void %'ModuleName'%.%WriteLCDCommand(uint8_t cmd)
{
#if %'ModuleName'%.CONFIG_WAIT_DISPLAY_US > 0
  %@Wait@'ModuleName'%.Waitus(%'ModuleName'%.CONFIG_WAIT_DISPLAY_US);%>40 /* wait for some time not to write to the display while he may be busy with previous command */
#endif
#if %'ModuleName'%.CONFIG_USE_DISPLAY_READ && %'ModuleName'%.CONFIG_USE_DISPLAY_READ_CHECK_BUSY_FLAG
  %'ModuleName'%.WaitForLCDReady();                              %>40 /* Wait until LCD is ready */
#endif
#if %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==4
  /* 2 4bit transfer */
  DataPut((uint8_t)((cmd&0xF0)>>4));                             %>40 /* Write the data (cycle #1) */
  EnablePulse();                                                 %>40 /* transfer data */
  Waitus(%'ModuleName'%.CONFIG_WAIT_LCD_CMD_AFTER_4BIT_DATA1_US);
  DataPut((uint8_t)(cmd&0x0F) );                                 %>40 /* Write the data (cycle #2) */
  EnablePulse();                                                 %>40 /* do the command transfer */
  Waitus(%'ModuleName'%.CONFIG_WAIT_LCD_CMD_AFTER_4BIT_DATA2_US);
#else
  /* 8bit transfer */
  DataPut(cmd);                                                  %>40 /* put data on bus */
  EnablePulse();                                                 %>40 /* do the command transfer */
#endif
}

%endif %- WriteLCDCommand
%-BW_METHOD_END WriteLCDCommand
%-BW_METHOD_BEGIN Clear
%ifdef Clear
%include Common\LCDHTAClear.Inc
void %'ModuleName'%.%Clear(void)
{
  %'ModuleName'%.WriteLCDCommand(ClearDisplayCmd);               %>40 /* send the clear command to the LCD */
}

%endif %- Clear
%-BW_METHOD_END Clear
%-BW_METHOD_BEGIN Home
%ifdef Home
%include Common\LCDHTAHome.Inc
void %'ModuleName'%.%Home(void)
{
  %'ModuleName'%.WriteLCDCommand(ReturnHomeCmd);                 %>40 /* moves the cursor to the beginning of the first line */
}

%endif %- Home
%-BW_METHOD_END Home
%-INTERNAL_METHOD_BEG WriteLCDData
%define! Parch
%include Common\GeneralInternal.inc (WriteLCDData)
void %'ModuleName'%.WriteLCDData(uint8_t ch)
{
#if %'ModuleName'%.CONFIG_WAIT_DISPLAY_US > 0
   %@Wait@'ModuleName'%.Waitus(%'ModuleName'%.CONFIG_WAIT_DISPLAY_US);%>40 /* wait for some time not to write to the display while he may be busy with previous command */
#endif
#if %'ModuleName'%.CONFIG_USE_DISPLAY_READ && %'ModuleName'%.CONFIG_USE_DISPLAY_READ_CHECK_BUSY_FLAG
   %'ModuleName'%.WaitForLCDReady();                             %>40 /* Wait until LCD is ready */
#endif
   SetRS();                                                      %>40 /* RS = 1: data mode */
#if %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==4
   /* 2 4bit transfer */
   DataPut((uint8_t)((ch&0xF0)>>4));                             %>40 /* Write the data (cycle #1) */
   EnablePulse();                                                %>40 /* transfer data */
   Waitus(%'ModuleName'%.CONFIG_WAIT_LCD_CMD_AFTER_4BIT_DATA1_US);
   DataPut((uint8_t)(ch&0x0F));                                  %>40 /* Write the data (cycle #2) */
   EnablePulse();                                                %>40 /* do the command transfer */
   Waitus(%'ModuleName'%.CONFIG_WAIT_LCD_CMD_AFTER_4BIT_DATA2_US);
#else
   /* 8bit data transfer */
   DataPut(ch);                                                  %>40 /* put data on bus */
   EnablePulse();                                                %>40 /* do the command transfer */
#endif
   ClrRS();                                                      %>40 /* RS = 0: back to command mode */
}

%-INTERNAL_METHOD_END WriteLCDData
%-BW_METHOD_BEGIN GotoXY
%ifdef GotoXY
%define! Parcolumn
%define! Parline
%include Common\LCDHTAGotoXY.Inc
void %'ModuleName'%.%GotoXY(uint8_t line, uint8_t column)
{
/* row is in the range 1..LCD_Nof_Lines and column in the range 1..LCD_Nof_Columns */
#if %'ModuleName'%.CONFIG_LCD_NOF_LINES==1
  /* only one line in LCD: ignore line argument */
  (void)line;                                                    %>40 /* to avoid compiler warning about unused variable */
  %'ModuleName'%.WriteLCDCommand((uint8_t)(GotoXYCmd + (column-1)));
#elif %'ModuleName'%.CONFIG_LCD_NOF_LINES==2
  %'ModuleName'%.WriteLCDCommand((uint8_t)(GotoXYCmd + (column-1) + (line==1 ? 0x00:Line2Offset)));
#elif %'ModuleName'%.CONFIG_LCD_NOF_LINES==3
  uint8_t offset;

  if (line==1) {
    offset = 0x00;
  } else if (line==2) {
    offset = Line2Offset;
  } else { /* line 3 */
    offset = Line3Offset;
  }
  %'ModuleName'%.WriteLCDCommand((uint8_t)(GotoXYCmd + (column-1) + offset));
#elif %'ModuleName'%.CONFIG_LCD_NOF_LINES==4
  uint8_t offset;

  if (line==1) {
    offset = 0x00;
  } else if (line==2) {
    offset = Line2Offset;
  } else if (line==3) {
    offset = Line3Offset;
  } else { /* line 4 */
    offset = Line4Offset;
  }
  %'ModuleName'%.WriteLCDCommand((uint8_t)(GotoXYCmd + (column-1) + offset));
#else
  #error "only up to 4 LCD lines are supported!"
#endif
}

%endif %- GotoXY
%-BW_METHOD_END GotoXY
%-BW_METHOD_BEGIN ShiftLeft
%ifdef ShiftLeft
%include Common\LCDHTAShiftLeft.Inc
void %'ModuleName'%.%ShiftLeft(void)
{
  %'ModuleName'%.WriteLCDCommand(LeftShiftCmd);
}

%endif %- ShiftLeft
%-BW_METHOD_END ShiftLeft
%-BW_METHOD_BEGIN Write
%ifdef Write
%define! Parch
%include Common\LCDHTAWrite.Inc
/* The method is implemented as a macro, see %'ModuleName'.h */
%endif %- Write
%-BW_METHOD_END Write
%-BW_METHOD_BEGIN WriteLn
%ifdef WriteLn
%include Common\LCDHTAWriteLn.Inc
void %'ModuleName'%.%WriteLn(void)
{
#if %'ModuleName'%.CONFIG_LCD_NOF_LINES==1
  /* only one line in LCD: move to beginning of first line */
  %'ModuleName'%.WriteLCDCommand(FirstLineCmd);
#elif %'ModuleName'%.CONFIG_LCD_NOF_LINES==2
  %'ModuleName'%.WriteLCDCommand(SecondLineCmd);
#else
  /* more than 2 lines, cannot use WriteLn() */
#endif
}

%endif %- WriteLn
%-BW_METHOD_END WriteLn
%-BW_METHOD_BEGIN WriteString
%ifdef WriteString
%define! Parstr
%include Common\LCDHTAWriteString.Inc
void %'ModuleName'%.%WriteString(char *str)
{
  while (*str != '\0'){
    %'ModuleName'%.Write(*str);
    str++;
  }
}

%endif %- WriteString
%-BW_METHOD_END WriteString
%-BW_METHOD_BEGIN WriteLineStr
%ifdef WriteLineStr
%define! Parline
%define! Parstr
%include Common\LCDHTAWriteLineStr.Inc
void %'ModuleName'%.%WriteLineStr(uint8_t line, char *str)
{
  uint8_t i;

  %'ModuleName'%.%Line(line);                                    %>40 /* select line */
  for(i = 0; i < %'ModuleName'%.MAX_LCD_LINE_CHARS && *str!='\0'; i++, str++) {
    %'ModuleName'%.Write(*str);
  }
  /* Clear the rest of the line */
  for (; i < %'ModuleName'%.MAX_LCD_LINE_CHARS; i++) {
    %'ModuleName'%.Write(' ');
  }
}

%endif %- WriteLineStr
%-BW_METHOD_END WriteLineStr
%-BW_METHOD_BEGIN Line
%ifdef Line
%include Common\LCDHTALine.Inc
void %'ModuleName'%.%Line(uint8_t line)
{
#if %'ModuleName'%.CONFIG_LCD_NOF_LINES==1
  /* we only have one line, so moving to the first line */
  (void)line;                                                    %>40 /* to avoid compiler warning about unused variable */
  %'ModuleName'%.WriteLCDCommand(FirstLineCmd);
#elif %'ModuleName'%.CONFIG_LCD_NOF_LINES==2
  %'ModuleName'%.WriteLCDCommand((uint8_t)(line==1?FirstLineCmd:SecondLineCmd));
#elif %'ModuleName'%.CONFIG_LCD_NOF_LINES==3
  if (line==1) {
    %'ModuleName'%.WriteLCDCommand((uint8_t)(FirstLineCmd));
  } else if (line==2) {
    %'ModuleName'%.WriteLCDCommand((uint8_t)(SecondLineCmd));
  } else { /* line == 3 */
    %'ModuleName'%.WriteLCDCommand((uint8_t)(ThirdLineCmd));
  }
#elif %'ModuleName'%.CONFIG_LCD_NOF_LINES==4
  if (line==1) {
    %'ModuleName'%.WriteLCDCommand((uint8_t)(FirstLineCmd));
  } else if (line==2) {
    %'ModuleName'%.WriteLCDCommand((uint8_t)(SecondLineCmd));
  } else if (line==3) {
    %'ModuleName'%.WriteLCDCommand((uint8_t)(ThirdLineCmd));
  } else { /* line == 4 */
    %'ModuleName'%.WriteLCDCommand((uint8_t)(FourthLineCmd));
  }
#else
  #error "only up to 4 LCD lines are supported!"
#endif
}

%endif %- Line
%-BW_METHOD_END Line
%-INTERNAL_METHOD_BEG Init
%include Common\GeneralInternal.inc (Init)
void %'ModuleName'%.Init(void)
{
  /* for non-Processor Expert projects, initialize the used pins */
#if %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED != %@sdk@'ModuleName'%.CONFIG_SDK_PROCESSOR_EXPERT
  %@RS@'ModuleName'%.Init();
  %@EN@'ModuleName'%.Init();
  #if %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==8
  %if defined(DB0)
  %@DB0@'ModuleName'%.Init();
  %else
  DB0Pin_Init();
  %endif
  %if defined(DB1)
  %@DB1@'ModuleName'%.Init();
  %else
  DB1Pin_Init();
  %endif
  %if defined(DB2)
  %@DB2@'ModuleName'%.Init();
  %else
  DB2Pin_Init();
  %endif
  %if defined(DB3)
  %@DB3@'ModuleName'%.Init();
  %else
  DB3Pin_Init();
  %endif
  #endif

  %@DB4@'ModuleName'%.Init();
  %@DB5@'ModuleName'%.Init();
  %@DB6@'ModuleName'%.Init();
  %@DB7@'ModuleName'%.Init();
  #if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  %if defined(E2)
  %@E2@'ModuleName'%.Init();
  %else
  E2Pin_Init();
  %endif
  #endif
  #if %'ModuleName'%.CONFIG_USE_RW_SIGNAL
  %if defined(RW)
  %@RW@'ModuleName'%.Init();
  %else
  RWPin_Init();
  %endif
  #endif
#endif

  /* This function initializes the driver.
     The low level init already shall have set our data port to input/output, currently set to output,
     plus all control pins are set as outputs with low values. To be sure, we do it here again. */
  ClrEN();                                                       %>40 /* EN Pin low */
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  ClrEN2();                                                      %>40 /* EN2 Pin low */
#endif
#if %'ModuleName'%.CONFIG_USE_RW_SIGNAL
  ClrRW();                                                       %>40 /* RW Pin low */
#endif
  ClrRS();                                                       %>40 /* RS Pin low: command mode */
  DataPut(0);

  /* make pins output */
  DataAsOutput();

  /* send the reset sequence according to the data sheet */
  Waitms(80);                                                    %>40 /* wait for more than 15ms after Vcc rises to 4.5V, wait for more than 40ms after Vcc rises to 2.7V. In case of POR (Power On Reset) we need some additional time. */
#if %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==4
  DataPut(0x3);                                                  %>40 /* BF cannot be checked before this function, function set (interface is 8bits long) */
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  %'ModuleName'%.UseDisplay(1);
  EnablePulse();                                                 %>40 /* transfer data */
  %'ModuleName'%.UseDisplay(2);
  EnablePulse();                                                 %>40 /* transfer data */
#else
  EnablePulse();                                                 %>40 /* transfer data */
#endif
  Waitms(5);                                                     %>40 /* wait for more than 4.1 ms */
  /* 0x3 is already on the bus from previous DataPut(), do not need to put it again here */
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  %'ModuleName'%.UseDisplay(1);
  EnablePulse();                                                 %>40 /* transfer data */
  %'ModuleName'%.UseDisplay(2);
  EnablePulse();                                                 %>40 /* transfer data */
#else
  EnablePulse();                                                 %>40 /* transfer data */
#endif
  Waitus(100);                                                   %>40 /* wait for more than 100us */
  /* 0x3 is already on the bus from previous DataPut(), do not need to put it again here */
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  %'ModuleName'%.UseDisplay(1);
  EnablePulse();                                                 %>40 /* transfer data */
  %'ModuleName'%.UseDisplay(2);
  EnablePulse();                                                 %>40 /* transfer data */
#else
  EnablePulse();                                                 %>40 /* transfer data */
#endif
  Waitus(100);                                                   %>40 /* wait for more than 100us */

  DataPut(0x2);                                                  %>40 /* Function set */
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  %'ModuleName'%.UseDisplay(1);
  EnablePulse();                                                 %>40 /* transfer data */
  %'ModuleName'%.UseDisplay(2);
  EnablePulse();                                                 %>40 /* transfer data */
#else
  EnablePulse();                                                 %>40 /* transfer data */
#endif
  Waitus(100);
#else
  DataPut(FunctionSetCmd|FunctionSet_8bit);                      %>40 /* Function set (interface is 8bit) */
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  %'ModuleName'%.UseDisplay(1);
  EnablePulse();                                                 %>40 /* transfer data */
  %'ModuleName'%.UseDisplay(2);
  EnablePulse();                                                 %>40 /* transfer data */
#else
  EnablePulse();                                                 %>40 /* transfer data */
#endif
  Waitms(5);                                                     %>40 /* wait at least 4.1ms */
  /* transmit again the same data (which is already on the bus */
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  %'ModuleName'%.UseDisplay(1);
  EnablePulse();                                                 %>40 /* transfer data */
  %'ModuleName'%.UseDisplay(2);
  EnablePulse();                                                 %>40 /* transfer data */
#else
  EnablePulse();                                                 %>40 /* transfer data */
#endif
  Waitus(100);                                                   %>40 /* wait at least 100us */
  /* transmit again the same data (which is already on the bus */
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  %'ModuleName'%.UseDisplay(1);
  EnablePulse();                                                 %>40 /* transfer data */
  %'ModuleName'%.UseDisplay(2);
  EnablePulse();                                                 %>40 /* transfer data */
#else
  EnablePulse();                                                 %>40 /* transfer data */
#endif /* %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==4 */
  Waitus(100);
#endif

#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  %'ModuleName'%.UseDisplay(1);
#endif
  %'ModuleName'%.WriteLCDCommand(FunctionSetCmd|FunctionSet_Font5x8
#if %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==4
                 |FunctionSet_4bit                               %>40 /* we are using 4bit data bus */
#else
                 |FunctionSet_8bit                               %>40 /* we are using 8bit data bus */
#endif
             #if %'ModuleName'%.CONFIG_LCD_NOF_LINES==1
                 |FunctionSet_1Line                              %>40 /* we are using only one line */
             #else
                 |FunctionSet_2Lines                             %>40 /* we are using two or more lines */
             #endif
                 );
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  %'ModuleName'%.UseDisplay(2);
  %'ModuleName'%.WriteLCDCommand(FunctionSetCmd|FunctionSet_Font5x8
#if %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==4
                 |FunctionSet_4bit                               %>40 /* we are using 4bit data bus */
#else
                 |FunctionSet_8bit                               %>40 /* we are using 8bit data bus */
#endif
             #if %'ModuleName'%.CONFIG_LCD_NOF_LINES==1
                 |FunctionSet_1Line                              %>40 /* we are using only one line */
             #else
                 |FunctionSet_2Lines                             %>40 /* we are using two or more lines */
             #endif
                 );
#endif

  DisplayOnOffControlStatus = DisplayOnOffControlCmd|DisplayOnOffControl_DisplayOn;%>40 /* Display on, cursor on, do not blink */
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  %'ModuleName'%.UseDisplay(1);
#endif
  %'ModuleName'%.WriteLCDCommand(DisplayOnOffControlStatus);
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  %'ModuleName'%.UseDisplay(2);
  %'ModuleName'%.WriteLCDCommand(DisplayOnOffControlStatus);
#endif
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  %'ModuleName'%.UseDisplay(1);
#endif
  %'ModuleName'%.WriteLCDCommand(ClearDisplayCmd); /* Clear display */
  %'ModuleName'%.WriteLCDCommand(EntryModeSetCmd|EntryModeSet_IncrementOn);%>40 /* Entry mode set: Increment mode, display shift off */
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  %'ModuleName'%.UseDisplay(2);
  %'ModuleName'%.WriteLCDCommand(ClearDisplayCmd); /* Clear display */
  %'ModuleName'%.WriteLCDCommand(EntryModeSetCmd|EntryModeSet_IncrementOn);%>40 /* Entry mode set: Increment mode, display shift off */
#endif
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  %'ModuleName'%.UseDisplay(1);
#endif
}

%-INTERNAL_METHOD_END Init
%-BW_METHOD_BEGIN LoadSoftChar
%ifdef LoadSoftChar
%define! ParcharCode
%define! ParsoftChar
%include Common\LCDHTALoadSoftChar.Inc
void %'ModuleName'%.%LoadSoftChar(uint8_t charCode, uint8_t *softChar)
{
  /* Loads a user defined character (soft character, 5x8 dots) into the CG-RAM
     in the display. The character can be used afterwards like a normal character code */
  #define CGAddress 0x40                                         %>40 /* Base address for softchars */
  #define DDAddress 0x80                                         %>40 /* To finish the download mode */
  uint8_t i;

  %'ModuleName'%.WriteLCDCommand((uint8_t)(CGAddress + (charCode * 0x08)));%>40 /* Set CG Ram: Character code * 0x08 [size] */
  for (i=0; i<=7; i++){
    %'ModuleName'%.Write(softChar[i]);
  }
  %'ModuleName'%.WriteLCDCommand(DDAddress);                     %>40 /* finish the download */
}

%endif %- LoadSoftChar
%-BW_METHOD_END LoadSoftChar
%-BW_METHOD_BEGIN ShiftRight
%ifdef ShiftRight
%include Common\LCDHTAShiftRight.Inc
void %'ModuleName'%.%ShiftRight(void)
{
  %'ModuleName'%.WriteLCDCommand(RightShiftCmd);
}

%endif %- ShiftRight
%-BW_METHOD_END ShiftRight
%-BW_METHOD_BEGIN CursorOn
%ifdef CursorOn
%include Common\LCDHTACursorOn.Inc
void %'ModuleName'%.%CursorOn(void)
{
  DisplayOnOffControlStatus |= DisplayOnOffControl_CursorOn;
  %'ModuleName'%.WriteLCDCommand(DisplayOnOffControlStatus);
}

%endif %- CursorOn
%-BW_METHOD_END CursorOn
%-BW_METHOD_BEGIN CursorOff
%ifdef CursorOff
%include Common\LCDHTACursorOff.Inc
void %'ModuleName'%.%CursorOff(void)
{
  DisplayOnOffControlStatus &= ~DisplayOnOffControl_CursorOn;
  %'ModuleName'%.WriteLCDCommand(DisplayOnOffControlStatus);
}

%endif %- CursorOff
%-BW_METHOD_END CursorOff
%-BW_METHOD_BEGIN DisplayOn
%ifdef DisplayOn
%include Common\LCDHTADisplayOn.Inc
void %'ModuleName'%.%DisplayOn(void)
{
  DisplayOnOffControlStatus |= DisplayOnOffControl_DisplayOn;
  %'ModuleName'%.WriteLCDCommand(DisplayOnOffControlStatus);
}

%endif %- DisplayOn
%-BW_METHOD_END DisplayOn
%-BW_METHOD_BEGIN DisplayOff
%ifdef DisplayOff
%include Common\LCDHTADisplayOff.Inc
void %'ModuleName'%.%DisplayOff(void)
{
  DisplayOnOffControlStatus &= ~DisplayOnOffControl_DisplayOn;
  %'ModuleName'%.WriteLCDCommand(DisplayOnOffControlStatus);
}

%endif %- DisplayOff
%-BW_METHOD_END DisplayOff
%-BW_METHOD_BEGIN BlinkingOn
%ifdef BlinkingOn
%include Common\LCDHTABlinkingOn.Inc
void %'ModuleName'%.%BlinkingOn(void)
{
  DisplayOnOffControlStatus |= DisplayOnOffControl_BlinkOn;
  %'ModuleName'%.WriteLCDCommand(DisplayOnOffControlStatus);
}

%endif %- BlinkingOn
%-BW_METHOD_END BlinkingOn
%-BW_METHOD_BEGIN BlinkingOff
%ifdef BlinkingOff
%include Common\LCDHTABlinkingOff.Inc
void %'ModuleName'%.%BlinkingOff(void)
{
  DisplayOnOffControlStatus &= ~DisplayOnOffControl_BlinkOn;
  %'ModuleName'%.WriteLCDCommand(DisplayOnOffControlStatus);
}

%endif %- BlinkingOff
%-BW_METHOD_END BlinkingOff
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetEntryMode
%ifdef SetEntryMode
%define! Parincrement
%define! ParshiftLeft
%include Common\LCDHTASetEntryMode.Inc
void %'ModuleName'%.%SetEntryMode(bool increment, bool shiftLeft)
{
  uint8_t flags = 0;

  if (increment) {
    flags |= EntryModeSet_IncrementOn;
  }
  if (shiftLeft) {
    flags |= EntryModeSet_ShiftOn;
  }
  %'ModuleName'%.WriteLCDCommand((uint8_t)(EntryModeSetCmd|flags));%>40 /* Entry mode set: Increment mode, display shift mode */
}

%endif %- SetEntryMode
%-BW_METHOD_END SetEntryMode
%-************************************************************************************************************
%-BW_METHOD_BEGIN UseDisplay
%ifdef UseDisplay
%define! Pardisplay
%define! RetVal
%include Common\LCDHTAUseDisplay.Inc
uint8_t %'ModuleName'%.%UseDisplay(uint8_t display)
{
#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
  if (!(display==1 || display==2)) {
    return ERR_FAILED; /* wrong argument */
  }
  %'ModuleName'%.currDisplay = display;
#else
  (void)display; /* not used, as not using E2 (additional enable) signal */
#endif
  return ERR_OK;
}

%endif %- UseDisplay
%-BW_METHOD_END UseDisplay
%-************************************************************************************************************
%-BW_METHOD_BEGIN CursorShiftRight
%ifdef CursorShiftRight
%include Common\LCDHTACursorShiftRight.Inc
void %'ModuleName'%.%CursorShiftRight(void)
{
  %'ModuleName'%.WriteLCDCommand(RightShiftCursor);
}

%endif %- CursorShiftRight
%-BW_METHOD_END CursorShiftRight
%-************************************************************************************************************
%-BW_METHOD_BEGIN CursorShiftLeft
%ifdef CursorShiftLeft
%include Common\LCDHTACursorShiftLeft.Inc
void %'ModuleName'%.%CursorShiftLeft(void)
{
  %'ModuleName'%.WriteLCDCommand(LeftShiftCursor);
}

%endif %- CursorShiftLeft
%-BW_METHOD_END CursorShiftLeft
%-************************************************************************************************************
%-BW_METHOD_BEGIN DeInit
%ifdef DeInit
%include Common\LCDHTADeInit.Inc
void %'ModuleName'%.%DeInit(void)
{
  /* nothing needed */
}

%endif %- DeInit
%-BW_METHOD_END DeInit
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  %'ModuleName'%.Init(); /* initializes the display driver */
%CODE_END
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for LCDHTA
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is used to configure settings of the character LCD module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

#ifndef %'ModuleName'%.CONFIG_LCD_TYPE
%if defined(LCDType) && %LCDType = "1"
  #define %'ModuleName'%.CONFIG_LCD_TYPE   (1)
%else
  #define %'ModuleName'%.CONFIG_LCD_TYPE   (0)
%endif
    /*!< 1: Diplaytech 162c: use different timing than the default. 0: use default timing */
#endif

#define %'ModuleName'%.CONFIG_LCD_NOF_LINES                        (%LCD_Nof_Lines) /* 1, 2, 3 or 4 */

%if %DataBusWidth='4bit'
#define %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH                   (4) /* 4 or 8 */
%elif %DataBusWidth='8bit'
#define %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH                   (8) /* 4 or 8 */
%endif

%if defined(DataBus)
#define %'ModuleName'%.CONFIG_LCD_DATA_BUS_PORT_8BIT               (1)
%else
#define %'ModuleName'%.CONFIG_LCD_DATA_BUS_PORT_8BIT               (0)
%endif
  /*!< 1: using 8bit data port; 0: not using 8bit data port */

#include "%@RS@ModuleName.h" /* RS signal pin header file */
#include "%@EN@ModuleName.h" /* EN signal pin header file */
#if %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==8 /* extra includes for 8bit data bus */
%if defined(DB0)
  #include "%@DB0@ModuleName.h" /* DB0 signal pin header file */
%else
  #include "DB01.h" /* DB0 signal pin header file */
%endif
%if defined(DB1)
  #include "%@DB1@ModuleName.h" /* DB1 signal pin header file */
%else
  #include "DB11.h" /* DB1 signal pin header file */
%endif
%if defined(DB2)
  #include "%@DB2@ModuleName.h" /* DB2 signal pin header file */
%else
  #include "DB21.h" /* DB2 signal pin header file */
%endif
%if defined(DB3)
  #include "%@DB3@ModuleName.h" /* DB3 signal pin header file */
%else
  #include "DB31.h" /* DB3 signal pin header file */
%endif
#endif /* %'ModuleName'%.CONFIG_LCD_DATA_BUS_WIDTH==8 */
#include "%@DB4@ModuleName.h" /* DB4 signal pin header file */
#include "%@DB5@ModuleName.h" /* DB5 signal pin header file */
#include "%@DB6@ModuleName.h" /* DB6 signal pin header file */
#include "%@DB7@ModuleName.h" /* DB7 signal pin header file */

#ifndef %'ModuleName'%.CONFIG_USE_E2_SIGNAL
%if defined(E2)
  #define %'ModuleName'%.CONFIG_USE_E2_SIGNAL   (1)
%else
  #define %'ModuleName'%.CONFIG_USE_E2_SIGNAL   (0)
%endif
  /*!< 1: Use E2 signal to control upper and lower half of display. 0: do not use E2 signal */
#endif

#if %'ModuleName'%.CONFIG_USE_E2_SIGNAL
%if defined(E2)
  #include "%@E2@ModuleName.h"
%else
  #include "EN2.h"
%endif
#endif

#ifndef %'ModuleName'%.CONFIG_USE_DISPLAY_READ
%if defined(ReadFromDisplay) & %ReadFromDisplay='yes'
  #define %'ModuleName'%.CONFIG_USE_DISPLAY_READ   (1)
%else
  #define %'ModuleName'%.CONFIG_USE_DISPLAY_READ   (0)
%endif
  /*!< 1: Read from the display. Requires R/W signal. 0: do not read from the display */
#endif

#ifndef %'ModuleName'%.CONFIG_USE_DISPLAY_READ_CHECK_BUSY_FLAG
#if %'ModuleName'%.CONFIG_USE_DISPLAY_READ && %'ModuleName'%.CONFIG_USE_DISPLAY_READ_CHECK_BUSY_FLAG
  #define %'ModuleName'%.CONFIG_USE_DISPLAY_READ_CHECK_BUSY_FLAG   (1 && %'ModuleName'%.CONFIG_USE_DISPLAY_READ)
#else
  #define %'ModuleName'%.CONFIG_USE_DISPLAY_READ_CHECK_BUSY_FLAG   (0 && %'ModuleName'%.CONFIG_USE_DISPLAY_READ)
#endif
  /*!< 1: Check the busy flag Requires reading from the display. 0: do not check busy flag */
#endif

#ifndef %'ModuleName'%.CONFIG_USE_RW_SIGNAL
%if defined(E2)
  #define %'ModuleName'%.CONFIG_USE_RW_SIGNAL   (1 && %'ModuleName'%.CONFIG_USE_DISPLAY_READ)
%else
  #define %'ModuleName'%.CONFIG_USE_RW_SIGNAL   (0 && %'ModuleName'%.CONFIG_USE_DISPLAY_READ)
%endif
  /*!< 1: Use RW signal to read/write from the display. 0: do not use RW signal */
#endif

#if %'ModuleName'%.CONFIG_USE_RW_SIGNAL
%if defined(RW)
  #include "%@RW@ModuleName.h"
%else
  #include "RW1.h"
%endif
#endif

#define %'ModuleName'%.CONFIG_WAIT_DISPLAY_US                      %WaitDisplayUs /* wait time as specified in properties */
#define %'ModuleName'%.CONFIG_WAIT_LCD_CMD_AFTER_4BIT_DATA1_US     15 /* wait time after first 4bit data */
#define %'ModuleName'%.CONFIG_WAIT_LCD_CMD_AFTER_4BIT_DATA2_US     60 /* wait time after second 4bit data */

#endif /* __%'ModuleName'_CONFIG_H */
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
