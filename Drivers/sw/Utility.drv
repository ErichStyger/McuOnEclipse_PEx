%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    02.07.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%define! Description_ShiftRightAndFill Moves the content of a string to the right and fills the space on the left side with a pattern
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%INTERFACE
%define! Settings Common\UtilitySettings.Inc
%define! Abstract Common\UtilityAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"

/* other includes needed */
#include <string.h>
#include <stddef.h> /* for size_t */
/* special version */
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%include sw\CommonSupport.prg
%-
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
#ifdef __cplusplus
extern "C" {
#endif

typedef enum {
  %'ModuleName'_SEP_NUM_TYPE_UINT8, /* uint8_t number type */
  %'ModuleName'_SEP_NUM_TYPE_UINT8_HEX_NO_PREFIX /* uint8_t hex number type, no 0x prefix */
} %'ModuleName'_SeparatedNumberType;
%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcpy
%ifdef strcpy
void %'ModuleName'%.%strcpy(uint8_t *dst, size_t dstSize, const unsigned char *src);
%define! Pardst
%define! PardstSize
%define! Parsrc
%include Common\Utilitystrcpy.Inc

%endif %- strcpy
%-BW_METHOD_END strcpy
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcat
%ifdef strcat
void %'ModuleName'%.%strcat(uint8_t *dst, size_t dstSize, const unsigned char *src);
%define! Pardst
%define! PardstSize
%define! Parsrc
%include Common\Utilitystrcat.Inc

%endif %- strcat
%-BW_METHOD_END strcat
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num16sToStr
%ifdef Num16sToStr
void %'ModuleName'%.%Num16sToStr(uint8_t *dst, size_t dstSize, int16_t val);
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilityNum16sToStr.Inc

%endif %- Num16sToStr
%-BW_METHOD_END Num16sToStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num16sToStrFormatted
%ifdef Num16sToStrFormatted
void %'ModuleName'%.%Num16sToStrFormatted(uint8_t *dst, size_t dstSize, int16_t val, char fill, uint8_t nofFill);
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilityNum16sToStrFormatted.Inc

%endif %- Num16sToStrFormatted
%-BW_METHOD_END Num16sToStrFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum16s
%ifdef strcatNum16s
void %'ModuleName'%.%strcatNum16s(uint8_t *dst, size_t dstSize, int16_t val);
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilitystrcatNum16s.Inc

%endif %- strcatNum16s
%-BW_METHOD_END strcatNum16s
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum16sFormatted
%ifdef strcatNum16sFormatted
void %'ModuleName'%.%strcatNum16sFormatted(uint8_t *dst, size_t dstSize, int16_t val, char fill, uint8_t nofFill);
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilitystrcatNum16sFormatted.Inc

%endif %- strcatNum16sFormatted
%-BW_METHOD_END strcatNum16sFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum8Hex
%ifdef strcatNum8Hex
void %'ModuleName'%.%strcatNum8Hex(uint8_t *dst, size_t dstSize, uint8_t num);
%define! Pardst
%define! PardstSize
%define! Parnum
%include Common\UtilitystrcatNum8Hex.Inc

%endif %- strcatNum8Hex
%-BW_METHOD_END strcatNum8Hex
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum16Hex
%ifdef strcatNum16Hex
void %'ModuleName'%.%strcatNum16Hex(uint8_t *dst, size_t dstSize, uint16_t num);
%define! Pardst
%define! PardstSize
%define! Parnum
%include Common\UtilitystrcatNum16Hex.Inc

%endif %- strcatNum16Hex
%-BW_METHOD_END strcatNum16Hex
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum32s
%ifdef strcatNum32s
void %'ModuleName'%.%strcatNum32s(uint8_t *dst, size_t dstSize, int32_t val);
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilitystrcatNum32s.Inc

%endif %- strcatNum32s
%-BW_METHOD_END strcatNum32s
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num32sToStr
%ifdef Num32sToStr
void %'ModuleName'%.%Num32sToStr(uint8_t *dst, size_t dstSize, int32_t val);
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilityNum32sToStr.Inc

%endif %- Num32sToStr
%-BW_METHOD_END Num32sToStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum32Hex
%ifdef strcatNum32Hex
void %'ModuleName'%.%strcatNum32Hex(uint8_t *dst, size_t dstSize, uint32_t num);
%define! Pardst
%define! PardstSize
%define! Parnum
%include Common\UtilitystrcatNum32Hex.Inc

%endif %- strcatNum32Hex
%-BW_METHOD_END strcatNum32Hex
%-************************************************************************************************************
%-BW_METHOD_BEGIN IsLeapYear
%ifdef IsLeapYear
bool %'ModuleName'%.%IsLeapYear(uint16_t year);
%define! Paryear
%define! RetVal
%include Common\UtilityIsLeapYear.Inc

%endif %- IsLeapYear
%-BW_METHOD_END IsLeapYear
%-************************************************************************************************************
%-BW_METHOD_BEGIN WeekDay
%ifdef WeekDay
uint8_t %'ModuleName'%.%WeekDay(uint16_t year, uint8_t month, uint8_t day);
%define! Paryear
%define! Parmonth
%define! Parday
%define! RetVal
%include Common\UtilityWeekDay.Inc

%endif %- WeekDay
%-BW_METHOD_END WeekDay
%-************************************************************************************************************
%-BW_METHOD_BEGIN chcat
%ifdef chcat
void %'ModuleName'%.%chcat(uint8_t *dst, size_t dstSize, uint8_t ch);
%define! Pardst
%define! PardstSize
%define! Parch
%include Common\Utilitychcat.Inc

%endif %- chcat
%-BW_METHOD_END chcat
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum32u
%ifdef strcatNum32u
void %'ModuleName'%.%strcatNum32u(uint8_t *dst, size_t dstSize, uint32_t val);
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilitystrcatNum32u.Inc

%endif %- strcatNum32u
%-BW_METHOD_END strcatNum32u
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num32uToStr
%ifdef Num32uToStr
void %'ModuleName'%.%Num32uToStr(uint8_t *dst, size_t dstSize, uint32_t val);
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilityNum32uToStr.Inc

%endif %- Num32uToStr
%-BW_METHOD_END Num32uToStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum32uFormatted
%ifdef strcatNum32uFormatted
void %'ModuleName'%.%strcatNum32uFormatted(uint8_t *dst, size_t dstSize, uint32_t val, char fill, uint8_t nofFill);
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilitystrcatNum32uFormatted.Inc

%endif %- strcatNum32uFormatted
%-BW_METHOD_END strcatNum32uFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num32uToStrFormatted
%ifdef Num32uToStrFormatted
void %'ModuleName'%.%Num32uToStrFormatted(uint8_t *dst, size_t dstSize, uint32_t val, char fill, uint8_t nofFill);
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilityNum32uToStrFormatted.Inc

%endif %- Num32uToStrFormatted
%-BW_METHOD_END Num32uToStrFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum24Hex
%ifdef strcatNum24Hex
void %'ModuleName'%.%strcatNum24Hex(uint8_t *dst, size_t dstSize, uint32_t num);
%define! Pardst
%define! PardstSize
%define! Parnum
%include Common\UtilitystrcatNum24Hex.Inc

%endif %- strcatNum24Hex
%-BW_METHOD_END strcatNum24Hex
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadEscapedName
%ifdef ReadEscapedName
uint8_t %'ModuleName'%.%ReadEscapedName(const unsigned char *filename, uint8_t *destname, size_t maxlen, size_t *lenRead, size_t *lenWritten, const char *terminators);
%define! Parfilename
%define! Pardestname
%define! Parmaxlen
%define! ParlenRead
%define! ParfileName
%define! ParlenWritten
%define! Parterminators
%define! RetVal
%include Common\UtilityReadEscapedName.Inc

%endif %- ReadEscapedName
%-BW_METHOD_END ReadEscapedName
%-************************************************************************************************************
%-BW_METHOD_BEGIN xatoi
%ifdef xatoi
uint8_t %'ModuleName'%.%xatoi(const unsigned char **str, int32_t *res);
%define! Parstr
%define! Parres
%define! RetVal
%include Common\Utilityxatoi.Inc

%endif %- xatoi
%-BW_METHOD_END xatoi
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDate
%ifdef ScanDate
uint8_t %'ModuleName'%.%ScanDate(const unsigned char **str, uint8_t *day, uint8_t *month, uint16_t *year);
%define! Parstr
%define! Parday
%define! Parmonth
%define! Paryear
%define! RetVal
%include Common\UtilityScanDate.Inc

%endif %- ScanDate
%-BW_METHOD_END ScanDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanTime
%ifdef ScanTime
uint8_t %'ModuleName'%.%ScanTime(const unsigned char **str, uint8_t *hour, uint8_t *minute, uint8_t *second, uint8_t *hSecond);
%define! Parstr
%define! Parhour
%define! Parminute
%define! Parsecond
%define! ParhSecond
%define! RetVal
%include Common\UtilityScanTime.Inc

%endif %- ScanTime
%-BW_METHOD_END ScanTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDecimal16uNumber
%ifdef ScanDecimal16uNumber
uint8_t %'ModuleName'%.%ScanDecimal16uNumber(const unsigned char **str, uint16_t *val);
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanDecimal16uNumber.Inc

%endif %- ScanDecimal16uNumber
%-BW_METHOD_END ScanDecimal16uNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDecimal8uNumber
%ifdef ScanDecimal8uNumber
uint8_t %'ModuleName'%.%ScanDecimal8uNumber(const unsigned char **str, uint8_t *val);
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanDecimal8uNumber.Inc

%endif %- ScanDecimal8uNumber
%-BW_METHOD_END ScanDecimal8uNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num16uToStr
%ifdef Num16uToStr
void %'ModuleName'%.%Num16uToStr(uint8_t *dst, size_t dstSize, uint16_t val);
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilityNum16uToStr.Inc

%endif %- Num16uToStr
%-BW_METHOD_END Num16uToStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num8sToStr
%ifdef Num8sToStr
void %'ModuleName'%.%Num8sToStr(uint8_t *dst, size_t dstSize, signed char val);
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilityNum8sToStr.Inc

%endif %- Num8sToStr
%-BW_METHOD_END Num8sToStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num8uToStr
%ifdef Num8uToStr
void %'ModuleName'%.%Num8uToStr(uint8_t *dst, size_t dstSize, uint8_t val);
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilityNum8uToStr.Inc

%endif %- Num8uToStr
%-BW_METHOD_END Num8uToStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num16uToStrFormatted
%ifdef Num16uToStrFormatted
void %'ModuleName'%.%Num16uToStrFormatted(uint8_t *dst, size_t dstSize, uint16_t val, char fill, uint8_t nofFill);
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilityNum16uToStrFormatted.Inc

%endif %- Num16uToStrFormatted
%-BW_METHOD_END Num16uToStrFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num32sToStrFormatted
%ifdef Num32sToStrFormatted
void %'ModuleName'%.%Num32sToStrFormatted(uint8_t *dst, size_t dstSize, int32_t val, char fill, uint8_t nofFill);
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilityNum32sToStrFormatted.Inc

%endif %- Num32sToStrFormatted
%-BW_METHOD_END Num32sToStrFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum16u
%ifdef strcatNum16u
void %'ModuleName'%.%strcatNum16u(uint8_t *dst, size_t dstSize, uint16_t val);
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilitystrcatNum16u.Inc

%endif %- strcatNum16u
%-BW_METHOD_END strcatNum16u
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum16uFormatted
%ifdef strcatNum16uFormatted
void %'ModuleName'%.%strcatNum16uFormatted(uint8_t *dst, size_t dstSize, uint16_t val, char fill, uint8_t nofFill);
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilitystrcatNum16uFormatted.Inc

%endif %- strcatNum16uFormatted
%-BW_METHOD_END strcatNum16uFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum32sFormatted
%ifdef strcatNum32sFormatted
void %'ModuleName'%.%strcatNum32sFormatted(uint8_t *dst, size_t dstSize, int32_t val, char fill, uint8_t nofFill);
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilitystrcatNum32sFormatted.Inc

%endif %- strcatNum32sFormatted
%-BW_METHOD_END strcatNum32sFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDecimal32uNumber
%ifdef ScanDecimal32uNumber
uint8_t %'ModuleName'%.%ScanDecimal32uNumber(const unsigned char **str, uint32_t *val);
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanDecimal32uNumber.Inc

%endif %- ScanDecimal32uNumber
%-BW_METHOD_END ScanDecimal32uNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum8u
%ifdef strcatNum8u
void %'ModuleName'%.%strcatNum8u(uint8_t *dst, size_t dstSize, uint8_t val);
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilitystrcatNum8u.Inc

%endif %- strcatNum8u
%-BW_METHOD_END strcatNum8u
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum8s
%ifdef strcatNum8s
void %'ModuleName'%.%strcatNum8s(uint8_t *dst, size_t dstSize, signed char val);
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilitystrcatNum8s.Inc

%endif %- strcatNum8s
%-BW_METHOD_END strcatNum8s
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcmp
%ifdef strcmp
#define %'ModuleName'%.%strcmp(str1, str2) \
  strcmp(str1, str2)

%define! Parstr1
%define! Parstr2
%define! RetVal
%include Common\Utilitystrcmp.Inc

%endif %- strcmp
%-BW_METHOD_END strcmp
%-************************************************************************************************************
%-BW_METHOD_BEGIN strncmp
%ifdef strncmp
#define %'ModuleName'%.%strncmp(str1, str2, size) \
  strncmp(str1, str2, size)

%define! Parstr1
%define! Parstr2
%define! Parsize
%define! RetVal
%include Common\Utilitystrncmp.Inc

%endif %- strncmp
%-BW_METHOD_END strncmp
%-************************************************************************************************************
%-BW_METHOD_BEGIN strlen
%ifdef strlen
#define %'ModuleName'%.%strlen(str) \
  strlen(str)

%define! Parstr
%define! RetVal
%include Common\Utilitystrlen.Inc

%endif %- strlen
%-BW_METHOD_END strlen
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanHex32uNumber
%ifdef ScanHex32uNumber
uint8_t %'ModuleName'%.%ScanHex32uNumber(const unsigned char **str, uint32_t *val);
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanHex32uNumber.Inc

%endif %- ScanHex32uNumber
%-BW_METHOD_END ScanHex32uNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanHex16uNumber
%ifdef ScanHex16uNumber
uint8_t %'ModuleName'%.%ScanHex16uNumber(const unsigned char **str, uint16_t *val);
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanHex16uNumber.Inc

%endif %- ScanHex16uNumber
%-BW_METHOD_END ScanHex16uNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanHex8uNumber
%ifdef ScanHex8uNumber
uint8_t %'ModuleName'%.%ScanHex8uNumber(const unsigned char **str, uint8_t *val);
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanHex8uNumber.Inc

%endif %- ScanHex8uNumber
%-BW_METHOD_END ScanHex8uNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN strtailcmp
%ifdef strtailcmp
uint8_t %'ModuleName'%.%strtailcmp(const uint8_t *str, const uint8_t *tail);
%define! Parstr
%define! Partail
%define! RetVal
%include Common\Utilitystrtailcmp.Inc

%endif %- strtailcmp
%-BW_METHOD_END strtailcmp
%-************************************************************************************************************
%-BW_METHOD_BEGIN strCutTail
%ifdef strCutTail
uint8_t %'ModuleName'%.%strCutTail(uint8_t *str, uint8_t *tail);
%define! Parstr
%define! Partail
%define! RetVal
%include Common\UtilitystrCutTail.Inc

%endif %- strCutTail
%-BW_METHOD_END strCutTail
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanHex8uNumberNoPrefix
%ifdef ScanHex8uNumberNoPrefix
uint8_t %'ModuleName'%.%ScanHex8uNumberNoPrefix(const unsigned char **str, uint8_t *val);
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanHex8uNumberNoPrefix.Inc

%endif %- ScanHex8uNumberNoPrefix
%-BW_METHOD_END ScanHex8uNumberNoPrefix
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum32sDotValue100
%ifdef strcatNum32sDotValue100
void %'ModuleName'%.%strcatNum32sDotValue100(uint8_t *dst, size_t dstSize, int32_t num);
%define! Pardst
%define! PardstSize
%define! Parnum
%include Common\UtilitystrcatNum32sDotValue100.Inc

%endif %- strcatNum32sDotValue100
%-BW_METHOD_END strcatNum32sDotValue100
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDecimal8sNumber
%ifdef ScanDecimal8sNumber
uint8_t %'ModuleName'%.%ScanDecimal8sNumber(const unsigned char **str, signed char *val);
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanDecimal8sNumber.Inc

%endif %- ScanDecimal8sNumber
%-BW_METHOD_END ScanDecimal8sNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDecimal16sNumber
%ifdef ScanDecimal16sNumber
uint8_t %'ModuleName'%.%ScanDecimal16sNumber(const unsigned char **str, int16_t *val);
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanDecimal16sNumber.Inc

%endif %- ScanDecimal16sNumber
%-BW_METHOD_END ScanDecimal16sNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDecimal32sNumber
%ifdef ScanDecimal32sNumber
uint8_t %'ModuleName'%.%ScanDecimal32sNumber(const unsigned char **str, int32_t *val);
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanDecimal32sNumber.Inc

%endif %- ScanDecimal32sNumber
%-BW_METHOD_END ScanDecimal32sNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN strFind
%ifdef strFind
int16_t %'ModuleName'%.%strFind(uint8_t *str, uint8_t *subStr);
%define! Parstr
%define! ParsubStr
%define! RetVal
%include Common\UtilitystrFind.Inc

%endif %- strFind
%-BW_METHOD_END strFind
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanSeparatedNumbers
%ifdef ScanSeparatedNumbers
uint8_t %'ModuleName'%.%ScanSeparatedNumbers(const unsigned char **str, uint8_t *values, uint8_t nofValues, char separator, %'ModuleName'_SeparatedNumberType numberType);
%define! Parstr
%define! ParnofValues
%define! Parseparator
%define! ParnumberType
%define! Parvalues
%define! RetVal
%include Common\UtilityScanSeparatedNumbers.Inc

%endif %- ScanSeparatedNumbers
%-BW_METHOD_END ScanSeparatedNumbers
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDoubleQuotedString
%ifdef ScanDoubleQuotedString
uint8_t %'ModuleName'%.%ScanDoubleQuotedString(const uint8_t **cmd, uint8_t *buf, size_t bufSize);
%define! Parcmd
%define! Parbuf
%define! ParbufSize
%define! RetVal
%include Common\UtilityScanDoubleQuotedString.Inc

%endif %- ScanDoubleQuotedString
%-BW_METHOD_END ScanDoubleQuotedString
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDecimal32sDotNumber
%ifdef ScanDecimal32sDotNumber
uint8_t %'ModuleName'%.%ScanDecimal32sDotNumber(const unsigned char **str, int32_t *integral, uint32_t *fractional, uint8_t *nofFractionalZeros);
%define! Parstr
%define! Parintegral
%define! Parfractional
%define! ParnofFractionalZeros
%define! RetVal
%include Common\UtilityScanDecimal32sDotNumber.Inc

%endif %- ScanDecimal32sDotNumber
%-BW_METHOD_END ScanDecimal32sDotNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatPad
%ifdef strcatPad
void %'ModuleName'%.%strcatPad(uint8_t *dst, size_t dstSize, const unsigned char *src, char padChar, uint8_t srcPadSize);
%define! Pardst
%define! PardstSize
%define! Parsrc
%define! ParpadChar
%define! ParsrcPadSize
%include Common\UtilitystrcatPad.Inc

%endif %- strcatPad
%-BW_METHOD_END strcatPad
%-************************************************************************************************************
%-BW_METHOD_BEGIN NumFloatToStr
%ifdef NumFloatToStr
void %'ModuleName'%.%NumFloatToStr(uint8_t *dst, size_t dstSize, float val, uint8_t nofFracDigits);
%define! Pardst
%define! PardstSize
%define! Parval
%define! ParnofFracDigits
%include Common\UtilityNumFloatToStr.Inc

%endif %- NumFloatToStr
%-BW_METHOD_END NumFloatToStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNumFloat
%ifdef strcatNumFloat
void %'ModuleName'%.%strcatNumFloat(uint8_t *dst, size_t dstSize, float val, uint8_t nofFracDigits);
%define! Pardst
%define! PardstSize
%define! Parval
%define! ParnofFracDigits
%include Common\UtilitystrcatNumFloat.Inc

%endif %- strcatNumFloat
%-BW_METHOD_END strcatNumFloat
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetValue16LE
%ifdef GetValue16LE
uint16_t %'ModuleName'%.%GetValue16LE(uint8_t *dataP);
%define! PardataP
%define! RetVal
%include Common\UtilityGetValue16LE.Inc

%endif %- GetValue16LE
%-BW_METHOD_END GetValue16LE
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetValue24LE
%ifdef GetValue24LE
uint32_t %'ModuleName'%.%GetValue24LE(uint8_t *dataP);
%define! PardataP
%define! RetVal
%include Common\UtilityGetValue24LE.Inc

%endif %- GetValue24LE
%-BW_METHOD_END GetValue24LE
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetValue32LE
%ifdef GetValue32LE
uint32_t %'ModuleName'%.%GetValue32LE(uint8_t *dataP);
%define! PardataP
%define! RetVal
%include Common\UtilityGetValue32LE.Inc

%endif %- GetValue32LE
%-BW_METHOD_END GetValue32LE
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetValue16LE
%ifdef SetValue16LE
void %'ModuleName'%.%SetValue16LE(uint16_t data, uint8_t *dataP);
%define! Pardata
%define! PardataP
%include Common\UtilitySetValue16LE.Inc

%endif %- SetValue16LE
%-BW_METHOD_END SetValue16LE
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetValue24LE
%ifdef SetValue24LE
void %'ModuleName'%.%SetValue24LE(uint32_t data, uint8_t *dataP);
%define! Pardata
%define! PardataP
%include Common\UtilitySetValue24LE.Inc

%endif %- SetValue24LE
%-BW_METHOD_END SetValue24LE
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetValue32LE
%ifdef SetValue32LE
void %'ModuleName'%.%SetValue32LE(uint32_t data, uint8_t *dataP);
%define! Pardata
%define! PardataP
%include Common\UtilitySetValue32LE.Inc

%endif %- SetValue32LE
%-BW_METHOD_END SetValue32LE
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\UtilityDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\UtilityInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN map
%ifdef map
int32_t %'ModuleName'%.%map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);
%define! Parx
%define! Parin_min
%define! Parin_max
%define! Parout_min
%define! Parout_max
%define! RetVal
%include Common\Utilitymap.Inc

%endif %- map
%-BW_METHOD_END map
%-************************************************************************************************************
%-BW_METHOD_BEGIN constrain
%ifdef constrain
int32_t %'ModuleName'%.%constrain(int32_t val, int32_t min, int32_t max);
%define! Parval
%define! Parmin
%define! Parmax
%define! RetVal
%include Common\Utilityconstrain.Inc

%endif %- constrain
%-BW_METHOD_END constrain
%-************************************************************************************************************
%-BW_METHOD_BEGIN random
%ifdef random
int32_t %'ModuleName'%.%random(int32_t min, int32_t max);
%define! Parmin
%define! Parmax
%define! RetVal
%include Common\Utilityrandom.Inc

%endif %- random
%-BW_METHOD_END random
%-************************************************************************************************************
%-BW_METHOD_BEGIN randomSetSeed
%ifdef randomSetSeed
void %'ModuleName'%.%randomSetSeed(unsigned int seed);
%define! Parseed
%include Common\UtilityrandomSetSeed.Inc

%endif %- randomSetSeed
%-BW_METHOD_END randomSetSeed
%-************************************************************************************************************
%-BW_METHOD_BEGIN map64
%ifdef map64
#ifdef __GNUC__ /* HIWARE compiler does not support 64bit data types */
int64_t %'ModuleName'%.%map64(int64_t x, int64_t in_min, int64_t in_max, int64_t out_min, int64_t out_max);
#endif
%define! Parx
%define! Parin_min
%define! Parin_max
%define! Parout_min
%define! Parout_max
%define! RetVal
%include Common\Utilitymap64.Inc

%endif %- map64
%-BW_METHOD_END map64
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNumHex
%ifdef strcatNumHex
void %'ModuleName'%.%strcatNumHex(uint8_t *dst, size_t dstSize, uint32_t num, uint8_t nofBytes);
%define! Pardst
%define! PardstSize
%define! Parnum
%define! ParnofBytes
%include Common\UtilitystrcatNumHex.Inc

%endif %- strcatNumHex
%-BW_METHOD_END strcatNumHex
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanRGB
%ifdef ScanRGB
uint8_t %'ModuleName'%.%ScanRGB(const unsigned char **str, uint8_t *r, uint8_t *g, uint8_t *b);
%define! Parstr
%define! Parr
%define! Parg
%define! Parb
%define! RetVal
%include Common\UtilityScanRGB.Inc

%endif %- ScanRGB
%-BW_METHOD_END ScanRGB
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanRGB32
%ifdef ScanRGB32
uint8_t %'ModuleName'%.%ScanRGB32(const unsigned char **str, uint32_t *rgb);
%define! Parstr
%define! Parrgb
%define! RetVal
%include Common\UtilityScanRGB32.Inc

%endif %- ScanRGB32
%-BW_METHOD_END ScanRGB32
%-************************************************************************************************************
%-BW_METHOD_BEGIN SkipSpaces
%ifdef SkipSpaces
void %'ModuleName'%.%SkipSpaces(const unsigned char **str);
%define! Parstr
%include Common\UtilitySkipSpaces.Inc

%endif %- SkipSpaces
%-BW_METHOD_END SkipSpaces
%-BW_DEFINITION_END
/* END %ModuleName. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\UtilitySettings.Inc
%define! Abstract Common\UtilityAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
#include <stdlib.h> /* for rand() */
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-UNLOCKED
/* Internal method prototypes */
%-INTERNAL_LOC_METHOD_BEG ShiftRightAndFill
static void ShiftRightAndFill(uint8_t *dst, uint8_t fill, uint8_t nofFill);
%-INTERNAL_LOC_METHOD_END ShiftRightAndFill
%-

%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcpy
%ifdef strcpy
%define! Pardst
%define! PardstSize
%define! Parsrc
%include Common\Utilitystrcpy.Inc
/*!
  \brief copy the string src into dst. It performs the same task as strncpy, except
     - always terminates the result string.
     - does not zero out the remaining part in dst.
     Note: dstSize is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] src The source string to copy
*/
void %'ModuleName'%.%strcpy(uint8_t *dst, size_t dstSize, const unsigned char *src)
{
  dstSize--; /* for zero byte */
  while (dstSize > 0 && *src != '\0') {
    *dst++ = *src++;
    dstSize--;
  }
  *dst = '\0';
}

%endif %- strcpy
%-BW_METHOD_END strcpy
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcat
%ifdef strcat
%define! Pardst
%define! PardstSize
%define! Parsrc
%include Common\Utilitystrcat.Inc
/*!
  \brief Concat the string src into dst. Always terminates the result string.
     Note: count is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] src The source string to add
  */
void %'ModuleName'%.%strcat(uint8_t *dst, size_t dstSize, const unsigned char *src)
{
  dstSize--; /* for zero byte */
  /* point to the end of the source */
  while (dstSize > 0 && *dst != '\0') {
    dst++;
    dstSize--;
  }
  /* copy the src in the destination */
  while (dstSize > 0 && *src != '\0') {
    *dst++ = *src++;
    dstSize--;
  }
  /* terminate the string */
  *dst = '\0';
}

%endif %- strcat
%-BW_METHOD_END strcat
%-************************************************************************************************************
%-BW_METHOD_BEGIN chcat
%ifdef chcat
%define! Pardst
%define! PardstSize
%define! Parch
%include Common\Utilitychcat.Inc
void %'ModuleName'%.%chcat(uint8_t *dst, size_t dstSize, uint8_t ch)
{
  dstSize--; /* for zero byte */
  /* point to the end of the source */
  while (dstSize > 0 && *dst != '\0') {
    dst++;
    dstSize--;
  }
  /* copy the ch in the destination */
  if (dstSize > 0) {
    *dst++ = ch;
  }
  /* terminate the string */
  *dst = '\0';
}

%endif %- chcat
%-BW_METHOD_END chcat
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num8uToStr
%ifdef Num8uToStr
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilityNum8uToStr.Inc
/*!
  \brief Converts an 8bit unsigned number into a string.
  \param[in,out] dst String buffer to store the number.
  \param[in] dstSize Size of the destination buffer in uint8_ts.
  \param[in] val 8bit unsigned number to convert.
 */
void %'ModuleName'%.%Num8uToStr(uint8_t *dst, size_t dstSize, uint8_t val)
{
  %'ModuleName'%.Num16uToStr(dst, dstSize, (uint16_t)val);
}

%endif %- Num8uToStr
%-BW_METHOD_END Num8uToStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num8sToStr
%ifdef Num8sToStr
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilityNum8sToStr.Inc
/*!
  \brief Converts an 8bit signed number into a string.
  \param[in,out] dst String buffer to store the number.
  \param[in] dstSize Size of the destination buffer in uint8_ts.
  \param[in] val 8bit signed number to convert.
 */
void %'ModuleName'%.%Num8sToStr(uint8_t *dst, size_t dstSize, signed char val)
{
  %'ModuleName'%.Num16sToStr(dst, dstSize, (int16_t)val);
}

%endif %- Num8sToStr
%-BW_METHOD_END Num8sToStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num16uToStr
%ifdef Num16uToStr
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilityNum16uToStr.Inc
/*!
  \brief Converts a 16bit unsigned number into a string.
  \param[in,out] dst String buffer to store the number.
  \param[in] dstSize Size of the destination buffer in uint8_ts.
  \param[in] val 16bit unsigned number to convert.
 */
void %'ModuleName'%.%Num16uToStr(uint8_t *dst, size_t dstSize, uint16_t val)
{
  unsigned char *ptr = ((unsigned char *)dst);
  unsigned char i=0, j;
  unsigned char tmp;

  dstSize--; /* for zero byte */
  if (val == 0 && dstSize > 0){
    ptr[i++] = '0';
    dstSize--;
  }
  while (val > 0 && dstSize > 0) {
    ptr[i++] = (unsigned char)((val %% 10) + '0');
    dstSize--;
    val /= 10;
  }
  for(j=0; j<(i/2); j++) { /* swap buffer */
    tmp = ptr[j];
    ptr[j] = ptr[(i-j)-1];
    ptr[(i-j)-1] = tmp;
  }
  ptr[i] = '\0';
}

%endif %- Num16uToStr
%-BW_METHOD_END Num16uToStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num16sToStr
%ifdef Num16sToStr
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilityNum16sToStr.Inc
/*!
  \brief Converts a 16bit signed number into a string.
  \param[in,out] dst String buffer to store the number.
  \param[in] dstSize Size of the destination buffer in uint8_ts.
  \param[in] val 16bit signed number to convert.
 */
void %'ModuleName'%.%Num16sToStr(uint8_t *dst, size_t dstSize, int16_t val)
{
  unsigned char *ptr =  ((unsigned char *)dst);
  unsigned char i=0, j;
  unsigned char tmp;
  unsigned char sign = (unsigned char)(val < 0);

  if (val==(int16_t)(0x8000)) { /* special case 0x8000/-32768: prevent overflow below. */
    %'ModuleName'%.%strcpy(dst, dstSize, (unsigned char*)"-32768");
    return;
  }
  dstSize--; /* for zero byte */
  if (sign) {
    val = (int16_t)(-val);
  }
  if (val == 0 && dstSize > 0){
    ptr[i++] = '0';
    dstSize--;
  }
  while (val > 0 && dstSize > 0) {
    ptr[i++] = (unsigned char)((val %% 10) + '0');
    dstSize--;
    val /= 10;
  }
  if (sign && dstSize > 0){
    ptr[i++] = '-';
  }
  for(j=0; j<(i/2); j++) { /* swap buffer */
    tmp = ptr[j];
    ptr[j] = ptr[(i-j)-1];
    ptr[(i-j)-1] = tmp;
  }
  ptr[i] = '\0';
}

%endif %- Num16sToStr
%-BW_METHOD_END Num16sToStr
%-************************************************************************************************************
%-INTERNAL_METHOD_BEG ShiftRightAndFill
%define! Pardst
%define! Parfill
%define! ParnofFill
%include Common\GeneralInternalGlobal.inc (ShiftRightAndFill)
static void ShiftRightAndFill(uint8_t *dst, uint8_t fill, uint8_t nofFill)
{
  signed char i, j;

  j = 0;
  while(dst[j] != '\0') {
    j++;
  }
  i = (signed char)nofFill;
  if (i==j) {
    /* nothing to do, we are done */
  } else if (i>j) {
    while (j>=0) {
      dst[i] = dst[j];
      i--; j--;
    }
    while(i>=0) {
      dst[i] = fill;
      i--;
    }
  } else {
    /* hmmm, not enough space, return what we have, do nothing */
  }
}

%-INTERNAL_METHOD_END ShiftRightAndFill
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num16sToStrFormatted
%ifdef Num16sToStrFormatted
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilityNum16sToStrFormatted.Inc
/*!
  \brief Converts a 16bit signed number to a string, in a formatted way (like printf with "%%0d").
     Always terminates the result string.
     Note: count is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize Size of the destination buffer, in uint8_ts.
  \param[in] val The 16bit signed number to add
  \param[in] fill Fill character, typically ' ' (like for "%%2d" or '0' (for "%%02d")
  \param[in] nofFill Size for the format (right aligned) string, e.g. '2' for "%%2d"
*/
void %'ModuleName'%.%Num16sToStrFormatted(uint8_t *dst, size_t dstSize, int16_t val, char fill, uint8_t nofFill)
{
  %'ModuleName'%.%Num16sToStr(dst, dstSize, val);
  ShiftRightAndFill(dst, fill, nofFill);
}

%endif %- Num16sToStrFormatted
%-BW_METHOD_END Num16sToStrFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num16uToStrFormatted
%ifdef Num16uToStrFormatted
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilityNum16uToStrFormatted.Inc
/*!
  \brief Converts a 16bit unsigned number to a string, in a formatted way (like printf with "%%0d").
     Always terminates the result string.
     Note: count is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize Size of the destination buffer, in uint8_ts.
  \param[in] val The 16bit unsigned number to add
  \param[in] fill Fill character, typically ' ' (like for "%%2d" or '0' (for "%%02d")
  \param[in] nofFill Size for the format (right aligned) string, e.g. '2' for "%%2d"
*/
void %'ModuleName'%.%Num16uToStrFormatted(uint8_t *dst, size_t dstSize, uint16_t val, char fill, uint8_t nofFill)
{
  %'ModuleName'%.%Num16uToStr(dst, dstSize, val);
  ShiftRightAndFill(dst, fill, nofFill);
}

%endif %- Num16uToStrFormatted
%-BW_METHOD_END Num16uToStrFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num32uToStrFormatted
%ifdef Num32uToStrFormatted
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilityNum32uToStrFormatted.Inc
/*!
  \brief Converts a 32bit unsigned number to a string, in a formatted way (like printf with "%%0d").
     Always terminates the result string.
     Note: count is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize Size of the destination buffer, in uint8_ts.
  \param[in] val The 32bit unsigned number to add
  \param[in] fill Fill character, typically ' ' (like for "%%2d" or '0' (for "%%02d")
  \param[in] nofFill Size for the format (right aligned) string, e.g. '2' for "%%2d"
*/
void %'ModuleName'%.%Num32uToStrFormatted(uint8_t *dst, size_t dstSize, uint32_t val, char fill, uint8_t nofFill)
{
  %'ModuleName'%.%Num32uToStr(dst, dstSize, val);
  ShiftRightAndFill(dst, fill, nofFill);
}

%endif %- Num32uToStrFormatted
%-BW_METHOD_END Num32uToStrFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num32sToStrFormatted
%ifdef Num32sToStrFormatted
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilityNum32sToStrFormatted.Inc
/*!
  \brief Converts a 32bit signed number to a string, in a formatted way (like printf with "%%0d").
     Always terminates the result string.
     Note: count is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize Size of the destination buffer, in uint8_ts.
  \param[in] val The 32bit signed number to add
  \param[in] fill Fill character, typically ' ' (like for "%%2d" or '0' (for "%%02d")
  \param[in] nofFill Size for the format (right aligned) string, e.g. '2' for "%%2d"
*/
void %'ModuleName'%.%Num32sToStrFormatted(uint8_t *dst, size_t dstSize, int32_t val, char fill, uint8_t nofFill)
{
  %'ModuleName'%.%Num32sToStr(dst, dstSize, val);
  ShiftRightAndFill(dst, fill, nofFill);
}

%endif %- Num32sToStrFormatted
%-BW_METHOD_END Num32sToStrFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum8u
%ifdef strcatNum8u
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilitystrcatNum8u.Inc
/*!
  \brief appends a 8bit unsigned number to a string. Always terminates the result string.
     Note: count is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 8bit unsigned number to add
  */
void %'ModuleName'%.%strcatNum8u(uint8_t *dst, size_t dstSize, uint8_t val)
{
  unsigned char buf[sizeof("256")]; /* maximum buffer size we need */

  %'ModuleName'%.%Num8uToStr(buf, sizeof(buf), val);
  %'ModuleName'%.%strcat(dst, dstSize, buf);
}

%endif %- strcatNum8u
%-BW_METHOD_END strcatNum8u
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum8s
%ifdef strcatNum8s
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilitystrcatNum8s.Inc
/*!
  \brief appends a 8bit signed number to a string. Always terminates the result string.
     Note: count is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 8bit signed number to add
  */
void %'ModuleName'%.%strcatNum8s(uint8_t *dst, size_t dstSize, signed char val)
{
  unsigned char buf[sizeof("-128")]; /* maximum buffer size we need */

  %'ModuleName'%.%Num8sToStr(buf, sizeof(buf), val);
  %'ModuleName'%.%strcat(dst, dstSize, buf);
}

%endif %- strcatNum8s
%-BW_METHOD_END strcatNum8s
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum16u
%ifdef strcatNum16u
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilitystrcatNum16u.Inc
/*!
  \brief appends a 16bit unsigned number to a string. Always terminates the result string.
     Note: count is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 16bit unsigned number to add
  */
void %'ModuleName'%.%strcatNum16u(uint8_t *dst, size_t dstSize, uint16_t val)
{
  unsigned char buf[sizeof("32768")]; /* maximum buffer size we need */

  %'ModuleName'%.%Num16uToStr(buf, sizeof(buf), val);
  %'ModuleName'%.%strcat(dst, dstSize, buf);
}

%endif %- strcatNum16u
%-BW_METHOD_END strcatNum16u
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum16s
%ifdef strcatNum16s
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilitystrcatNum16s.Inc
/*!
  \brief appends a 16bit signed number to a string. Always terminates the result string.
     Note: count is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 16bit signed number to add
  */
void %'ModuleName'%.%strcatNum16s(uint8_t *dst, size_t dstSize, int16_t val)
{
  unsigned char buf[sizeof("-32768")]; /* maximum buffer size we need */

  %'ModuleName'%.%Num16sToStr(buf, sizeof(buf), val);
  %'ModuleName'%.%strcat(dst, dstSize, buf);
}

%endif %- strcatNum16s
%-BW_METHOD_END strcatNum16s
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum16uFormatted
%ifdef strcatNum16uFormatted
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilitystrcatNum16uFormatted.Inc
/*!
  \brief appends a 16bit unsigned number to a string, in a formatted way (like printf with "%%0d".
     Always terminates the result string.
     Note: count is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 16bit unsigned number to add
  \param[in] fill Fill character
  \param[in] nofFill Number of fill characters
  */
void %'ModuleName'%.%strcatNum16uFormatted(uint8_t *dst, size_t dstSize, uint16_t val, char fill, uint8_t nofFill)
{
  unsigned char buf[sizeof("32768")]; /* maximum buffer size we need */

  %'ModuleName'%.%Num16uToStrFormatted(buf, dstSize, val, fill, nofFill);
  %'ModuleName'%.%strcat(dst, dstSize, buf);
}

%endif %- strcatNum16uFormatted
%-BW_METHOD_END strcatNum16uFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum16sFormatted
%ifdef strcatNum16sFormatted
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilitystrcatNum16sFormatted.Inc
/*!
  \brief appends a 16bit signed number to a string, in a formatted way (like printf with "%%0d".
     Always terminates the result string.
     Note: count is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 16bit signed number to add
  \param[in] fill Fill character
  \param[in] nofFill Number of fill characters
  */
void %'ModuleName'%.%strcatNum16sFormatted(uint8_t *dst, size_t dstSize, int16_t val, char fill, uint8_t nofFill)
{
  unsigned char buf[sizeof("-32768")]; /* maximum buffer size we need */

  %'ModuleName'%.%Num16sToStrFormatted(buf, dstSize, val, fill, nofFill);
  %'ModuleName'%.%strcat(dst, dstSize, buf);
}

%endif %- strcatNum16sFormatted
%-BW_METHOD_END strcatNum16sFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum32uFormatted
%ifdef strcatNum32uFormatted
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilitystrcatNum32uFormatted.Inc
/*!
  \brief appends a 32bit unsigned number to a string, in a formatted way (like printf with "%%0d".
     Always terminates the result string.
     Note: count is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 32bit unsigned number to add
  \param[in] fill Fill character
  \param[in] nofFill Number of fill characters
  */
void %'ModuleName'%.%strcatNum32uFormatted(uint8_t *dst, size_t dstSize, uint32_t val, char fill, uint8_t nofFill)
{
  unsigned char buf[sizeof("4294967295")]; /* maximum buffer size we need */

  %'ModuleName'%.%Num32uToStrFormatted(buf, dstSize, val, fill, nofFill);
  %'ModuleName'%.%strcat(dst, dstSize, buf);
}

%endif %- strcatNum32uFormatted
%-BW_METHOD_END strcatNum32uFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum32sFormatted
%ifdef strcatNum32sFormatted
%define! Pardst
%define! PardstSize
%define! Parval
%define! Parfill
%define! ParnofFill
%include Common\UtilitystrcatNum32sFormatted.Inc
/*!
  \brief appends a 32bit signed number to a string, in a formatted way (like printf with "%%0d".
     Always terminates the result string.
     Note: count is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 32bit signed number to add
  \param[in] fill Fill character
  \param[in] nofFill Number of fill characters
  */
void %'ModuleName'%.%strcatNum32sFormatted(uint8_t *dst, size_t dstSize, int32_t val, char fill, uint8_t nofFill)
{
  unsigned char buf[sizeof("-4294967295")]; /* maximum buffer size we need */

  %'ModuleName'%.%Num32sToStrFormatted(buf, dstSize, val, fill, nofFill);
  %'ModuleName'%.%strcat(dst, dstSize, buf);
}

%endif %- strcatNum32sFormatted
%-BW_METHOD_END strcatNum32sFormatted
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum8Hex
%ifdef strcatNum8Hex
%define! Pardst
%define! PardstSize
%define! Parnum
%include Common\UtilitystrcatNum8Hex.Inc
/*!
  \brief Adds a 8bit number as hex value to a string.
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] num The 8bit number to add
  */
void %'ModuleName'%.%strcatNum8Hex(uint8_t *dst, size_t dstSize, uint8_t num)
{
  unsigned char buf[sizeof("FF")]; /* maximum buffer size we need */
  unsigned char hex;

  buf[2] = '\0';
  hex = (char)(num & 0x0F);
  buf[1] = (char)(hex + ((hex <= 9) ? '0' : ('A'-10)));
  hex = (char)((num>>4) & 0x0F);
  buf[0] = (char)(hex + ((hex <= 9) ? '0' : ('A'-10)));
  %'ModuleName'%.%strcat(dst, dstSize, buf);
}

%endif %- strcatNum8Hex
%-BW_METHOD_END strcatNum8Hex
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum16Hex
%ifdef strcatNum16Hex
%define! Pardst
%define! PardstSize
%define! Parnum
%include Common\UtilitystrcatNum16Hex.Inc
/*!
  \brief Adds a 16bit number as hex value to a string.
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] num The 16bit number to add
  */
void %'ModuleName'%.%strcatNum16Hex(uint8_t *dst, size_t dstSize, uint16_t num)
{
  unsigned char buf[sizeof("FFFF")]; /* maximum buffer size we need */
  unsigned char hex;
  int8_t i;

  buf[4] = '\0';
  i = 3;
  do {
    hex = (char)(num & 0x0F);
    buf[i] = (char)(hex + ((hex <= 9) ? '0' : ('A'-10)));
    num >>= 4;                                                   %>40 /* next nibble */
    i--;
  } while (i>=0);
  %'ModuleName'%.%strcat(dst, dstSize, buf);
}

%endif %- strcatNum16Hex
%-BW_METHOD_END strcatNum16Hex
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum24Hex
%ifdef strcatNum24Hex
%define! Pardst
%define! PardstSize
%define! Parnum
%include Common\UtilitystrcatNum24Hex.Inc
/*!
  \brief Adds a 24bit number as hex value to a string.
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] num The 24bit number to add
  */
void %'ModuleName'%.%strcatNum24Hex(uint8_t *dst, size_t dstSize, uint32_t num)
{
  unsigned char buf[sizeof("FFFFFF")]; /* maximum buffer size we need */
  unsigned char hex;
  int8_t i;

  buf[6] = '\0';
  i = 5;
  do {
    hex = (char)(num & 0x0F);
    buf[i] = (char)(hex + ((hex <= 9) ? '0' : ('A'-10)));
    num >>= 4;                                                   %>40 /* next nibble */
    i--;
  } while (i>=0);
  %'ModuleName'%.%strcat(dst, dstSize, buf);
}

%endif %- strcatNum24Hex
%-BW_METHOD_END strcatNum24Hex
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum32Hex
%ifdef strcatNum32Hex
%define! Pardst
%define! PardstSize
%define! Parnum
%include Common\UtilitystrcatNum32Hex.Inc
/*!
  \brief Adds a 32bit number as hex value to a string.
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] num The 32bit number to add
  */
void %'ModuleName'%.%strcatNum32Hex(uint8_t *dst, size_t dstSize, uint32_t num)
{
  unsigned char buf[sizeof("FFFFFFFF")]; /* maximum buffer size we need */
  unsigned char hex;
  int8_t i;

  buf[8] = '\0';
  i = 7;
  do {
    hex = (char)(num & 0x0F);
    buf[i] = (char)(hex + ((hex <= 9) ? '0' : ('A'-10)));
    num >>= 4;                                                   %>40 /* next nibble */
    i--;
  } while (i>=0);
  %'ModuleName'%.%strcat(dst, dstSize, buf);
}

%endif %- strcatNum32Hex
%-BW_METHOD_END strcatNum32Hex
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum32s
%ifdef strcatNum32s
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilitystrcatNum32s.Inc
/*!
  \brief appends a 32bit (long) number to a string. Always terminates the result string.
     Note: count is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 32bit number to add
  */
void %'ModuleName'%.%strcatNum32s(uint8_t *dst, size_t dstSize, int32_t val)
{
  unsigned char buf[sizeof("-4294967295")]; /* maximum buffer size we need */

  %'ModuleName'%.%Num32sToStr(buf, sizeof(buf), val);
  %'ModuleName'%.%strcat(dst, dstSize, buf);
}

%endif %- strcatNum32s
%-BW_METHOD_END strcatNum32s
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum32u
%ifdef strcatNum32u
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilitystrcatNum32u.Inc
/*!
  \brief appends a 32bit (unsigned long) number to a string. Always terminates the result string.
     Note: count is the size of dst INCLUDING zero byte.
     Precondition: src, dst != NULL
  \param[in,out] dst Start of string buffer, where to append the number string
  \param[in] dstSize The size of the buffer, including the zero byte
  \param[in] val The 32bit unsigned number to add
  */
void %'ModuleName'%.%strcatNum32u(uint8_t *dst, size_t dstSize, uint32_t val)
{
  unsigned char buf[sizeof("4294967295")]; /* maximum buffer size we need */

  %'ModuleName'%.%Num32uToStr(buf, sizeof(buf), val);
  %'ModuleName'%.%strcat(dst, dstSize, buf);
}

%endif %- strcatNum32u
%-BW_METHOD_END strcatNum32u
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num32sToStr
%ifdef Num32sToStr
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilityNum32sToStr.Inc
/*!
  \brief Converts a 32bit number to a string.
  \param[in,out] dst String buffer to store the number.
  \param[in] dstSize Size of the destination buffer in uint8_ts.
  \param[in] val 32bit signed number to convert.
 */
void %'ModuleName'%.%Num32sToStr(uint8_t *dst, size_t dstSize, int32_t val)
{
  unsigned char *ptr = ((unsigned char *)dst);
  unsigned char i=0, j;
  unsigned char tmp;
  unsigned char sign = (unsigned char)(val < 0);

  if (val==(int32_t)(0x80000000)) { /* special case 0x80000000/-2147483648: prevent overflow below. */
    %'ModuleName'%.%strcpy(dst, dstSize, (unsigned char*)"-2147483648");
    return;
  }
  dstSize--; /* for zero byte */
  if (sign) {
    val = -val;
  }
  if (val == 0 && dstSize > 0){
    ptr[i++] = '0';
    dstSize--;
  }
  while (val > 0 && dstSize > 0) {
    ptr[i++] = (unsigned char)((val %% 10) + '0');
    dstSize--;
    val /= 10;
  }
  if (sign && dstSize > 0){
    ptr[i++] = '-';
  }
  for(j=0; j<(i/2); j++) { /* swap buffer */
    tmp = ptr[j];
    ptr[j] = ptr[(i-j)-1];
    ptr[(i-j)-1] = tmp;
  }
  ptr[i] = '\0';
}

%endif %- Num32sToStr
%-BW_METHOD_END Num32sToStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN Num32uToStr
%ifdef Num32uToStr
%define! Pardst
%define! PardstSize
%define! Parval
%include Common\UtilityNum32uToStr.Inc
/*!
  \brief Converts a 32bit signed number to a string.
  \param[in,out] dst String buffer to store the number.
  \param[in] dstSize Size of the destination buffer in uint8_ts.
  \param[in] val 32bit unsigned number to convert.
 */
void %'ModuleName'%.%Num32uToStr(uint8_t *dst, size_t dstSize, uint32_t val)
{
  unsigned char *ptr = ((unsigned char *)dst);
  unsigned char i=0, j;
  unsigned char tmp;

  dstSize--; /* for zero byte */
  if (val == 0 && dstSize > 0){
    ptr[i++] = '0';
    dstSize--;
  }
  while (val > 0 && dstSize > 0) {
    ptr[i++] = (unsigned char)((val %% 10) + '0');
    dstSize--;
    val /= 10;
  }
  for(j=0; j<(i/2); j++) { /* swap buffer */
    tmp = ptr[j];
    ptr[j] = ptr[(i-j)-1];
    ptr[(i-j)-1] = tmp;
  }
  ptr[i] = '\0';
}

%endif %- Num32uToStr
%-BW_METHOD_END Num32uToStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN IsLeapYear
%ifdef IsLeapYear
%define! Paryear
%define! RetVal
%include Common\UtilityIsLeapYear.Inc
bool %'ModuleName'%.%IsLeapYear(uint16_t year)
{
  return ((((year%%4)==0) && (year%%100)!=0) || (year%%400)==0);
}

%endif %- IsLeapYear
%-BW_METHOD_END IsLeapYear
%-************************************************************************************************************
%-BW_METHOD_BEGIN WeekDay
%ifdef WeekDay
%define! Paryear
%define! Parmonth
%define! Parday
%define! RetVal
%include Common\UtilityWeekDay.Inc
uint8_t %'ModuleName'%.%WeekDay(uint16_t year, uint8_t month, uint8_t day)
{
  /* see http://klausler.com/new-dayofweek.html */
  static const uint8_t skew[12] = {0,3,3,6,1,4,6,2,5,0,3,5};
  uint16_t sum;

  sum = (uint16_t)(year-1900);
  sum += sum/4;
  sum %%= 7;
  if (%'ModuleName'%.%IsLeapYear(year) && (month==1 || month==2)) {
    sum--;
  }
  sum += day;
  sum %%= 7;
  sum += skew[month-1];
  sum %%= 7;
  return (uint8_t)sum; /* 0: Sunday, 1: Monday, 2: Tuesday, 3: Wednesday, ... */
}

%endif %- WeekDay
%-BW_METHOD_END WeekDay
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadEscapedName
%ifdef ReadEscapedName
%define! Parfilename
%define! Pardestname
%define! Parmaxlen
%define! ParlenRead
%define! ParfileName
%define! ParlenWritten
%define! Parterminators
%define! RetVal
%include Common\UtilityReadEscapedName.Inc
uint8_t %'ModuleName'%.%ReadEscapedName(const unsigned char *filename, uint8_t *destname, size_t maxlen, size_t *lenRead, size_t *lenWritten, const char *terminators)
{
  size_t lenCopied = 0, lenOverread = 0;
  bool quoteMode = FALSE;  /* quoteMode means the name is surrounded by ". In this mode, only a second single quote "
                              terminates the string. In !quoteMode a space or a '\0' may also terminate it correctly */
  bool res = ERR_OK;
  #define IS_SPACE(ch) ((ch)==' '||(ch)=='\t'||(ch)=='\n'||(ch)=='\v'||(ch)=='\f'||(ch)=='\r')

  if (filename==NULL || (destname!=NULL && maxlen==0)) {
    return ERR_FAILED;
  }
  if (filename[0] == '"') { /* translated mode */
    filename++; /* overread '"' */
    lenOverread++;
    quoteMode=TRUE;
  }
  if (terminators == NULL) {
    terminators = "";
  }
  for (;;) {
    if (quoteMode) {
      if (filename[0] == '"') {
        filename++; /* overread '"' */
        lenOverread++;
        if (filename[0] != '"') { /* quoteMode is terminated by a single quote. A double quote is treated like a single quote and does not terminate it ! */
          break; /* successfully finished with this name */
        } /* else we copy the second quote " */
      }
      if (filename[0] == '\0') { /* unexpected 0. stop */
        res = ERR_FAILED;
        break; /* error case: no terminating double quote (") was found */
      }
    } else { /* copy mode */
      if (IS_SPACE(filename[0]) || filename[0] == '\0' || strchr(terminators, filename[0]) != NULL) { /* !quoteMode is terminated by space, '\0' or by any char in terminators */
        break;
      }
    }
    if (destname != NULL) {
      if (lenCopied + 1 < maxlen) {
        destname[0] = filename[0];
        destname++;
      } else {
        destname[0] = '\0'; /* terminate string */
        destname = NULL; /* avoid it to overwrite not allocated space */
      }
    }
    lenCopied++;
    filename++;
  }
  if (destname != NULL) {
    destname[0] = '\0';
  }
  if (lenRead != NULL) {
    *lenRead = lenCopied+lenOverread;
  }
  if (lenWritten != NULL) {
    *lenWritten = lenCopied + 1; /* additionally a zero byte written */
  }
  return res;
}

%endif %- ReadEscapedName
%-BW_METHOD_END ReadEscapedName
%-************************************************************************************************************
%-BW_METHOD_BEGIN xatoi
%ifdef xatoi
%define! Parstr
%define! Parres
%define! RetVal
%include Common\Utilityxatoi.Inc
/*------------------------------------------------------------------------/
/  Universal string handler for user console interface
/-------------------------------------------------------------------------/
/
/  Copyright (C) 2010, ChaN, all right reserved.
/
/ * This software is a free software and there is NO WARRANTY.
/ * No restriction on use. You can use, modify and redistribute it for
/   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
/ * Redistributions of source code must retain the above copyright notice.
/
/-------------------------------------------------------------------------*/
#ifdef __HC12__
  #pragma MESSAGE DISABLE C12056  /* message about SP debug info */
#endif
uint8_t %'ModuleName'%.%xatoi(const unsigned char **str, int32_t *res)
{
/* 123 -5   0x3ff 0b1111 0377 3.25  w "
      ^                               1st call returns 123 and next ptr
         ^                            2nd call returns -5 and next ptr
                 ^                    3rd call returns 1023 and next ptr
                        ^             4th call returns 15 and next ptr
                             ^        5th call returns 255 and next ptr
                               ^      6th call returns 3 and next ptr, caller needs to read '.'
                                 ^    7th call returns 25 and next ptr
                                    ^ 8th call fails and returns ERR_FAILED
*/
  uint32_t val;
  uint8_t c, r, s = 0;

  *res = 0;
  while (**str==' ') {
    (*str)++;                                                    %>40/* Skip leading spaces */
  }
  c = **str;
  if (c == '-') {                                                %>40/* negative? */
    s = 1;
    c = *(++(*str));
  }
  if (c == '0') {
    c = *(++(*str));
    switch (c) {
      case 'x':                                                  %>40/* hexadecimal */
        r = 16; c = *(++(*str));
        break;
      case 'b':                                                  %>40/* binary */
        r = 2; c = *(++(*str));
        break;
      default:
        if (c <= ' ' || c == '.') {
          return ERR_OK;                                         %>40/* single zero */
        }
        if (c < '0' || c > '9') {
          return ERR_FAILED;                                     %>40/* invalid char */
        }
        r = 8;                                                   %>40/* octal */
        break;
    } /* switch */
  } else {
    if (c < '0' || c > '9') {
      return ERR_FAILED;                                         %>40/* EOL or invalid char */
    }
    r = 10;                                                      %>40/* decimal */
  }
  val = 0;
  while (c > ' ' && c != '.') {
    if (c >= 'a') c -= 0x20;
    c -= '0';
    if (c >= 17) {
      c -= 7;
      if (c <= 9) return ERR_FAILED;                             %>40/* invalid char */
    }
    if (c >= r) return ERR_FAILED;                               %>40/* invalid char for current radix */
    val = val * r + c;
    c = *(++(*str));
  } /* while */
  if (s) val = 0 - val;                                          %>40/* apply sign if needed */
  *res = (long)val;
  return ERR_OK;
}
#ifdef __HC12__
  #pragma MESSAGE DEFAULT C12056  /* message about SP debug info */
#endif

%endif %- xatoi
%-BW_METHOD_END xatoi
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDate
%ifdef ScanDate
%define! Parstr
%define! Parday
%define! Parmonth
%define! Paryear
%define! RetVal
%include Common\UtilityScanDate.Inc
uint8_t %'ModuleName'%.%ScanDate(const unsigned char **str, uint8_t *day, uint8_t *month, uint16_t *year)
{
  /* precondition: string points to starting of date, e.g. "01.01.10" or "12.5.2010", and date is in format dd.mm.yy or dd.mm.yyyy */
  const unsigned char *p;

  p = *str;
  while(*p==' ') {
    p++; /* skip leading spaces */
  }
  if (   %'ModuleName'%.ScanDecimal8uNumber(&p, day)==ERR_OK
      && *day > 0 && *day <= 31
      && (*p=='.' || *p=='-')
     )
  {
    p++;
    if (   %'ModuleName'%.ScanDecimal8uNumber(&p, month)==ERR_OK
        && *month > 0 && *month <= 12
        && (*p=='.' || *p=='-')
       )
    {
      p++;
      if (   %'ModuleName'%.ScanDecimal16uNumber(&p, year)==ERR_OK
          && *year > 0 && *year <= 3000 /* hopefully this is enough :-) */
         )
      {
        if (*year < 100) {
          *year += 2000; /* transform '10' into '2010' */
        }
        *str = p; /* advance pointer for caller */
        return ERR_OK;
      }
    }
  }
  *day = 0;
  *month = 0;
  *year = 0;
  return ERR_FAILED; /* wrong format */
}

%endif %- ScanDate
%-BW_METHOD_END ScanDate
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanTime
%ifdef ScanTime
%define! Parstr
%define! Parhour
%define! Parminute
%define! Parsecond
%define! ParhSecond
%define! RetVal
%include Common\UtilityScanTime.Inc
uint8_t %'ModuleName'%.%ScanTime(const unsigned char **str, uint8_t *hour, uint8_t *minute, uint8_t *second, uint8_t *hSecond)
{
  /* precondition: string points to starting of time string, e.g. "03:15:05" or "03:15:05,3" or "03:15:05,17", and time is in format hh:mm:ss[,hh] */
  const unsigned char *p;
  #define SCAN_IS_DIGIT(ch) ((ch)>='0'&&(ch)<='9')

  *hour = 0;
  *minute = 0;
  *second = 0;
  *hSecond = 0;
  p = *str;
  while(*p==' ') {
    p++; /* skip leading spaces */
  }
  if (   %'ModuleName'%.ScanDecimal8uNumber(&p, hour)==ERR_OK
      && *hour <= 24
      && *p==':'
     )
  {
    p++; /* skip ':' */
    if (   %'ModuleName'%.ScanDecimal8uNumber(&p, minute)==ERR_OK
        && *minute <= 60
       )
    {
      if (*p==':') { /* there is more after the minute */
        p++; /* skip ':' */
        if (   %'ModuleName'%.ScanDecimal8uNumber(&p, second)==ERR_OK
            && *second <= 60
           )
        {
          if (*p==',') { /* we do have either ",z" or ",hh" */
            p++; /* skip ',' */
            if (SCAN_IS_DIGIT(*p)) {
              if (SCAN_IS_DIGIT(*(p+1))) { /* ,hh format */
                *hSecond = (uint8_t)((*p-'0')*10 + *(p+1)-'0');
                return ERR_OK;
              } else { /* ,z format */
                *hSecond = (uint8_t)((*p-'0')*10);
                p++;
                *str = p; /* advance pointer for caller */
                return ERR_OK;
              }
            } else {
              return ERR_FAILED; /* illegal format, not a number, e.g. ",x" */
            }
          }
          *str = p; /* advance pointer for caller */
          return ERR_OK;
        }
      } else if (*p==' ' || *p=='\0') { /* nothing more after the minute? Assume zero seconds */
        *str = p; /* advance pointer for caller */
        return ERR_OK;
      }
    }
  }
  return ERR_FAILED; /* wrong format */
}

%endif %- ScanTime
%-BW_METHOD_END ScanTime
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDecimal8uNumber
%ifdef ScanDecimal8uNumber
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanDecimal8uNumber.Inc
uint8_t %'ModuleName'%.%ScanDecimal8uNumber(const unsigned char **str, uint8_t *val)
{
  /* scans a decimal number, and stops at any non-number. Number can have any preceding zeros or spaces. */
  #define _8_NOF_DIGITS  (3+1)
  uint8_t nofDigits = _8_NOF_DIGITS; /* maximum number of digits to avoid overflow */
  const unsigned char *p = *str;

  while(*p==' ') { /* skip leading spaces */
    p++;
  }
  *val = 0;
  while(*p>='0' && *p<='9' && nofDigits > 0) {
    *val = (uint8_t)((*val)*10 + *p-'0');
    nofDigits--;
    p++;
  } /* while */
  if (nofDigits==0) {
    return ERR_OVERFLOW;
  }
  if (nofDigits==_8_NOF_DIGITS) { /* no digits at all? */
    return ERR_FAILED;
  }
  *str = p;
  return ERR_OK;
}

%endif %- ScanDecimal8uNumber
%-BW_METHOD_END ScanDecimal8uNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDecimal8sNumber
%ifdef ScanDecimal8sNumber
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanDecimal8sNumber.Inc
uint8_t %'ModuleName'%.%ScanDecimal8sNumber(const unsigned char **str, signed char *val)
{
  /* Scans a decimal number, and stops at any non-number. Number can have any preceding spaces. */
  const unsigned char *p = *str;
  bool isNeg;
  uint8_t val8u;
  uint8_t res;

  while(*p==' ') { /* skip leading spaces */
    p++;
  }
  *val = 0;
  if (*p=='-') {
    isNeg = TRUE;
    p++; /* skip minus */
  } else {
    isNeg = FALSE;
  }
  res = %'ModuleName'%.%ScanDecimal8uNumber(&p, &val8u);
  if (res != ERR_OK) {
    return res;
  }
  if (isNeg) {
    *val = (int8_t)(-(int8_t)val8u);
  } else {
    *val = (int8_t)val8u;
  }
  *str = p;
  return ERR_OK;
}

%endif %- ScanDecimal8sNumber
%-BW_METHOD_END ScanDecimal8sNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDecimal16uNumber
%ifdef ScanDecimal16uNumber
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanDecimal16uNumber.Inc
uint8_t %'ModuleName'%.%ScanDecimal16uNumber(const unsigned char **str, uint16_t *val)
{
  /* scans a decimal number, and stops at any non-number. Number can have any preceding zeros or spaces. */
  #define _16_NOF_DIGITS  (5+1)
  uint8_t nofDigits = _16_NOF_DIGITS; /* maximum number of digits to avoid overflow */
  const unsigned char *p = *str;

  while(*p==' ') { /* skip leading spaces */
    p++;
  }
  *val = 0;
  while(*p>='0' && *p<='9' && nofDigits > 0) {
    *val = (uint16_t)((*val)*10 + *p-'0');
    nofDigits--;
    p++;
  } /* while */
  if (nofDigits==0) {
    return ERR_OVERFLOW;
  }
  if (nofDigits==_16_NOF_DIGITS) { /* no digits at all? */
    return ERR_FAILED;
  }
  *str = p;
  return ERR_OK;
}

%endif %- ScanDecimal16uNumber
%-BW_METHOD_END ScanDecimal16uNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDecimal16sNumber
%ifdef ScanDecimal16sNumber
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanDecimal16sNumber.Inc
uint8_t %'ModuleName'%.%ScanDecimal16sNumber(const unsigned char **str, int16_t *val)
{
  /* Scans a decimal number, and stops at any non-number. Number can have any preceding spaces. */
  const unsigned char *p = *str;
  bool isNeg;
  uint16_t val16u;
  uint8_t res;

  while(*p==' ') { /* skip leading spaces */
    p++;
  }
  *val = 0;
  if (*p=='-') {
    isNeg = TRUE;
    p++; /* skip minus */
  } else {
    isNeg = FALSE;
  }
  res = %'ModuleName'%.%ScanDecimal16uNumber(&p, (uint16_t*)&val16u);
  if (res != ERR_OK) {
    return res;
  }
  if (isNeg) {
    *val = (int16_t)(-(int16_t)val16u);
  } else {
    *val = (int16_t)val16u;
  }
  *str = p;
  return ERR_OK;
}

%endif %- ScanDecimal16sNumber
%-BW_METHOD_END ScanDecimal16sNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDecimal32uNumber
%ifdef ScanDecimal32uNumber
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanDecimal32uNumber.Inc
uint8_t %'ModuleName'%.%ScanDecimal32uNumber(const unsigned char **str, uint32_t *val)
{
  /* scans a decimal number, and stops at any non-number. Number can have any preceding zeros or spaces. */
  #define _32_NOF_DIGITS  (10+1)
  uint8_t nofDigits = _32_NOF_DIGITS; /* maximum number of digits to avoid overflow */
  const unsigned char *p = *str;

  while(*p==' ') { /* skip leading spaces */
    p++;
  }
  *val = 0;
  while(*p>='0' && *p<='9' && nofDigits > 0) {
    *val = (uint32_t)((*val)*10 + *p-'0');
    nofDigits--;
    p++;
  } /* while */
  if (nofDigits==0) {
    return ERR_OVERFLOW;
  }
  if (nofDigits==_32_NOF_DIGITS) { /* no digits at all? */
    return ERR_FAILED;
  }
  *str = p;
  return ERR_OK;
}

%endif %- ScanDecimal32uNumber
%-BW_METHOD_END ScanDecimal32uNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDecimal32sNumber
%ifdef ScanDecimal32sNumber
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanDecimal32sNumber.Inc
uint8_t %'ModuleName'%.%ScanDecimal32sNumber(const unsigned char **str, int32_t *val)
{
  /* Scans a decimal number, and stops at any non-number. Number can have any preceding spaces. */
  const unsigned char *p = *str;
  bool isNeg;
  uint32_t val32u;
  uint8_t res;

  while(*p==' ') { /* skip leading spaces */
    p++;
  }
  *val = 0;
  if (*p=='-') {
    isNeg = TRUE;
    p++; /* skip minus */
  } else {
    isNeg = FALSE;
  }
  res = %'ModuleName'%.%ScanDecimal32uNumber(&p, &val32u);
  if (res != ERR_OK) {
    return res;
  }
  if (isNeg) {
    *val = (int32_t)(-(int32_t)val32u);
  } else {
    *val = (int32_t)val32u;
  }
  *str = p;
  return ERR_OK;
}

%endif %- ScanDecimal32sNumber
%-BW_METHOD_END ScanDecimal32sNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDecimal32sDotNumber
%ifdef ScanDecimal32sDotNumber
%define! Parstr
%define! Parintegral
%define! Parfractional
%define! ParnofFractionalZeros
%define! RetVal
%include Common\UtilityScanDecimal32sDotNumber.Inc
uint8_t %'ModuleName'%.%ScanDecimal32sDotNumber(const unsigned char **str, int32_t *integral, uint32_t *fractional, uint8_t *nofFractionalZeros)
{
  /* scans e.g. "-3445.071" and returns -3445 in integral part, and 71 in fractional part */
  uint8_t res;
  const unsigned char *p = *str;

  *integral = 0;
  *fractional = 0;
  *nofFractionalZeros = 0;
  res = %'ModuleName'%.%ScanDecimal32sNumber(&p, integral);
  if (res != ERR_OK) {
    return res;
  }
  if (*p=='.') {
    p++; /* skip '.' */
    while (*p=='0') { /* count leading zeros */
      (*nofFractionalZeros)++;
      p++; /* skip leading zero */
    }
    if (*p>='0' && *p<='9') { /* number */
      res = %'ModuleName'%.%ScanDecimal32uNumber(&p, fractional);
      if (res != ERR_OK) {
        return res;
      }
    }
  }
  *str = p; /* store parsing pointer */
  return ERR_OK;
}

%endif %- ScanDecimal32sDotNumber
%-BW_METHOD_END ScanDecimal32sDotNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcmp
%ifdef strcmp
%define! Parstr1
%define! Parstr2
%define! RetVal
%include Common\Utilitystrcmp.Inc
/***
int16_t %'ModuleName'%.%strcmp(const char *, const char *)
{
  Method is implemented as macro in the header file as wrapper to the standard strcmp() function
}
*/

%endif %- strcmp
%-BW_METHOD_END strcmp
%-************************************************************************************************************
%-BW_METHOD_BEGIN strncmp
%ifdef strncmp
%define! Parstr1
%define! Parstr2
%define! Parsize
%define! RetVal
%include Common\Utilitystrncmp.Inc
/***
int16_t %'ModuleName'%.%strncmp(const char *, const char *, size_t size)
{
  /Method is implemented as macro in the header file as wrapper to the standard strncmp() function
}
*/

%endif %- strncmp
%-BW_METHOD_END strncmp
%-************************************************************************************************************
%-BW_METHOD_BEGIN strlen
%ifdef strlen
%define! Parstr
%define! RetVal
%include Common\Utilitystrlen.Inc
/***
uint16_t %'ModuleName'%.%strlen(const char *)
{
  Method is implemented as macro in the header file as wrapper to the standard strlen() function
}
*/

%endif %- strlen
%-BW_METHOD_END strlen
%-************************************************************************************************************
%if defined(ScanHex8uNumber) | defined(ScanHex16uNumber) | defined(ScanHex32uNumber) | defined(ScanHex8uNumberNoPrefix)
static bool isHexCharacter(unsigned char ch) {
  /* returns TRUE if character is a hexadecimal character */
  return (ch>='0' && ch<='9') || (ch>='a' && ch<='f') || (ch>='A' && ch<='F');
}

static uint8_t PreScanHexNumber(const unsigned char **str) {
  const unsigned char *p = *str;

  while(*p==' ') { /* skip leading spaces */
    p++; /* skip space */
  }
  if (*p!='0') { /* must start with 0x */
    return ERR_FAILED;
  }
  p++; /* skip '0' */
  if (*p!='x') { /* must start with 0x */
    return ERR_FAILED;
  }
  p++; /* skip 'x' */
  *str = p;
  return ERR_OK;
}

static uint8_t HexToDec(const unsigned char **p, unsigned char *val) {
  /* convert a hexadecimal character into a decimal value */
  unsigned char ch = **p;

  if (ch>='0' && ch<='9') {
    *val = (unsigned char)(ch-'0');
    (*p)++;
    return ERR_OK;
  } else if (ch>='a' && ch<='f') {
    *val = (unsigned char)(ch-'a'+10);
    (*p)++;
    return ERR_OK;
  } else if (ch>='A' && ch<='F') {
    *val = (unsigned char)(ch-'A'+10);
    (*p)++;
    return ERR_OK;
  }
  return ERR_FAILED;
}

%endif
%-BW_METHOD_BEGIN ScanHex32uNumber
%ifdef ScanHex32uNumber
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanHex32uNumber.Inc
uint8_t %'ModuleName'%.%ScanHex32uNumber(const unsigned char **str, uint32_t *val)
{
  /* scans a decimal number, and stops at any non-number. Number can have any preceding zeros or spaces. */
  uint8_t nofDigits = 8; /* maximum number of digits to avoid overflow */
  const unsigned char *p = *str;
  uint8_t v;

  *val = 0;
  if (PreScanHexNumber(&p)!=ERR_OK) { /* skip leading spaces, and scan '0x' */
    return ERR_FAILED;
  }
  if (!isHexCharacter(*p)) { /* not a valid hex number sequence */
    return ERR_FAILED;
  }
  while (nofDigits>0 && HexToDec(&p, &v)==ERR_OK) {
    *val = (uint32_t)((*val)*16 + v);
    nofDigits--;
  } /* while */
  *str = p;
  return ERR_OK;
}

%endif %- ScanHex32uNumber
%-BW_METHOD_END ScanHex32uNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanHex16uNumber
%ifdef ScanHex16uNumber
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanHex16uNumber.Inc
uint8_t %'ModuleName'%.%ScanHex16uNumber(const unsigned char **str, uint16_t *val)
{
  /* scans a decimal number, and stops at any non-number. Number can have any preceding zeros or spaces. */
  uint8_t nofDigits = 4; /* maximum number of digits to read */
  const unsigned char *p = *str;
  uint8_t v;

  *val = 0;
  if (PreScanHexNumber(&p)!=ERR_OK) { /* skip leading spaces, and scan '0x' */
    return ERR_FAILED;
  }
  if (!isHexCharacter(*p)) { /* not a valid hex number sequence */
    return ERR_FAILED;
  }
  while (nofDigits>0 && HexToDec(&p, &v)==ERR_OK) {
    *val = (uint16_t)((*val)*16 + v);
    nofDigits--;
  } /* while */
  *str = p;
  return ERR_OK;
}

%endif %- ScanHex16uNumber
%-BW_METHOD_END ScanHex16uNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanHex8uNumber
%ifdef ScanHex8uNumber
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanHex8uNumber.Inc
uint8_t %'ModuleName'%.%ScanHex8uNumber(const unsigned char **str, uint8_t *val)
{
  /* scans a hex number with 0x, and stops at any non-number. Number can have any preceding zeros or spaces. */
  uint8_t nofDigits = 2; /* maximum number of digits to read */
  const unsigned char *p = *str;
  uint8_t v;

  *val = 0;
  if (PreScanHexNumber(&p)!=ERR_OK) { /* skip leading spaces, and scan '0x' */
    return ERR_FAILED;
  }
  if (!isHexCharacter(*p)) { /* not a valid hex number sequence */
    return ERR_FAILED;
  }
  while (nofDigits>0 && HexToDec(&p, &v)==ERR_OK) {
    *val = (uint8_t)((*val)*16 + v);
    nofDigits--;
  } /* while */
  *str = p;
  return ERR_OK;
}

%endif %- ScanHex8uNumber
%-BW_METHOD_END ScanHex8uNumber
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanHex8uNumberNoPrefix
%ifdef ScanHex8uNumberNoPrefix
%define! Parstr
%define! Parval
%define! RetVal
%include Common\UtilityScanHex8uNumberNoPrefix.Inc
uint8_t %'ModuleName'%.%ScanHex8uNumberNoPrefix(const unsigned char **str, uint8_t *val)
{
  /* scans a hex number without 0x, and stops at any non-number. Number can have any preceding zeros or spaces. */
  uint8_t nofDigits = 2; /* maximum number of digits to read */
  const unsigned char *p = *str;
  uint8_t v;

  *val = 0;
  while(*p==' ') { /* skip leading spaces */
    p++; /* skip space */
  }
  if (!isHexCharacter(*p)) { /* not a valid hex number sequence */
    return ERR_FAILED;
  }
  while (nofDigits>0 && HexToDec(&p, &v)==ERR_OK) {
    *val = (uint8_t)((*val)*16 + v);
    nofDigits--;
  } /* while */
  *str = p;
  return ERR_OK;
}

%endif %- ScanHex8uNumberNoPrefix
%-BW_METHOD_END ScanHex8uNumberNoPrefix
%-************************************************************************************************************
%-BW_METHOD_BEGIN strtailcmp
%ifdef strtailcmp
%define! Parstr
%define! Partail
%define! RetVal
%include Common\Utilitystrtailcmp.Inc
uint8_t %'ModuleName'%.%strtailcmp(const uint8_t *str, const uint8_t *tail)
{
  int i, j;

  i = (int)%'ModuleName'%.%strlen((char*)str);
  j = (int)%'ModuleName'%.%strlen((char*)tail);
  if (j>i) { /* str is smaller than tail */
    return 1; /* cannot match */
  }
  /* compare strings */
  while(str[i]==tail[j]) {
    i--;
    j--;
    if (j<0) {
      return 0; /* match */
    }
  }
  return 1; /* !=0 means no match */
}

%endif %- strtailcmp
%-BW_METHOD_END strtailcmp
%-************************************************************************************************************
%-BW_METHOD_BEGIN strCutTail
%ifdef strCutTail
%define! Parstr
%define! Partail
%define! RetVal
%include Common\UtilitystrCutTail.Inc
uint8_t %'ModuleName'%.%strCutTail(uint8_t *str, uint8_t *tail)
{
  /* cut the tail from the string */
  size_t strLen, tailLen;

  if (%'ModuleName'%.%strtailcmp(str, tail)!=0) { /* check if tail is present */
    return ERR_FAILED; /* tail not found */
  }
  tailLen = %'ModuleName'%.%strlen((char*)tail);
  strLen = %'ModuleName'%.%strlen((char*)str);
  /* write \0 to cut the tail */
  str[strLen-tailLen] = '\0';
  return ERR_OK;
}

%endif %- strCutTail
%-BW_METHOD_END strCutTail
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNum32sDotValue100
%ifdef strcatNum32sDotValue100
%define! Pardst
%define! PardstSize
%define! Parnum
%include Common\UtilitystrcatNum32sDotValue100.Inc
void %'ModuleName'%.%strcatNum32sDotValue100(uint8_t *dst, size_t dstSize, int32_t num)
{
  if (num<0 && (num/100)==0) { /* e.g. -53 ==> write sign, as strcatNum32() below will not know that it is negative */
    %'ModuleName'%.%chcat(dst, dstSize, '-');
  }
  %'ModuleName'%.%strcatNum32s(dst, dstSize, num/100);
  %'ModuleName'%.%chcat(dst, dstSize, '.');
  if (num<0) {
    num = -num;
  }
  %'ModuleName'%.%strcatNum16uFormatted(dst, dstSize, (uint16_t)((unsigned)num%%100U), '0', 2);
}

%endif %- strcatNum32sDotValue100
%-BW_METHOD_END strcatNum32sDotValue100
%-************************************************************************************************************
%-BW_METHOD_BEGIN strFind
%ifdef strFind
%define! Parstr
%define! ParsubStr
%define! RetVal
%include Common\UtilitystrFind.Inc
int16_t %'ModuleName'%.%strFind(uint8_t *str, uint8_t *subStr)
{
  int16_t i, len;

  len = (int16_t)%'ModuleName'%.%strlen((char*)subStr);
  for (i=0; *str!='\0'; i++, str++) {
    if (%'ModuleName'%.%strncmp((char*)str, (char*)subStr, len)==0) {
      return i; /* found */
    }
  }
  return -1; /* not found */
}

%endif %- strFind
%-BW_METHOD_END strFind
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanSeparatedNumbers
%ifdef ScanSeparatedNumbers
%define! Parstr
%define! ParnofValues
%define! Parseparator
%define! ParnumberType
%define! Parvalues
%define! RetVal
%include Common\UtilityScanSeparatedNumbers.Inc
uint8_t %'ModuleName'%.%ScanSeparatedNumbers(const unsigned char **str, uint8_t *values, uint8_t nofValues, char separator, %'ModuleName'_SeparatedNumberType numberType)
{
  int i;
  uint8_t res;
  const unsigned char *p;

  if (nofValues<=1) {
    return ERR_FAILED; /* need at least two values */
  }
  p = *str;
  for(i=0;i<nofValues;i++) {
    if (numberType==%'ModuleName'%.SEP_NUM_TYPE_UINT8) {
      res = %'ModuleName'%.%ScanDecimal8uNumber(&p, &values[i]);
    } else if (numberType==%'ModuleName'%.SEP_NUM_TYPE_UINT8_HEX_NO_PREFIX) {
      res = %'ModuleName'%.%ScanHex8uNumberNoPrefix(&p, &values[i]);
    } else {
      res = ERR_FAILED;
    }
    if (res==ERR_OK) { /* parsing ok */
      if (i!=nofValues-1) {
        if ((*p)!=separator) { /* not last one */
          return ERR_FAILED; /* wrong separator */
        } /* if */
        p++; /* skip separator and continue scanning */
      } /* if */
    } else {
      return ERR_FAILED; /* failed parsing number */
    } /* if */
  } /* for */
  *str = p;
  return ERR_OK;
}

%endif %- ScanSeparatedNumbers
%-BW_METHOD_END ScanSeparatedNumbers
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanDoubleQuotedString
%ifdef ScanDoubleQuotedString
%define! Parcmd
%define! Parbuf
%define! ParbufSize
%define! RetVal
%include Common\UtilityScanDoubleQuotedString.Inc
uint8_t %'ModuleName'%.%ScanDoubleQuotedString(const uint8_t **cmd, uint8_t *buf, size_t bufSize)
{
  const uint8_t *p = *cmd;

  if (bufSize==1) {
    return ERR_FAILED; /* buffer too small */
  }
  buf[bufSize-1] = '\0'; /* terminate buffer */
  bufSize--;
  if (*p!='\"') {
    return ERR_FAILED; /* does not start with double quote */
  }
  p++; /* skip double quote */
  while(*p!='\"' && *p!='\0' && bufSize>0) {
    *buf++ = *p++;
    bufSize--;
  }
  if (*p!='\"') {
    return ERR_FAILED; /* no terminating double quote */
  } else {
    p++; /* skip double quote */
    *buf = '\0'; /* terminate buffer */
  }
  *cmd = p; /* advance pointer */
  return ERR_OK;
}

%endif %- ScanDoubleQuotedString
%-BW_METHOD_END ScanDoubleQuotedString
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatPad
%ifdef strcatPad
%define! Pardst
%define! PardstSize
%define! Parsrc
%define! ParpadChar
%define! ParsrcPadSize
%include Common\UtilitystrcatPad.Inc
void %'ModuleName'%.%strcatPad(uint8_t *dst, size_t dstSize, const unsigned char *src, char padChar, uint8_t srcPadSize)
{
  uint8_t *p;
  size_t nof = 0;

  if (dstSize<2) {
    return; /* hmm, really to small for anything than the zero byte? */
  }
  p = dst;
  while(*p != '\0') { /* find end of string */
    p++;
    nof++;
  }
  %'ModuleName'%.%strcat(dst+nof, dstSize-nof, src); /* add string */
  dstSize -= nof;
  while(*p != '\0' && srcPadSize>0 && dstSize>1) {
    p++;
    srcPadSize--;
    dstSize--;
  }
  while(srcPadSize>0 && dstSize>1) {
    *p++ = padChar; /* add padding char */
    srcPadSize--;
    dstSize--;
  }
  *p = '\0'; /* terminate string */
}

%endif %- strcatPad
%-BW_METHOD_END strcatPad
%-************************************************************************************************************
%-BW_METHOD_BEGIN NumFloatToStr
%ifdef NumFloatToStr
%define! Pardst
%define! PardstSize
%define! Parval
%define! ParnofFracDigits
%include Common\UtilityNumFloatToStr.Inc
void %'ModuleName'%.%NumFloatToStr(uint8_t *dst, size_t dstSize, float val, uint8_t nofFracDigits)
{
  uint32_t integral;
  uint32_t fractional, shift;
  int i;
  bool isNeg;

  isNeg = (bool)(val<0);
  if (isNeg) {
    val = -val; /* make it positive */
  }
  integral = (uint32_t)(int32_t)val;
  val = val-(float)integral; /* get rid of integral part */
  shift = 1;
  for(i=0;i<nofFracDigits;i++) {
    shift *= 10;
  }
  /* get fractional part */
  fractional = (uint32_t)(val*shift);
  /* write integral part */
  if (integral==0 && fractional==0) { /* special check to avoid writing -0 or -0.000 */
    %'ModuleName'%.%Num32sToStr(dst, dstSize, 0); /* just write the zero */
  } else if (isNeg) { /* for negative numbers, write it with sign */
    %'ModuleName'%.%strcpy(dst, dstSize, (unsigned char*)"-");
    %'ModuleName'%.%strcatNum32s(dst, dstSize, (int32_t)integral);
  } else {
    %'ModuleName'%.%Num32sToStr(dst, dstSize, (int32_t)integral);
  }
  /* write fractional part */
  if (nofFracDigits>0) {
    %'ModuleName'%.%chcat(dst, dstSize, '.');
    %'ModuleName'%.%strcatNum32uFormatted(dst, dstSize, fractional, '0', nofFracDigits);
  }
}

%endif %- NumFloatToStr
%-BW_METHOD_END NumFloatToStr
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNumFloat
%ifdef strcatNumFloat
%define! Pardst
%define! PardstSize
%define! Parval
%define! ParnofFracDigits
%include Common\UtilitystrcatNumFloat.Inc
void %'ModuleName'%.%strcatNumFloat(uint8_t *dst, size_t dstSize, float val, uint8_t nofFracDigits)
{
  uint8_t buf[32];

  %'ModuleName'%.%NumFloatToStr(buf, sizeof(buf), val, nofFracDigits);
  %'ModuleName'%.%strcat(dst, dstSize, buf);
}

%endif %- strcatNumFloat
%-BW_METHOD_END strcatNumFloat
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetValue16LE
%ifdef GetValue16LE
%define! PardataP
%define! RetVal
%include Common\UtilityGetValue16LE.Inc
uint16_t %'ModuleName'%.%GetValue16LE(uint8_t *dataP)
{
  return (uint16_t)((dataP[1]<<8)+(dataP[0]));
}

%endif %- GetValue16LE
%-BW_METHOD_END GetValue16LE
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetValue24LE
%ifdef GetValue24LE
%define! PardataP
%define! RetVal
%include Common\UtilityGetValue24LE.Inc
uint32_t %'ModuleName'%.%GetValue24LE(uint8_t *dataP)
{
  return (uint32_t)(((uint32_t)dataP[2])<<16)+(dataP[1]<<8)+(dataP[0]);
}

%endif %- GetValue24LE
%-BW_METHOD_END GetValue24LE
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetValue32LE
%ifdef GetValue32LE
%define! PardataP
%define! RetVal
%include Common\UtilityGetValue32LE.Inc
uint32_t %'ModuleName'%.%GetValue32LE(uint8_t *dataP)
{
  return (uint32_t)(((uint32_t)dataP[3])<<24)+(((uint32_t)dataP[2])<<16)+(dataP[1]<<8)+(dataP[0]);
}

%endif %- GetValue32LE
%-BW_METHOD_END GetValue32LE
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetValue16LE
%ifdef SetValue16LE
%define! Pardata
%define! PardataP
%include Common\UtilitySetValue16LE.Inc
void %'ModuleName'%.%SetValue16LE(uint16_t data, uint8_t *dataP)
{
  dataP[0] = (uint8_t)(data&0xff); /* LSB */
  dataP[1] = (uint8_t)((data>>8)&0xff); /* MSB */
}

%endif %- SetValue16LE
%-BW_METHOD_END SetValue16LE
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetValue24LE
%ifdef SetValue24LE
%define! Pardata
%define! PardataP
%include Common\UtilitySetValue24LE.Inc
void %'ModuleName'%.%SetValue24LE(uint32_t data, uint8_t *dataP)
{
  dataP[0] = (uint8_t)(data&0xff); /* LSB */
  dataP[1] = (uint8_t)((data>>8)&0xff);
  dataP[2] = (uint8_t)((data>>16)&0xff);
}

%endif %- SetValue24LE
%-BW_METHOD_END SetValue24LE
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetValue32LE
%ifdef SetValue32LE
%define! Pardata
%define! PardataP
%include Common\UtilitySetValue32LE.Inc
void %'ModuleName'%.%SetValue32LE(uint32_t data, uint8_t *dataP)
{
  dataP[0] = (uint8_t)(data&0xff); /* LSB */
  dataP[1] = (uint8_t)((data>>8)&0xff);
  dataP[2] = (uint8_t)((data>>16)&0xff);
  dataP[3] = (uint8_t)((data>>24)&0xff);
}

%endif %- SetValue32LE
%-BW_METHOD_END SetValue32LE
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\UtilityDeinit.Inc
void %'ModuleName'%.%Deinit(void)
{
  /* nothing needed */
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\UtilityInit.Inc
void %'ModuleName'%.%Init(void)
{
  /* nothing needed */
}

%endif %- Init
%-BW_METHOD_END Init
%-************************************************************************************************************
%-BW_METHOD_BEGIN map
%ifdef map
%define! Parx
%define! Parin_min
%define! Parin_max
%define! Parout_min
%define! Parout_max
%define! RetVal
%include Common\Utilitymap.Inc
int32_t %'ModuleName'%.%map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
{
#if 0 /* original Arduino implementation */
  return (x-in_min)*(out_max-out_min)/(in_max-in_min)+out_min;
#else /* improved version, see https://github.com/arduino/Arduino/issues/2466 */
  if ((in_max - in_min) > (out_max - out_min)) {
    return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
  } else {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
#endif
}

%endif %- map
%-BW_METHOD_END map
%-************************************************************************************************************
%-BW_METHOD_BEGIN constrain
%ifdef constrain
%define! Parval
%define! Parmin
%define! Parmax
%define! RetVal
%include Common\Utilityconstrain.Inc
int32_t %'ModuleName'%.%constrain(int32_t val, int32_t min, int32_t max)
{
  if (val<min) {
    return min;
  } else if (val>max) {
    return max;
  }
  return val;
}

%endif %- constrain
%-BW_METHOD_END constrain
%-************************************************************************************************************
%-BW_METHOD_BEGIN random
%ifdef random
%define! Parmin
%define! Parmax
%define! RetVal
%include Common\Utilityrandom.Inc
int32_t %'ModuleName'%.%random(int32_t min, int32_t max)
{
  int32_t val;

  val = rand()%%(max-min+1)+min;
  return %'ModuleName'%.constrain(val, min, max);
}

%endif %- random
%-BW_METHOD_END random
%-************************************************************************************************************
%-BW_METHOD_BEGIN randomSetSeed
%ifdef randomSetSeed
%define! Parseed
%include Common\UtilityrandomSetSeed.Inc
void %'ModuleName'%.%randomSetSeed(unsigned int seed)
{
  srand(seed); /* set random number generator seed */
}

%endif %- randomSetSeed
%-BW_METHOD_END randomSetSeed
%-************************************************************************************************************
%-BW_METHOD_BEGIN map64
%ifdef map64
%define! Parx
%define! Parin_min
%define! Parin_max
%define! Parout_min
%define! Parout_max
%define! RetVal
%include Common\Utilitymap64.Inc
#ifdef __GNUC__ /* HIWARE compiler does not support 64bit data types */
int64_t %'ModuleName'%.%map64(int64_t x, int64_t in_min, int64_t in_max, int64_t out_min, int64_t out_max)
{
  if ((in_max - in_min) > (out_max - out_min)) {
    return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
  } else {
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  }
}
#endif

%endif %- map64
%-BW_METHOD_END map64
%-************************************************************************************************************
%-BW_METHOD_BEGIN strcatNumHex
%ifdef strcatNumHex
%define! Pardst
%define! PardstSize
%define! Parnum
%define! ParnofBytes
%include Common\UtilitystrcatNumHex.Inc
void %'ModuleName'%.%strcatNumHex(uint8_t *dst, size_t dstSize, uint32_t num, uint8_t nofBytes)
{
  if (nofBytes==1) {
    %'ModuleName'%.%strcatNum8Hex(dst, dstSize, (uint8_t)num);
  } else if (nofBytes==2) {
    %'ModuleName'%.%strcatNum16Hex(dst, dstSize, (uint16_t)num);
  } else if (nofBytes==3) {
    %'ModuleName'%.%strcatNum24Hex(dst, dstSize, num);
  } else { /* nofBytes==4 */
    %'ModuleName'%.%strcatNum32Hex(dst, dstSize, num);
  }
}

%endif %- strcatNumHex
%-BW_METHOD_END strcatNumHex
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanRGB
%ifdef ScanRGB
%define! Parstr
%define! Parr
%define! Parg
%define! Parb
%define! RetVal
%include Common\UtilityScanRGB.Inc
uint8_t %'ModuleName'%.%ScanRGB(const unsigned char **str, uint8_t *r, uint8_t *g, uint8_t *b)
{
  const unsigned char *p;
  int32_t val32;
  int32_t rv, gv, bv;

  p = *str;
  while(*p==' ') {
    p++; /* skip leading spaces */
  }
  if (   *p=='0' && *(p+1)=='x' /* hexadecimal, read single number */
      && %'ModuleName'%.%xatoi(&p, &val32)==ERR_OK
      && val32 <= 0xffffff
     )
  {
    *r = (val32>>16)&0xff;
    *g = (val32>>8)&0xff;
    *b = val32&0xff;
    return ERR_OK;
  } else { /* not starting with 0x (hex): read three values */
    if (   %'ModuleName'%.%xatoi(&p, &rv)==ERR_OK && rv>=0 && rv<=0xff
        && %'ModuleName'%.%xatoi(&p, &gv)==ERR_OK && gv>=0 && gv<=0xff
        && %'ModuleName'%.%xatoi(&p, &bv)==ERR_OK && bv>=0 && bv<=0xff
       )
    {
      *r = rv;
      *g = gv;
      *b = bv;
      return ERR_OK;
    }
  }
  return ERR_FAILED;
}

%endif %- ScanRGB
%-BW_METHOD_END ScanRGB
%-************************************************************************************************************
%-BW_METHOD_BEGIN ScanRGB32
%ifdef ScanRGB32
%define! Parstr
%define! Parrgb
%define! RetVal
%include Common\UtilityScanRGB32.Inc
uint8_t %'ModuleName'%.%ScanRGB32(const unsigned char **str, uint32_t *rgb)
{
  uint8_t res, r, g, b;

  res = %'ModuleName'%.%ScanRGB(str, &r, &g, &b);
  if (res==ERR_OK) {
    *rgb = (r<<16)|(g<<8)|b;
    return ERR_OK;
  }
  return ERR_FAILED;
}

%endif %- ScanRGB32
%-BW_METHOD_END ScanRGB32
%-************************************************************************************************************
%-BW_METHOD_BEGIN SkipSpaces
%ifdef SkipSpaces
%define! Parstr
%include Common\UtilitySkipSpaces.Inc
void %'ModuleName'%.%SkipSpaces(const unsigned char **str)
{
  while(**str == ' ') {
    (*str)++; /* skip space */
  }
}

%endif %- SkipSpaces
%-BW_METHOD_END SkipSpaces
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%CODE_BEGIN
%if (CPUfamily = "S32K")
#ifdef CPU_INIT_MCUONECLIPSE_DRIVERS
%endif
  %'ModuleName'%.%Init(); /* ### %DeviceType "%DeviceName" init code ... */
%if (CPUfamily = "S32K")
#endif
%endif
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for Utility
 *
 * This header file is used to configure settings of the Utility module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

/* no configuration supported yet */
%- #define %'ModuleName'%.CONFIG_SETTING

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
