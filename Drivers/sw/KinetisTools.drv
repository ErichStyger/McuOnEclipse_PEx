%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    09.10.2014
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\KinetisToolsSettings.Inc
%define! Abstract Common\KinetisToolsAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

#include <stddef.h> /* for size_t */
#if %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED
%if defined(Shell)
  #include "%@Shell@ModuleName.h" /* Command line shell */
%else
  #include "McuShell.h" /* Command line shell */
%endif
#endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

#ifndef __BWUserType_%'ModuleName'_ConstCharPtr
#define __BWUserType_%'ModuleName'_ConstCharPtr
  typedef const uint8_t *%'ModuleName'_ConstCharPtr;             %>40/* Pointer to constant string */
#endif

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-

#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M && %@sdk@'ModuleName'%.CONFIG_CORTEX_M>=3 /* only for Cortex-M3 or higher */
  /* DWT (Data Watchpoint and Trace) registers, only exists on ARM Cortex with a DWT unit */
  #define %'ModuleName'_DWT_CONTROL             (*((volatile uint32_t*)0xE0001000))
    /*!< DWT Control register */
  #define %'ModuleName'_DWT_CYCCNTENA_BIT       (1UL<<0)
    /*!< CYCCNTENA bit in DWT_CONTROL register */
  #define %'ModuleName'_DWT_CYCCNT              (*((volatile uint32_t*)0xE0001004))
    /*!< DWT Cycle Counter register */
  #define %'ModuleName'_DEMCR                   (*((volatile uint32_t*)0xE000EDFC))
    /*!< DEMCR: Debug Exception and Monitor Control Register */
  #define %'ModuleName'_TRCENA_BIT              (1UL<<24)
    /*!< Trace enable bit in DEMCR register */
#endif

typedef struct {
  uint8_t id[16]; /* 128 bit ID */
} %'ModuleName'%.UID;

typedef enum {
  %'ModuleName'%.FAMILY_K10_K12,                                 %>40/* K10 or K12 */
  %'ModuleName'%.FAMILY_K20_K22,                                 %>40/* K10 or K12 */
  %'ModuleName'%.FAMILY_K30_K11_K61,                             %>40/* K30, K11 or K61 */
  %'ModuleName'%.FAMILY_K40_K21,                                 %>40/* K40 or K21 */
  %'ModuleName'%.FAMILY_K70,                                     %>40/* K70 */
  %'ModuleName'%.FAMILY_UNKONWN,                                 %>40/* Unknown */
  %'ModuleName'%.FAMILY_LAST                                     %>40/* Must be last one! */
} %'ModuleName'%.FAMILY;

#define %'ModuleName'%.PARSE_COMMAND_ENABLED  %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED
  /*!< set to 1 if method ParseCommand() is present, 0 otherwise */
%-BW_CUSTOM_USERTYPE_END

#ifdef __cplusplus
extern "C" {
#endif

%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
#if %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char* cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io);
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\KinetisToolsParseCommand.Inc
#endif

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN SoftwareReset
%ifdef SoftwareReset
void %'ModuleName'%.%SoftwareReset(void);
%include Common\KinetisToolsSoftwareReset.Inc

%endif %- SoftwareReset
%-BW_METHOD_END SoftwareReset
%-************************************************************************************************************
%-BW_METHOD_BEGIN UIDGet
%ifdef UIDGet
uint8_t %'ModuleName'%.%UIDGet(%'ModuleName'_UID *uid);
%define! Paruid
%define! RetVal
%include Common\KinetisToolsUIDGet.Inc

%endif %- UIDGet
%-BW_METHOD_END UIDGet
%-************************************************************************************************************
%-BW_METHOD_BEGIN UIDSame
%ifdef UIDSame
bool %'ModuleName'%.%UIDSame(const %'ModuleName'_UID *src, const %'ModuleName'_UID *dst);
%define! Parsrc
%define! ParVariable_1
%define! RetVal
%include Common\KinetisToolsUIDSame.Inc

%endif %- UIDSame
%-BW_METHOD_END UIDSame
%-************************************************************************************************************
%-BW_METHOD_BEGIN UIDtoString
%ifdef UIDtoString
uint8_t %'ModuleName'%.%UIDtoString(const %'ModuleName'_UID *uid, uint8_t *buf, size_t bufSize);
%define! Paruid
%define! Parbuf
%define! ParbufSize
%define! RetVal
%include Common\KinetisToolsUIDtoString.Inc

%endif %- UIDtoString
%-BW_METHOD_END UIDtoString
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetKinetisFamilyString
%ifdef GetKinetisFamilyString
%'ModuleName'_ConstCharPtr %'ModuleName'%.%GetKinetisFamilyString(void);
%define! RetVal
%include Common\KinetisToolsGetKinetisFamilyString.Inc

%endif %- GetKinetisFamilyString
%-BW_METHOD_END GetKinetisFamilyString
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetPC
%ifdef GetPC
void* %'ModuleName'%.%GetPC(void);
%define! RetVal
%include Common\KinetisToolsGetPC.Inc

%endif %- GetPC
%-BW_METHOD_END GetPC
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetSP
%ifdef GetSP
void* %'ModuleName'%.%GetSP(void);
%define! RetVal
%include Common\KinetisToolsGetSP.Inc

%endif %- GetSP
%-BW_METHOD_END GetSP
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetPSP
%ifdef SetPSP
void %'ModuleName'%.%SetPSP(void *setval);
%define! Parsetval
%include Common\KinetisToolsSetPSP.Inc

%endif %- SetPSP
%-BW_METHOD_END SetPSP
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetLR
%ifdef SetLR
void %'ModuleName'%.%SetLR(uint32_t setval);
%define! Parsetval
%include Common\KinetisToolsSetLR.Inc

%endif %- SetLR
%-BW_METHOD_END SetLR
%-************************************************************************************************************
%-BW_METHOD_BEGIN InitCycleCounter
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M && %@sdk@'ModuleName'%.CONFIG_CORTEX_M>=3 /* only for Cortex-M3 or higher */
%ifdef InitCycleCounter
#define %'ModuleName'%.%InitCycleCounter() \
  %'ModuleName'_DEMCR |= %'ModuleName'_TRCENA_BIT
  /*!< TRCENA: Enable trace and debug block DEMCR (Debug Exception and Monitor Control Register */
%include Common\KinetisToolsInitCycleCounter.Inc
%endif %- InitCycleCounter
#endif

%-BW_METHOD_END InitCycleCounter
%-************************************************************************************************************
%-BW_METHOD_BEGIN ResetCycleCounter
%ifdef ResetCycleCounter
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M && %@sdk@'ModuleName'%.CONFIG_CORTEX_M>=3 /* only for Cortex-M3 or higher */
#define %'ModuleName'%.%ResetCycleCounter() \
  %'ModuleName'_DWT_CYCCNT = 0
  /*!< Reset cycle counter */
%include Common\KinetisToolsResetCycleCounter.Inc
%endif %- ResetCycleCounter
#endif

%-BW_METHOD_END ResetCycleCounter
%-************************************************************************************************************
%-BW_METHOD_BEGIN EnableCycleCounter
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M && %@sdk@'ModuleName'%.CONFIG_CORTEX_M>=3 /* only for Cortex-M3 or higher */
%ifdef EnableCycleCounter
#define %'ModuleName'%.%EnableCycleCounter() \
  %'ModuleName'_DWT_CONTROL |= %'ModuleName'_DWT_CYCCNTENA_BIT
  /*!< Enable cycle counter */
%include Common\KinetisToolsEnableCycleCounter.Inc
%endif %- EnableCycleCounter
#endif

%-BW_METHOD_END EnableCycleCounter
%-************************************************************************************************************
%-BW_METHOD_BEGIN DisableCycleCounter
%ifdef DisableCycleCounter
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M && %@sdk@'ModuleName'%.CONFIG_CORTEX_M>=3 /* only for Cortex-M3 or higher */
#define %'ModuleName'%.%DisableCycleCounter() \
  %'ModuleName'_DWT_CONTROL &= ~%'ModuleName'_DWT_CYCCNTENA_BIT
  /*!< Disable cycle counter */
%include Common\KinetisToolsDisableCycleCounter.Inc
%endif %- DisableCycleCounter
#endif

%-BW_METHOD_END DisableCycleCounter
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCycleCounter
%ifdef GetCycleCounter
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M && %@sdk@'ModuleName'%.CONFIG_CORTEX_M>=3 /* only for Cortex-M3 or higher */
#define %'ModuleName'%.%GetCycleCounter() \
  %'ModuleName'_DWT_CYCCNT
  /*!< Read cycle counter register */
%define! RetVal
%include Common\KinetisToolsGetCycleCounter.Inc
%endif %- GetCycleCounter
#endif

%-BW_METHOD_END GetCycleCounter
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\KinetisToolsDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\KinetisToolsInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-BW_DEFINITION_END
/* END %ModuleName. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\KinetisToolsSettings.Inc
%define! Abstract Common\KinetisToolsAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"

#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M

#include "%@Utility@ModuleName.h" /* various utility functions */
#if %@sdk@'ModuleName'%.CONFIG_NXP_SDK_2_0_USED
  #include "fsl_common.h"
  #if %@sdk@'ModuleName'%.CONFIG_CPU_IS_KINETIS
    #include "fsl_sim.h" /* system integration module, used for CPU ID */
  #elif %@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC  /* LPC845 */
    #include "fsl_iap.h" /* if missing, add this module from the MCUXpresso SDK */
  #endif
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED==%@sdk@'ModuleName'%.CONFIG_SDK_KINETIS_1_3
  #include "%ProcessorModule.h" /* include CPU related interfaces and defines */
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED==%@sdk@'ModuleName'%.CONFIG_SDK_S32K
  #include "%ProcessorModule.h" /* include CPU related interfaces and defines */
#elif %@sdk@'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M
  /* include device specific header file for CMSIS inside "%'ModuleName'config.h" */
#endif
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_KINETIS
#if %@sdk@'ModuleName'%.CONFIG_CORTEX_M==4
static const unsigned char *KinetisM4FamilyStrings[] =
{ /* FAMID (3 bits) are used as index */
  (const unsigned char *)"K10 or K12 Family",          /* 000 */
  (const unsigned char *)"K20 or K22 Family",          /* 001 */
  (const unsigned char *)"K30, K11 or K61 Family",     /* 010 */
  (const unsigned char *)"K40 or K21 Family",          /* 011 */
  (const unsigned char *)"K60 or K62 Family",          /* 100 */
  (const unsigned char *)"K70 Family",                 /* 101 */
  (const unsigned char *)"Reserved",                   /* 110 */
  (const unsigned char *)"Reserved"                    /* 111 */
};
#endif

#if %@sdk@'ModuleName'%.CONFIG_CORTEX_M==0
static const unsigned char *KinetisM0FamilyStrings[] =
{ /* FAMID (3 bits) are used as index */
  (const unsigned char *)"KL0x",          /* 0000 */
  (const unsigned char *)"KL1x",          /* 0001 */
  (const unsigned char *)"KL2x",          /* 0010 */
  (const unsigned char *)"KL3x",          /* 0011 */
  (const unsigned char *)"KL4x",          /* 0100 */
  (const unsigned char *)"Reserved",      /* 0101 */
  (const unsigned char *)"Reserved",      /* 0110 */
  (const unsigned char *)"Reserved"       /* 0111 */
};
#endif
#endif

%if defined(Shell)
#if %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED
static uint8_t PrintStatus(const %@Shell@'ModuleName'%.StdIOType *io)
{
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_KINETIS
  uint8_t buf[1+(16*5)+1+1]; /* "{0xAA,...0xBB}" */
  uint8_t res;
  %'ModuleName'%.UID uid;
#endif

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"%'ModuleName'", (unsigned char*)"\r\n", io->stdOut);
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_KINETIS
  res = %'ModuleName'%.%UIDGet(&uid);
  if (res==ERR_OK) {
    res = %'ModuleName'%.%UIDtoString(&uid, buf, sizeof(buf));
  }
  if (res!=ERR_OK) {
    %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"ERROR");
  }
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  UID", buf, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);
#endif
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  Family", (uint8_t*)%'ModuleName'%.%GetKinetisFamilyString(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);
  return ERR_OK;
}
#endif

#if %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED
static uint8_t PrintHelp(const %@Shell@'ModuleName'%.StdIOType *io)
{
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"%'ModuleName'", (unsigned char*)"Group of %'ModuleName' commands\r\n", io->stdOut);
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  reset", (unsigned char*)"Performs a software reset\r\n", io->stdOut);
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  help|status", (unsigned char*)"Print help or status information\r\n", io->stdOut);
  return ERR_OK;
}
#endif
%endif %- Shell

%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN SoftwareReset
%ifdef SoftwareReset
%include Common\KinetisToolsSoftwareReset.Inc
void %'ModuleName'%.%SoftwareReset(void)
{
  /* Generic way to request a reset from software for ARM Cortex */
  /* See https://community.freescale.com/thread/99740
     To write to this register, you must write 0x5FA to the VECTKEY field, otherwise the processor ignores the write.
     SYSRESETREQ will cause a system reset asynchronously, so need to wait afterwards.
   */
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M
#if %@sdk@'ModuleName'%.CONFIG_PEX_SDK_USED
  SCB_AIRCR = SCB_AIRCR_VECTKEY(0x5FA) | SCB_AIRCR_SYSRESETREQ_MASK;
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED==%@sdk@'ModuleName'%.CONFIG_SDK_S32K
  S32_SCB->AIRCR = S32_SCB_AIRCR_VECTKEY(0x5FA) | S32_SCB_AIRCR_SYSRESETREQ_MASK;
#else
  SCB->AIRCR = (0x5FA<<SCB_AIRCR_VECTKEY_Pos)|SCB_AIRCR_SYSRESETREQ_Msk;
#endif
#endif
  for(;;) {
    /* wait until reset */
  }
}

%endif %- SoftwareReset
%-BW_METHOD_END SoftwareReset
%-************************************************************************************************************
%-BW_METHOD_BEGIN UIDGet
%ifdef UIDGet
%define! Paruid
%define! RetVal
%include Common\KinetisToolsUIDGet.Inc
/*!
 * \brief Return the 80bit UID of the device
 * \param uid Pointer to the buffer where to store the UID
 * \return Error code, ERR_OK if everything is ok.
 */
uint8_t %'ModuleName'%.%UIDGet(%'ModuleName'_UID *uid)
{
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_KINETIS
  #if %@sdk@'ModuleName'%.CONFIG_NXP_SDK_2_0_USED
  sim_uid_t tmp;
  int i, j;

  SIM_GetUniqueId(&tmp);
  /* init */
  for(i=0;i<sizeof(%'ModuleName'_UID);i++) {
    uid->id[i] = 0;
  }
  if (sizeof(sim_uid_t)>sizeof(%'ModuleName'_UID)) {
    return ERR_OVERFLOW;
  }
  /* copy into our own structure, data is right justified */
  for(i=0,j=sizeof(%'ModuleName'_UID)-sizeof(sim_uid_t);i<sizeof(sim_uid_t)&&i<sizeof(%'ModuleName'_UID);i++,j++) {
    uid->id[j] = ((uint8_t*)&tmp)[i];
  }
  #else /* not %@sdk@'ModuleName'%.CONFIG_NXP_SDK_2_0_USED */
    #ifdef SIM_UIDMH /* 80 or 128 bit UUID: SIM_UIDMH, SIM_UIDML and SIM_UIDL */
      #ifdef SIM_UIDH
  uid->id[0] = (SIM_UIDH>>24)&0xff;
  uid->id[1] = (SIM_UIDH>>16)&0xff;
  uid->id[2] = (SIM_UIDH>>8)&0xff;
  uid->id[3] = SIM_UIDH&0xff;
      #else
  uid->id[0] = 0;
  uid->id[1] = 0;
  uid->id[2] = 0;
  uid->id[3] = 0;
      #endif
  uid->id[4] = (SIM_UIDMH>>24)&0xff;
  uid->id[5] = (SIM_UIDMH>>16)&0xff;
  uid->id[6] = (SIM_UIDMH>>8)&0xff;
  uid->id[7] = SIM_UIDMH&0xff;

  uid->id[8] = (SIM_UIDML>>24)&0xff;
  uid->id[9] = (SIM_UIDML>>16)&0xff;
  uid->id[10] = (SIM_UIDML>>8)&0xff;
  uid->id[11] = SIM_UIDML&0xff;

  uid->id[12] = (SIM_UIDL>>24)&0xff;
  uid->id[13] = (SIM_UIDL>>16)&0xff;
  uid->id[14] = (SIM_UIDL>>8)&0xff;
  uid->id[15] = SIM_UIDL&0xff;
    #elif defined(SIM_UUIDMH) /* KE06Z: SIM_UUIDMH, SIM_UUIDML and SIM_UUIDL */
  uid->id[0] = 0;
  uid->id[1] = 0;
  uid->id[2] = 0;
  uid->id[3] = 0;
  uid->id[4] = 0;
  uid->id[5] = 0;
  uid->id[6] = (SIM_UUIDMH>>8)&0xff;
  uid->id[7] = SIM_UUIDMH&0xff;

  uid->id[8] = (SIM_UUIDML>>24)&0xff;
  uid->id[9] = (SIM_UUIDML>>16)&0xff;
  uid->id[10] = (SIM_UUIDML>>8)&0xff;
  uid->id[11] = SIM_UUIDML&0xff;

  uid->id[12] = (SIM_UUIDL>>24)&0xff;
  uid->id[13] = (SIM_UUIDL>>16)&0xff;
  uid->id[14] = (SIM_UUIDL>>8)&0xff;
  uid->id[15] = SIM_UUIDL&0xff;
    #else /* some devices like the KE02Z only have 64bit UUID: only SIM_UUIDH and SIM_UUIDL */
  uid->id[0] = 0;
  uid->id[1] = 0;
  uid->id[2] = 0;
  uid->id[3] = 0;
  uid->id[4] = 0;
  uid->id[5] = 0;
  uid->id[6] = 0;
  uid->id[7] = 0;
  uid->id[8] = (SIM_UUIDH>>24)&0xff;
  uid->id[9] = (SIM_UUIDH>>16)&0xff;
  uid->id[10] = (SIM_UUIDH>>8)&0xff;
  uid->id[11] = SIM_UUIDH&0xff;

  uid->id[12] = (SIM_UUIDL>>24)&0xff;
  uid->id[13] = (SIM_UUIDL>>16)&0xff;
  uid->id[14] = (SIM_UUIDL>>8)&0xff;
  uid->id[15] = SIM_UUIDL&0xff;
    #endif
  #endif /* %@sdk@'ModuleName'%.CONFIG_NXP_SDK_2_0_USED */
  return ERR_OK;
#elif %@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC /* LPC845 */
  uint8_t res;

  res = IAP_ReadUniqueID((uint32_t*)&uid->id[0]);
  if (res != kStatus_IAP_Success) {
    return ERR_FAILED;
  }
  return ERR_OK;
#else
  (void)uid; /* not used */
  return ERR_FAILED;
#endif
}

%endif %- UIDGet
%-BW_METHOD_END UIDGet
%-************************************************************************************************************
%-BW_METHOD_BEGIN UIDSame
%ifdef UIDSame
%define! Parsrc
%define! ParVariable_1
%define! RetVal
%include Common\KinetisToolsUIDSame.Inc
/*!
 * \brief Compares two UID
 * \param src One UID
 * \param dst The other UID
 * \return TRUE if the two UID's are the same
 */
bool %'ModuleName'%.%UIDSame(const %'ModuleName'_UID *src, const %'ModuleName'_UID *dst)
{
  unsigned int i;

  for(i=0; i<sizeof(%'ModuleName'_UID); i++) {
    if (src->id[i]!=dst->id[i]) {
      return FALSE; /* no match */
    }
  }
  return TRUE;
}

%endif %- UIDSame
%-BW_METHOD_END UIDSame
%-************************************************************************************************************
%-BW_METHOD_BEGIN UIDtoString
%ifdef UIDtoString
%define! Paruid
%define! Parbuf
%define! ParbufSize
%define! RetVal
%include Common\KinetisToolsUIDtoString.Inc
/*!
 * \brief Transforms the 80bit UID into a string
 * \param id Pointer to the buffer where to store the string
 * \param bufSize Size of buffer in bytes
 * \return Error code, ERR_OK if everything is ok.
 */
uint8_t %'ModuleName'%.%UIDtoString(const %'ModuleName'_UID *uid, uint8_t *buf, size_t bufSize)
{
  unsigned int i;

  %@Utility@'ModuleName'%.strcpy(buf, bufSize, (unsigned char*)"{");
  for(i=0;i<sizeof(%'ModuleName'_UID);i++) {
    %@Utility@'ModuleName'%.strcat(buf, bufSize, (unsigned char*)"0x");
    %@Utility@'ModuleName'%.strcatNum8Hex(buf, bufSize, uid->id[i]);
    if (i<sizeof(%'ModuleName'_UID)-1) {
      %@Utility@'ModuleName'%.strcat(buf, bufSize, (unsigned char*)",");
    }
  }
  %@Utility@'ModuleName'%.strcat(buf, bufSize, (unsigned char*)"}");
  return ERR_OK;
}

%endif %- UIDtoString
%-BW_METHOD_END UIDtoString
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\KinetisToolsParseCommand.Inc
#if %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char* cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io)
{
  uint8_t res = ERR_OK;

  if (%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_HELP) == 0
    || %@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' help") == 0) {
    *handled = TRUE;
    return PrintHelp(io);
  } else if (   (%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_STATUS)==0)
             || (%@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' status") == 0)
            )
  {
    *handled = TRUE;
    res = PrintStatus(io);
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' reset") == 0) {
    *handled = TRUE;
    %'ModuleName'%.%SoftwareReset(); /* will perform RESET and does NOT return here! */
  }
  return res;
}
#endif

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetKinetisFamilyString
%ifdef GetKinetisFamilyString
%define! RetVal
%include Common\KinetisToolsGetKinetisFamilyString.Inc
%'ModuleName'_ConstCharPtr %'ModuleName'%.%GetKinetisFamilyString(void)
{
#if %@sdk@'ModuleName'%.CONFIG_CPU_IS_KINETIS
  #if %@sdk@'ModuleName'%.CONFIG_CORTEX_M==0
  #ifdef SIM_SDID /* normal Kinetis define this */
    int32_t val;

    val = (SIM_SDID>>28)&0x3; /* bits 30..28 */
    if (val>=0 && val<=(int32_t)(sizeof(KinetisM0FamilyStrings)/sizeof(KinetisM0FamilyStrings[0]))) {
      return KinetisM0FamilyStrings[val];
    } else {
      return (%'ModuleName'_ConstCharPtr)"M0 Family ID out of bounds!";
    }
  #elif defined(SIM_SRSID_FAMID) /* MKE02Z4 defines this, hopefully all other KE too... */
    return (%'ModuleName'_ConstCharPtr)"KE0x Family"; /* 0000 only KE0x supported */
  #elif defined(SIM_SDID_FAMID)
    int32_t val;

    val = ((SIM->SDID)>>28)&0xF; /* bits 31..28 */
    if (val>=0 && val<=(int32_t)(sizeof(KinetisM0FamilyStrings)/sizeof(KinetisM0FamilyStrings[0]))) {
      return KinetisM0FamilyStrings[val];
    } else {
      return (%'ModuleName'_ConstCharPtr)"M0 Family ID out of bounds!";
    }
  #else
    #error "Unknown architecture!"
    return (%'ModuleName'_ConstCharPtr)"ERROR";
  #endif
  #elif %@sdk@'ModuleName'%.CONFIG_CORTEX_M==4
    #ifdef SIM_SDID /* normal Kinetis define this */
    int32_t val;

    val = (SIM_SDID>>4)&0x3; /* bits 6..4 */
    if (val>=0 && val<=(int32_t)(sizeof(KinetisM4FamilyStrings)/sizeof(KinetisM4FamilyStrings[0]))) {
      return KinetisM4FamilyStrings[val];
    } else {
      return (%'ModuleName'_ConstCharPtr)"M4 Family ID out of bounds!";
    }
    #elif defined(SIM_SDID_FAMID)
    int32_t val;

    val = ((SIM->SDID)>>4)&0x3; /* bits 6..4 */
    if (val>=0 && val<=(int32_t)(sizeof(KinetisM4FamilyStrings)/sizeof(KinetisM4FamilyStrings[0]))) {
      return KinetisM4FamilyStrings[val];
    } else {
      return (%'ModuleName'_ConstCharPtr)"M4 Family ID out of bounds!";
    }
    #else
    #error "Unknown architecture!"
    return (%'ModuleName'_ConstCharPtr)"ERROR";
    #endif
  #elif %@sdk@'ModuleName'%.CONFIG_CORTEX_M==7
  return (%'ModuleName'_ConstCharPtr)"Cortex-M7";
  #else
  #error "Unknown architecture!"
  return (%'ModuleName'_ConstCharPtr)"ERROR";
  #endif
#elif %@sdk@'ModuleName'%.CONFIG_CPU_IS_NORDIC_NRF
  return (%'ModuleName'_ConstCharPtr)"Nordic nRF";
#elif %@sdk@'ModuleName'%.CONFIG_CPU_IS_STM
  return (%'ModuleName'_ConstCharPtr)"STM32";
#elif %@sdk@'ModuleName'%.CONFIG_CPU_IS_IMXRT
  return (%'ModuleName'_ConstCharPtr)"NXP i.MX RT";
#elif %@sdk@'ModuleName'%.CONFIG_CPU_IS_S32K
  return (%'ModuleName'_ConstCharPtr)"NXP S32K";
#elif %@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC55xx
  return (%'ModuleName'_ConstCharPtr)"NXP LPC55xx";
#elif %@sdk@'ModuleName'%.CONFIG_CPU_IS_LPC
  return (%'ModuleName'_ConstCharPtr)"NXP LPC";
#else
  return (%'ModuleName'_ConstCharPtr)"UNKNOWN";
#endif
}

%endif %- GetKinetisFamilyString
%-BW_METHOD_END GetKinetisFamilyString
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetPC
%ifdef GetPC
%define! RetVal
%include Common\KinetisToolsGetPC.Inc
void* %'ModuleName'%.%GetPC(void)
{
#ifdef __GNUC__
  void *pc;

  __asm__ __volatile__ ("mov %%0, pc" : "=r"(pc));
  return pc;
#else
  #warning "only for GCC"
  return NULL;
#endif
}

%endif %- GetPC
%-BW_METHOD_END GetPC
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetSP
%ifdef GetSP
%define! RetVal
%include Common\KinetisToolsGetSP.Inc
void* %'ModuleName'%.%GetSP(void)
{
#ifdef __GNUC__
  void *sp;

  __asm__ __volatile__ ("mrs %%0, msp" : "=r"(sp));
  return sp;
#else
  #warning "only for GCC"
  return NULL;
#endif
}

%endif %- GetSP
%-BW_METHOD_END GetSP
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetPSP
%ifdef SetPSP
%define! Parsetval
%include Common\KinetisToolsSetPSP.Inc
void %'ModuleName'%.%SetPSP(void *setval)
{
#ifdef __GNUC__
  __asm__ volatile ("msr psp, %%[value]\n\t""dmb\n\t""dsb\n\t""isb\n\t"::[value]"r"(setval):);
  __asm__ volatile ("" ::: "memory");
#else
  #warning "only for GCC implemented"
#endif
}

%endif %- SetPSP
%-BW_METHOD_END SetPSP
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetLR
%ifdef SetLR
%define! Parsetval
%include Common\KinetisToolsSetLR.Inc
void %'ModuleName'%.%SetLR(uint32_t setval)
{
#ifdef __GNUC__
  __asm__ volatile ("mov lr, %%[value]\n\t"::[value]"r"(setval):);
  __asm__ volatile ("" ::: "memory");
#else
  #warning "only for GCC"
#endif
}

%endif %- SetLR
%-BW_METHOD_END SetLR
%-************************************************************************************************************
%-BW_METHOD_BEGIN InitCycleCounter
%ifdef InitCycleCounter
%include Common\KinetisToolsInitCycleCounter.Inc
/**
void %'ModuleName'%.%InitCycleCounter(void)
{
  ** Implemented as macro in header file
}
*/

%endif %- InitCycleCounter
%-BW_METHOD_END InitCycleCounter
%-************************************************************************************************************
%-BW_METHOD_BEGIN ResetCycleCounter
%ifdef ResetCycleCounter
%include Common\KinetisToolsResetCycleCounter.Inc
/**
void %'ModuleName'%.%ResetCycleCounter(void)
{
  ** Implemented as macro in header file
}
*/

%endif %- ResetCycleCounter
%-BW_METHOD_END ResetCycleCounter
%-************************************************************************************************************
%-BW_METHOD_BEGIN EnableCycleCounter
%ifdef EnableCycleCounter
%include Common\KinetisToolsEnableCycleCounter.Inc
/**
void %'ModuleName'%.%EnableCycleCounter(void)
{
  ** Implemented as macro in header file
}
*/

%endif %- EnableCycleCounter
%-BW_METHOD_END EnableCycleCounter
%-************************************************************************************************************
%-BW_METHOD_BEGIN DisableCycleCounter
%ifdef DisableCycleCounter
%include Common\KinetisToolsDisableCycleCounter.Inc
/**
void %'ModuleName'%.%DisableCycleCounter(void)
{
  ** Implemented as macro in header file
}
*/

%endif %- DisableCycleCounter
%-BW_METHOD_END DisableCycleCounter
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCycleCounter
%ifdef GetCycleCounter
%define! RetVal
%include Common\KinetisToolsGetCycleCounter.Inc
/**
uint32_t %'ModuleName'%.%GetCycleCounter(void)
{
  ** Implemented as macro in header file
}
*/

%endif %- GetCycleCounter
%-BW_METHOD_END GetCycleCounter
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\KinetisToolsDeinit.Inc
void %'ModuleName'%.%Deinit(void)
{
  /* nothing needed */
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\KinetisToolsInit.Inc
void %'ModuleName'%.%Init(void)
{
  /* Nothing needed */
}

%endif %- Init
%-BW_METHOD_END Init
%-BW_IMPLEMENT_END

#endif /* %@sdk@'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M */
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
%CODE_BEGIN
%if (CPUfamily = "S32K")
#ifdef CPU_INIT_MCUONECLIPSE_DRIVERS
%endif
  %'ModuleName'%.%Init(); /* ### %DeviceType "%DeviceName" init code ... */
%if (CPUfamily = "S32K")
#endif
%endif
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for Kinetis Tools (or ARM in general)
 *
 * This header file is used to configure settings of the Kinetis Tools module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

#if !defined(%'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED)
%ifdef ParseCommand
  #define %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED  (1)
%else
  #define %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED  (0)
%endif %- ParseCommand
    /*!< 1: shell support enabled, 0: otherwise */
#endif

#if %@sdk@'ModuleName'%.CONFIG_NXP_SDK_2_0_USED
  /* will include system header file in the implementation file */
#elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED==%@sdk@'ModuleName'%.CONFIG_SDK_KINETIS_1_3
  /* will include system header file in the implementation file */
#elif %@sdk@'ModuleName'%.CONFIG_CPU_IS_ARM_CORTEX_M
  /* include here the low level CMSIS header files, e.g. with */
  #if %@sdk@'ModuleName'%.CONFIG_CPU_IS_STM32
    #include "stm32f3xx_hal.h" /* header file for STM32F303K8 */
  #elif %@sdk@'ModuleName'%.CONFIG_SDK_VERSION_USED==%@sdk@'ModuleName'%.CONFIG_SDK_NORDIC_NRF5
    #include "nrf.h"
  #endif
#endif

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------
