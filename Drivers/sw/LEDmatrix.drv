%-Driver generated by the Bean Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Bean Wizard
%- If you change these lines, Bean Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    06.11.2008
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%-
%INTERFACE
%define! Settings Common\LEDmatrixSettings.Inc
%define! Abstract Common\LEDmatrixAbstract.Inc
%include Common\Header.h

%if (defined(PEversionDecimal) && (PEversionDecimal <=0 '1283')) %- this is only supported with MCU 10.3
%if (CPUfamily = "Kinetis")
/* PEversionDecimal version: %PEversionDecimal (1283 for MCU10.3) */
#include "PE_LDD.h" /* hack for Processor Expert (e.g. in MCU10.3) and LDD: PE_LDD.h includes at the end all shared modules, causing a recursive header file include conflict */
%endif
%endif

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited beans */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

extern byte %'ModuleName'%.DisplayBuf[%ColumnSymbolNumItems][%RowSymbolNumItems]; /* buffer for the display */

%if %ColumnSymbolNumItems='1'
typedef byte _RevCathodeSensorValType;  /* our sensor can return a 8bit value */
%elif %ColumnSymbolNumItems='2'
typedef word _RevCathodeSensorValType;  /* our sensor can return a 16bit value */
%else
typedef dword _RevCathodeSensorValType;  /* fall back type in case we have more than 16 bits */
%endif

%define NofLedPixels 1
%:NofLedPixels=%ColumnSymbolNumItems
%:NofLedPixels*=8
%:NofLedPixels*=%RowSymbolNumItems

#define NOF_LED_PIXELS %NofLedPixels

#if NOF_LED_PIXELS <= 255
  typedef byte %'ModuleName'%.PixelCount; /*!< one byte is enough to hold a counter for all pixels */
#else
  typedef word %'ModuleName'%.PixelCount; /*!< one byte is enough to hold a counter for all pixels */
#endif

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

#ifndef __BWUserType_%'ModuleName'_SensorValType
#define __BWUserType_%'ModuleName'_SensorValType
  typedef _RevCathodeSensorValType %'ModuleName'%.SensorValType; %>40/* The value type the sensor can return. */
#endif

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
typedef bool %'ModuleName'%.PixelColor;    /* one bit for a pixel */
typedef byte %'ModuleName'%.PixelDim; /* one byte is enough to describe an x/y position */

#define %'ModuleName'%.PIXEL_ON             %'ModuleName'%.COLOR_BLACK /* value of a pixel if it is 'on' */
#define %'ModuleName'%.PIXEL_OFF            %'ModuleName'%.COLOR_WHITE /* value of a pixel if it is 'off' */
#define %'ModuleName'%.COLOR_PIXEL_SET      %'ModuleName'%.PIXEL_OFF /* color for a pixel set */
#define %'ModuleName'%.COLOR_PIXEL_CLR      %'ModuleName'%.PIXEL_ON  /* color for a pixel cleared */
#define %'ModuleName'%.COLOR_BLACK          1
#define %'ModuleName'%.COLOR_WHITE          0
#define %'ModuleName'%.COLOR_RED            1
#define %'ModuleName'%.COLOR_BRIGHT_RED     1
#define %'ModuleName'%.COLOR_DARK_RED       1
#define %'ModuleName'%.COLOR_GREEN          1
#define %'ModuleName'%.COLOR_BRIGHT_GREEN   1
#define %'ModuleName'%.COLOR_DARK_GREEN     1
#define %'ModuleName'%.COLOR_BLUE           1
#define %'ModuleName'%.COLOR_BRIGHT_BLUE    1
#define %'ModuleName'%.COLOR_DARK_BLUE      1
#define %'ModuleName'%.COLOR_YELLOW         1
#define %'ModuleName'%.COLOR_BRIGHT_YELLOW  1
#define %'ModuleName'%.COLOR_ORANGE         1
#define %'ModuleName'%.COLOR_GREY           1
#define %'ModuleName'%.COLOR_BRIGHT_GREY    1

typedef struct { /* data structure to back up port status */
%:maxRow=%RowSymbolNumItems
%:maxRow-=1
%:maxCol=%ColumnSymbolNumItems
%:maxCol-=1
  %for i from [0..%maxRow]
  bool anode%i;  /* anode row %i status */
  %endfor
  %for i from [0..%maxCol]
  byte cathode%i; /* cathode column %i status */
  %endfor
} %'ModuleName'%.PortStatus;

%if %ColumnSymbolNumItems='1'
#define %'ModuleName'%.LIGHT_MASK  0xff /* we are able to see 8 bits */
%elif %ColumnSymbolNumItems='2'
#define %'ModuleName'%.LIGHT_MASK  0xffff /* we are able to see 16 bits */
%endif

#define %'ModuleName'%.HW_WIDTH         %'Width'u                %>40 /* Logical display width in pixels */
#define %'ModuleName'%.HW_HEIGHT        %'Height'u               %>40 /* Logical display height in pixels */
%if %Height <. %Width
#define %'ModuleName'%.HW_SHORTER_SIDE  %'Height'u               %>40/* size of shorter display side in pixels */
#define %'ModuleName'%.HW_LONGER_SIDE   %'Width'u                %>40/* size of longer display side in pixels */
%else
#define %'ModuleName'%.HW_SHORTER_SIDE  %'Width'u                %>40/* size of shorter display side in pixels */
#define %'ModuleName'%.HW_LONGER_SIDE   %'Height'u               %>40/* size of longer display side in pixels */
%endif

typedef enum {
  %'ModuleName'%.ORIENTATION_PORTRAIT    = 0,
  %'ModuleName'%.ORIENTATION_PORTRAIT180 = 1,
  %'ModuleName'%.ORIENTATION_LANDSCAPE   = 2,
  %'ModuleName'%.ORIENTATION_LANDSCAPE180= 3
} %'ModuleName'%.DisplayOrientation;

%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateFull
%ifdef UpdateFull
void %'ModuleName'%.%UpdateFull(void);
%include Common\LEDmatrixUpdateFull.Inc

%endif %- UpdateFull
%-BW_METHOD_END UpdateFull
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateRegion
%ifdef UpdateRegion
void %'ModuleName'%.%UpdateRegion(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h);
%define! Parx
%define! Pary
%define! Parw
%define! Parh
%include Common\LEDmatrixUpdateRegion.Inc

%endif %- UpdateRegion
%-BW_METHOD_END UpdateRegion
%-************************************************************************************************************
%-BW_METHOD_BEGIN StartSafeReverseBias
%ifdef StartSafeReverseBias
void %'ModuleName'%.%StartSafeReverseBias(void *portBackup);
%define! ParportBackup
%include Common\LEDmatrixStartSafeReverseBias.Inc

%endif %- StartSafeReverseBias
%-BW_METHOD_END StartSafeReverseBias
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCathodeVal
%ifdef GetCathodeVal
%'ModuleName'_SensorValType %'ModuleName'%.%GetCathodeVal(void);
%define! RetVal
%include Common\LEDmatrixGetCathodeVal.Inc

%endif %- GetCathodeVal
%-BW_METHOD_END GetCathodeVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN StopSafeReverseBias
%ifdef StopSafeReverseBias
void %'ModuleName'%.%StopSafeReverseBias(void *portBackup);
%define! ParportBackup
%include Common\LEDmatrixStopSafeReverseBias.Inc

%endif %- StopSafeReverseBias
%-BW_METHOD_END StopSafeReverseBias
%-************************************************************************************************************
%-BW_METHOD_BEGIN On
%ifdef On
void %'ModuleName'%.%On(void);
%include Common\LEDmatrixOn.Inc

%endif %- On
%-BW_METHOD_END On
%-************************************************************************************************************
%-BW_METHOD_BEGIN Off
%ifdef Off
void %'ModuleName'%.%Off(void);
%include Common\LEDmatrixOff.Inc

%endif %- Off
%-BW_METHOD_END Off
%-************************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
void %'ModuleName'%.%Enable(void);
%include Common\LEDmatrixEnable.Inc

%endif %- Enable
%-BW_METHOD_END Enable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Disable
%ifdef Disable
void %'ModuleName'%.%Disable(void);
%include Common\LEDmatrixDisable.Inc

%endif %- Disable
%-BW_METHOD_END Disable
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDisplayOrientation
%ifdef GetDisplayOrientation
%'ModuleName'_DisplayOrientation %'ModuleName'%.%GetDisplayOrientation(void);
%define! RetVal
%include Common\LEDmatrixGetDisplayOrientation.Inc

%endif %- GetDisplayOrientation
%-BW_METHOD_END GetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetWidth
%ifdef GetWidth
#define %'ModuleName'%.%GetWidth() \
  %'ModuleName'%.HW_WIDTH

%define! RetVal
%include Common\LEDmatrixGetWidth.Inc

%endif %- GetWidth
%-BW_METHOD_END GetWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetHeight
%ifdef GetHeight
#define %'ModuleName'%.%GetHeight() \
  %'ModuleName'%.HW_HEIGHT

%define! RetVal
%include Common\LEDmatrixGetHeight.Inc

%endif %- GetHeight
%-BW_METHOD_END GetHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDisplayOrientation
%ifdef SetDisplayOrientation
void %'ModuleName'%.%SetDisplayOrientation(%'ModuleName'_DisplayOrientation newOrientation);
%define! ParnewOrientation
%include Common\LEDmatrixSetDisplayOrientation.Inc

%endif %- SetDisplayOrientation
%-BW_METHOD_END SetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetShorterSide
%ifdef GetShorterSide
#define %'ModuleName'%.%GetShorterSide() \
%if %'Width' <. %'Height'
  %'ModuleName'%.HW_WIDTH
%else
  %'ModuleName'%.HW_HEIGHT
%endif
%define! RetVal
%include Common\LEDmatrixGetShorterSide.Inc

%endif %- GetShorterSide
%-BW_METHOD_END GetShorterSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLongerSide
%ifdef GetLongerSide
#define %'ModuleName'%.%GetLongerSide() \
%if %'Width' >. %'Height'
  %'ModuleName'%.HW_WIDTH
%else
  %'ModuleName'%.HW_HEIGHT
%endif
%define! RetVal
%include Common\LEDmatrixGetLongerSide.Inc

%endif %- GetLongerSide
%-BW_METHOD_END GetLongerSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLCD
%ifdef GetLCD
void %'ModuleName'%.%GetLCD(void);
%include Common\LEDmatrixGetLCD.Inc

%endif %- GetLCD
%-BW_METHOD_END GetLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN GiveLCD
%ifdef GiveLCD
void %'ModuleName'%.%GiveLCD(void);
%include Common\LEDmatrixGiveLCD.Inc

%endif %- GiveLCD
%-BW_METHOD_END GiveLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearBuffer
%ifdef ClearBuffer
void %'ModuleName'%.%ClearBuffer(byte color);
%define! Parcolor
%include Common\LEDmatrixClearBuffer.Inc

%endif %- ClearBuffer
%-BW_METHOD_END ClearBuffer
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\LEDmatrixSettings.Inc
%define! Abstract Common\LEDmatrixAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%-
byte %'ModuleName'%.DisplayBuf[%ColumnSymbolNumItems][%RowSymbolNumItems]; /* buffer for the display */
%if defined(Enable) | defined(Disable)
static bool %'ModuleName'%.DisplayEnabled = TRUE; /* if we allow refresh of the display */
%endif

%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateFull
%ifdef UpdateFull
%include Common\LEDmatrixUpdateFull.Inc
void %'ModuleName'%.%UpdateFull(void)
{
  static signed char rowNo = -1;

%if defined(Enable) | defined(Disable)
  if (!%'ModuleName'%.DisplayEnabled) {
    return;
  }
%endif
%:maxRow=%RowSymbolNumItems
%:maxRow-=1
  switch(rowNo) { /* switch off previous row */
  %for i from [0..%maxRow]
    case %i: %@Row%i@'ModuleName'%.Off(); break; /* Switch off Row %i */
  %endfor
    default: break;
  } /* switch */
  rowNo++;
  if (rowNo == %RowSymbolNumItems) { /* reached last row number: start over again */
    rowNo = 0;
  }
  switch(rowNo) { /* turn on row */
    %for i from [0..%maxRow]
    case %i:
      %for j from [0..%maxCol]
      %@Column%j@'ModuleName'%.Put(%'ModuleName'%.DisplayBuf[%j][%i]); /* write column %j data byte */
      %endfor
      %@Row%i@'ModuleName'%.On();  /* Enable Row %i: show data */
      break;
    %endfor
    default: break;
  } /* switch */
}

%endif %- UpdateFull
%-BW_METHOD_END UpdateFull
%-************************************************************************************************************
%-BW_METHOD_BEGIN UpdateRegion
%ifdef UpdateRegion
%define! Parx
%define! Pary
%define! Parw
%define! Parh
%include Common\LEDmatrixUpdateRegion.Inc
void %'ModuleName'%.%UpdateRegion(%'ModuleName'_PixelDim x, %'ModuleName'_PixelDim y, %'ModuleName'_PixelDim w, %'ModuleName'_PixelDim h)
{
  (void)x; (void)y; (void)w; (void)h;
  %'ModuleName'%.%UpdateFull();
}

%endif %- UpdateRegion
%-BW_METHOD_END UpdateRegion
%-************************************************************************************************************
%-BW_METHOD_BEGIN StartSafeReverseBias
%ifdef StartSafeReverseBias
%define! ParportBackup
%include Common\LEDmatrixStartSafeReverseBias.Inc
void %'ModuleName'%.%StartSafeReverseBias(void *portBackup)
{
  /* make backup of current port status */
%:maxRow=%RowSymbolNumItems
%:maxRow-=1
%:maxCol=%ColumnSymbolNumItems
%:maxCol-=1
  %for i from [0..%maxRow]
  ((%'ModuleName'%.PortStatus *)portBackup)->anode%i = (bool)%@Row%i@'ModuleName'%.Get();  /* anode row %i status */
  %endfor
  %for i from [0..%maxCol]
  ((%'ModuleName'%.PortStatus *)portBackup)->cathode%i = %@Column%i@'ModuleName'%.GetVal(); /* cathode column %i status */
  %endfor
  /* reverse bias */
  %for i from [0..%maxCol]
  %@Column%i@'ModuleName'%.SetVal();  /* cathode %i high */
  %endfor
  %for i from [0..%maxRow]
  %@Row%i@'ModuleName'%.ClrVal();  /* anode row %i low */
  %endfor
  /* start dis-charge phase */
  %for i from [0..%maxCol]
  %@Column%i@'ModuleName'%.SetInput(); /* set cathode as input and start discharging */
  %endfor
}

%endif %- StartSafeReverseBias
%-BW_METHOD_END StartSafeReverseBias
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetCathodeVal
%ifdef GetCathodeVal
%define! RetVal
%include Common\LEDmatrixGetCathodeVal.Inc
%'ModuleName'_SensorValType %'ModuleName'%.%GetCathodeVal(void)
{
  %'ModuleName'_SensorValType val = 0;

  %:maxCol=%ColumnSymbolNumItems
  %:maxCol-=1
  %for i from [0..%maxCol]
  val |= %@Column%i@'ModuleName'%.GetVal()<<(%i*8);  /* cathode row %i status */
  %endfor
%-
%- %if %ColumnSymbolNumItems='1'
%-   if (val != 0xff) { /* at least bit has seen the light */
%-     val = 0; /* make it let see all */
%-   }
%- %elif %ColumnSymbolNumItems='2'
%-   if (val != 0xffff) { /* at least bit has seen the light */
%-     val = 0; /* make it let see all */
%-   }
%- %endif
%-
  return val;
}

%endif %- GetCathodeVal
%-BW_METHOD_END GetCathodeVal
%-************************************************************************************************************
%-BW_METHOD_BEGIN StopSafeReverseBias
%ifdef StopSafeReverseBias
%define! ParportBackup
%include Common\LEDmatrixStopSafeReverseBias.Inc
void %'ModuleName'%.%StopSafeReverseBias(void *portBackup)
{
%:maxRow=%RowSymbolNumItems
%:maxRow-=1
%:maxCol=%ColumnSymbolNumItems
%:maxCol-=1
  /* revert back to previous state */
  %for i from [0..%maxCol]
  %@Column%i@'ModuleName'%.SetOutput();
  %endfor
  %for i from [0..%maxRow]
  %@Row%i@'ModuleName'%.Put(((%'ModuleName'%.PortStatus *)portBackup)->anode%i);  /* anode row %i status */
  %endfor
  %for i from [0..%maxCol]
  %@Column%i@'ModuleName'%.Put(((%'ModuleName'%.PortStatus *)portBackup)->cathode%i); /* cathode column %i status */
  %endfor
}

%endif %- StopSafeReverseBias
%-BW_METHOD_END StopSafeReverseBias
%-************************************************************************************************************
%-BW_METHOD_BEGIN On
%ifdef On
%include Common\LEDmatrixOn.Inc
void %'ModuleName'%.%On(void)
{
%:maxRow=%RowSymbolNumItems
%:maxRow-=1
%:maxCol=%ColumnSymbolNumItems
%:maxCol-=1
  /* revert back to previous state */
  %for i from [0..%maxRow]
  %@Row%i@'ModuleName'%.On();  /* anode row %i status */
  %endfor
  %for i from [0..%maxCol]
  %@Column%i@'ModuleName'%.PutVal(0x00); /* cathode column %i status */
  %endfor
}

%endif %- On
%-BW_METHOD_END On
%-************************************************************************************************************
%-BW_METHOD_BEGIN Off
%ifdef Off
%include Common\LEDmatrixOff.Inc
void %'ModuleName'%.%Off(void)
{
%:maxRow=%RowSymbolNumItems
%:maxRow-=1
%:maxCol=%ColumnSymbolNumItems
%:maxCol-=1
  %for i from [0..%maxRow]
  %@Row%i@'ModuleName'%.Off();  /* anode row %i low */
  %endfor
  %for i from [0..%maxCol]
  %@Column%i@'ModuleName'%.PutVal(0xff); /* cathode column %i high */
  %endfor
}

%endif %- Off
%-BW_METHOD_END Off
%-************************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
%include Common\LEDmatrixEnable.Inc
void %'ModuleName'%.%Enable(void)
{
  %'ModuleName'%.DisplayEnabled = TRUE;
}

%endif %- Enable
%-BW_METHOD_END Enable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Disable
%ifdef Disable
%include Common\LEDmatrixDisable.Inc
void %'ModuleName'%.%Disable(void)
{
  %'ModuleName'%.%Off(); /* make sure that display is really off. Means anodes are low and cathodes are high */
  %'ModuleName'%.DisplayEnabled = FALSE;
}

%endif %- Disable
%-BW_METHOD_END Disable
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetDisplayOrientation
%ifdef GetDisplayOrientation
%define! RetVal
%include Common\LEDmatrixGetDisplayOrientation.Inc
%'ModuleName'_DisplayOrientation %'ModuleName'%.%GetDisplayOrientation(void)
{
  return %'ModuleName'%.ORIENTATION_LANDSCAPE;                   %>40/* Landscape mode */
}

%endif %- GetDisplayOrientation
%-BW_METHOD_END GetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetWidth
%ifdef GetWidth
%define! RetVal
%include Common\LEDmatrixGetWidth.Inc
#if 0
%'ModuleName'_PixelDim %'ModuleName'%.%GetWidth(void)
{
  /* method is implemented as macro in %'ModuleName'.h */
}
#endif

%endif %- GetWidth
%-BW_METHOD_END GetWidth
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetHeight
%ifdef GetHeight
%define! RetVal
%include Common\LEDmatrixGetHeight.Inc
#if 0
%'ModuleName'_PixelDim %'ModuleName'%.%GetHeight(void)
{
  /* method is implemented as macro in %'ModuleName'.h */
}
#endif

%endif %- GetHeight
%-BW_METHOD_END GetHeight
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetDisplayOrientation
%ifdef SetDisplayOrientation
%define! ParnewOrientation
%include Common\LEDmatrixSetDisplayOrientation.Inc
void %'ModuleName'%.%SetDisplayOrientation(%'ModuleName'_DisplayOrientation newOrientation)
{
  (void)newOrientation; /* setting the display orientation is not implemented yet */
}

%endif %- SetDisplayOrientation
%-BW_METHOD_END SetDisplayOrientation
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetShorterSide
%ifdef GetShorterSide
%define! RetVal
%include Common\LEDmatrixGetShorterSide.Inc
#if 0
%'ModuleName'_PixelDim %'ModuleName'%.%GetShorterSide(void)
{
  /* method is implemented as macro in %'ModuleName'.h */
}
#endif

%endif %- GetShorterSide
%-BW_METHOD_END GetShorterSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLongerSide
%ifdef GetLongerSide
%define! RetVal
%include Common\LEDmatrixGetLongerSide.Inc
#if 0
%'ModuleName'_PixelDim %'ModuleName'%.%GetLongerSide(void)
{
  /* method is implemented as macro in %'ModuleName'.h */
}
#endif

%endif %- GetLongerSide
%-BW_METHOD_END GetLongerSide
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetLCD
%ifdef GetLCD
%include Common\LEDmatrixGetLCD.Inc
void %'ModuleName'%.%GetLCD(void)
{
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
}

%endif %- GetLCD
%-BW_METHOD_END GetLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN GiveLCD
%ifdef GiveLCD
%include Common\LEDmatrixGiveLCD.Inc
void %'ModuleName'%.%GiveLCD(void)
{
  /* If you see this comment in generated code, it means that method is not implemented yet ... */
}

%endif %- GiveLCD
%-BW_METHOD_END GiveLCD
%-************************************************************************************************************
%-BW_METHOD_BEGIN ClearBuffer
%ifdef ClearBuffer
%define! Parcolor
%include Common\LEDmatrixClearBuffer.Inc
void %'ModuleName'%.%ClearBuffer(byte color)
{
  (void)color;
}

%endif %- ClearBuffer
%-BW_METHOD_END ClearBuffer
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This bean is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
