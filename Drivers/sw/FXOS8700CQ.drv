%-Driver pre-generated by the Component Development Environment
%-      Copyright: 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Development Environment will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Erich Styger
%define DriverVersion 01.00
%define DriverDate    03/31/2013
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%define CDEversion Standard
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
  %-
%-
%INTERFACE
%define! Settings Common\FXOS8700CQSettings.Inc
%define! Abstract Common\FXOS8700CQAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
#ifdef __cplusplus
extern "C" {
#endif

#define %'ModuleName'%.PARSE_COMMAND_ENABLED  %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED  /* set to 1 if method ParseCommand() is present, 0 otherwise */

/* 3-axis accelerometer control register addresses */
#define %'ModuleName'_CTRL_REG_1 0x2A
/* 3-axis accelerometer control register bit masks */
#define %'ModuleName'_ACTIVE_BIT_MASK 0x01
#define %'ModuleName'_F_READ_BIT_MASK 0x02

#define %'ModuleName'_CTRL_REG_2 0x2B
#define %'ModuleName'_CTRL_REG_2_MASK_RST (1<<4) /* software reset */

/* External 3-axis accelerometer data register addresses */
#define %'ModuleName'_OUT_X_MSB 0x01
#define %'ModuleName'_OUT_X_LSB 0x02
#define %'ModuleName'_OUT_Y_MSB 0x03
#define %'ModuleName'_OUT_Y_LSB 0x04
#define %'ModuleName'_OUT_Z_MSB 0x05
#define %'ModuleName'_OUT_Z_LSB 0x06

#define %'ModuleName'_WHO_AM_I  0x0D    /* Who am I register, should return 0xC4 for preproduction devices and 0xC7 for production devices */
#define %'ModuleName'_WHO_AM_I_VAL 0xC7 /* production device value */

#define %'ModuleName'_XYZ_DATA_CFG 0x0E  /* XYZ Data Configuration Register */

/* magnetometer control register */
#define %'ModuleName'_M_CTRL_REG_1 0x5B
#define %'ModuleName'_M_CTRL_REG_2 0x5C
#define %'ModuleName'_M_CTRL_REG_3 0x5D

/* Magnetometer data register addresses */
#define %'ModuleName'_M_OUT_X_MSB 0x33
#define %'ModuleName'_M_OUT_X_LSB 0x34
#define %'ModuleName'_M_OUT_Y_MSB 0x35
#define %'ModuleName'_M_OUT_Y_LSB 0x36
#define %'ModuleName'_M_OUT_Z_MSB 0x37
#define %'ModuleName'_M_OUT_Z_LSB 0x38

/* die temperature (needs to add an offset as not factory trimmed) */
#define %'ModuleName'%.DIE_TEMP  0x51 /* die temperature register, signed 8bit in C */
#define %'ModuleName'_DIE_TEMP_OFFSET   %'ModuleName'%.CONFIG_TEMP_OFFSET /* offset to temperature reading as value on device is not calibrated */

#define %'ModuleName'_I2C_ADDR          %'ModuleName'%.CONFIG_I2C_DEVICE_ADDRESS /* I2C slave device address as set in the properties */


%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetRaw8XYZ
%ifdef GetRaw8XYZ
uint8_t %'ModuleName'%.%GetRaw8XYZ(uint8_t *xyz);
%define! Parxyz
%define!  RetVal
%include Common\FXOS8700CQGetRaw8XYZ.inc
%endif  %-GetRaw8XYZ
%-BW_METHOD_END GetRaw8XYZ

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
uint8_t %'ModuleName'%.%Deinit(void);
%define!  RetVal
%include Common\FXOS8700CQDeinit.inc
%endif  %-Deinit
%-BW_METHOD_END Deinit

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
uint8_t %'ModuleName'%.%Init(void);
%define!  RetVal
%include Common\FXOS8700CQInit.inc
%endif  %-Init
%-BW_METHOD_END Init

%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateX1g
%ifdef CalibrateX1g
void %'ModuleName'%.%CalibrateX1g(void);
%include Common\FXOS8700CQCalibrateX1g.Inc

%endif %- CalibrateX1g
%-BW_METHOD_END CalibrateX1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateY1g
%ifdef CalibrateY1g
void %'ModuleName'%.%CalibrateY1g(void);
%include Common\FXOS8700CQCalibrateY1g.Inc

%endif %- CalibrateY1g
%-BW_METHOD_END CalibrateY1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateZ1g
%ifdef CalibrateZ1g
void %'ModuleName'%.%CalibrateZ1g(void);
%include Common\FXOS8700CQCalibrateZ1g.Inc

%endif %- CalibrateZ1g
%-BW_METHOD_END CalibrateZ1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetXmg
%ifdef GetXmg
int16_t %'ModuleName'%.%GetXmg(void);
%define! RetVal
%include Common\FXOS8700CQGetXmg.Inc

%endif %- GetXmg
%-BW_METHOD_END GetXmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetYmg
%ifdef GetYmg
int16_t %'ModuleName'%.%GetYmg(void);
%define! RetVal
%include Common\FXOS8700CQGetYmg.Inc

%endif %- GetYmg
%-BW_METHOD_END GetYmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZmg
%ifdef GetZmg
int16_t %'ModuleName'%.%GetZmg(void);
%define! RetVal
%include Common\FXOS8700CQGetZmg.Inc

%endif %- GetZmg
%-BW_METHOD_END GetZmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawX
%ifdef MeasureGetRawX
uint16_t %'ModuleName'%.%MeasureGetRawX(void);
%define! RetVal
%include Common\FXOS8700CQMeasureGetRawX.Inc

%endif %- MeasureGetRawX
%-BW_METHOD_END MeasureGetRawX
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawY
%ifdef MeasureGetRawY
uint16_t %'ModuleName'%.%MeasureGetRawY(void);
%define! RetVal
%include Common\FXOS8700CQMeasureGetRawY.Inc

%endif %- MeasureGetRawY
%-BW_METHOD_END MeasureGetRawY
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawZ
%ifdef MeasureGetRawZ
uint16_t %'ModuleName'%.%MeasureGetRawZ(void);
%define! RetVal
%include Common\FXOS8700CQMeasureGetRawZ.Inc

%endif %- MeasureGetRawZ
%-BW_METHOD_END MeasureGetRawZ
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetXOffset
%ifdef GetXOffset
int16_t %'ModuleName'%.%GetXOffset(void);
%define! RetVal
%include Common\FXOS8700CQGetXOffset.Inc

%endif %- GetXOffset
%-BW_METHOD_END GetXOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetYOffset
%ifdef GetYOffset
int16_t %'ModuleName'%.%GetYOffset(void);
%define! RetVal
%include Common\FXOS8700CQGetYOffset.Inc

%endif %- GetYOffset
%-BW_METHOD_END GetYOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZOffset
%ifdef GetZOffset
int16_t %'ModuleName'%.%GetZOffset(void);
%define! RetVal
%include Common\FXOS8700CQGetZOffset.Inc

%endif %- GetZOffset
%-BW_METHOD_END GetZOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetX1gValue
%ifdef GetX1gValue
int16_t %'ModuleName'%.%GetX1gValue(void);
%define! RetVal
%include Common\FXOS8700CQGetX1gValue.Inc

%endif %- GetX1gValue
%-BW_METHOD_END GetX1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetY1gValue
%ifdef GetY1gValue
int16_t %'ModuleName'%.%GetY1gValue(void);
%define! RetVal
%include Common\FXOS8700CQGetY1gValue.Inc

%endif %- GetY1gValue
%-BW_METHOD_END GetY1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZ1gValue
%ifdef GetZ1gValue
int16_t %'ModuleName'%.%GetZ1gValue(void);
%define! RetVal
%include Common\FXOS8700CQGetZ1gValue.Inc

%endif %- GetZ1gValue
%-BW_METHOD_END GetZ1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetX
%ifdef GetX
int16_t %'ModuleName'%.%GetX(void);
%define! RetVal
%include Common\FXOS8700CQGetX.Inc

%endif %- GetX
%-BW_METHOD_END GetX
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetY
%ifdef GetY
int16_t %'ModuleName'%.%GetY(void);
%define! RetVal
%include Common\FXOS8700CQGetY.Inc

%endif %- GetY
%-BW_METHOD_END GetY
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZ
%ifdef GetZ
int16_t %'ModuleName'%.%GetZ(void);
%define! RetVal
%include Common\FXOS8700CQGetZ.Inc

%endif %- GetZ
%-BW_METHOD_END GetZ
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io);
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\FXOS8700CQParseCommand.Inc

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetFastMode
%ifdef SetFastMode
uint8_t %'ModuleName'%.%SetFastMode(bool on);
%define! Paron
%define! RetVal
%include Common\FXOS8700CQSetFastMode.Inc

%endif %- SetFastMode
%-BW_METHOD_END SetFastMode
%-************************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
uint8_t %'ModuleName'%.%Enable(void);
%define! RetVal
%include Common\FXOS8700CQEnable.Inc

%endif %- Enable
%-BW_METHOD_END Enable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Disable
%ifdef Disable
uint8_t %'ModuleName'%.%Disable(void);
%define! RetVal
%include Common\FXOS8700CQDisable.Inc

%endif %- Disable
%-BW_METHOD_END Disable
%-************************************************************************************************************
%-BW_METHOD_BEGIN isEnabled
%ifdef isEnabled
uint8_t %'ModuleName'%.%isEnabled(bool *isEnabled);
%define! ParisEnabled
%define! RetVal
%include Common\FXOS8700CQisEnabled.Inc

%endif %- isEnabled
%-BW_METHOD_END isEnabled
%-************************************************************************************************************
%-BW_METHOD_BEGIN WhoAmI
%ifdef WhoAmI
uint8_t %'ModuleName'%.%WhoAmI(uint8_t *value);
%define! Parvalue
%define! RetVal
%include Common\FXOS8700CQWhoAmI.Inc

%endif %- WhoAmI
%-BW_METHOD_END WhoAmI
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTemperature
%ifdef GetTemperature
uint8_t %'ModuleName'%.%GetTemperature(int8_t *temperature);
%define! Partemperature
%define! RetVal
%include Common\FXOS8700CQGetTemperature.Inc

%endif %- GetTemperature
%-BW_METHOD_END GetTemperature
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetMagX
%ifdef GetMagX
uint8_t %'ModuleName'%.%GetMagX(int16_t *value);
%define! Parvalue
%define! RetVal
%include Common\FXOS8700CQGetMagX.Inc

%endif %- GetMagX
%-BW_METHOD_END GetMagX
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetMagY
%ifdef GetMagY
uint8_t %'ModuleName'%.%GetMagY(int16_t *value);
%define! Parvalue
%define! RetVal
%include Common\FXOS8700CQGetMagY.Inc

%endif %- GetMagY
%-BW_METHOD_END GetMagY
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetMagZ
%ifdef GetMagZ
uint8_t %'ModuleName'%.%GetMagZ(int16_t *value);
%define! Parvalue
%define! RetVal
%include Common\FXOS8700CQGetMagZ.Inc

%endif %- GetMagZ
%-BW_METHOD_END GetMagZ
%-************************************************************************************************************
%-BW_METHOD_BEGIN MagneticSensorReset
%ifdef MagneticSensorReset
uint8_t %'ModuleName'%.%MagneticSensorReset(void);
%define! RetVal
%include Common\FXOS8700CQMagneticSensorReset.Inc

%endif %- MagneticSensorReset
%-BW_METHOD_END MagneticSensorReset
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadReg8
%ifdef ReadReg8
uint8_t %'ModuleName'%.%ReadReg8(uint8_t addr, uint8_t *val);
%define! Paraddr
%define! Parval
%define! RetVal
%include Common\FXOS8700CQReadReg8.Inc

%endif %- ReadReg8
%-BW_METHOD_END ReadReg8
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteReg8
%ifdef WriteReg8
uint8_t %'ModuleName'%.%WriteReg8(uint8_t addr, uint8_t val);
%define! Paraddr
%define! Parval
%define! RetVal
%include Common\FXOS8700CQWriteReg8.Inc

%endif %- WriteReg8
%-BW_METHOD_END WriteReg8
%-************************************************************************************************************
%-BW_METHOD_BEGIN SwReset
%ifdef SwReset
uint8_t %'ModuleName'%.%SwReset(void);
%define! RetVal
%include Common\FXOS8700CQSwReset.Inc

%endif %- SwReset
%-BW_METHOD_END SwReset
%-************************************************************************************************************
%-BW_METHOD_BEGIN MagEnable
%ifdef MagEnable
uint8_t %'ModuleName'%.%MagEnable(void);
%define! RetVal
%include Common\FXOS8700CQMagEnable.Inc

%endif %- MagEnable
%-BW_METHOD_END MagEnable
%-************************************************************************************************************
%-BW_METHOD_BEGIN MagDisable
%ifdef MagDisable
uint8_t %'ModuleName'%.%MagDisable(void);
%define! RetVal
%include Common\FXOS8700CQMagDisable.Inc

%endif %- MagDisable
%-BW_METHOD_END MagDisable
%-BW_DEFINITION_END
/* END %ModuleName. */

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_METHOD_BEGIN OnError
%ifdef OnError
%INTERFACE OnError
void %OnError(void);
%include Common\FXOS8700CQOnError.Inc

%endif %- OnError
%-BW_METHOD_END OnError
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\FXOS8700CQSettings.Inc
%define! Abstract Common\FXOS8700CQAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
%if (CPUfamily = "Kinetis")
#define %'ModuleName'_CPU_IS_LITTLE_ENDIAN 1 /* Cpu is little endian */
%else
#define %'ModuleName'_CPU_IS_LITTLE_ENDIAN 0 /* Cpu is big endian */
%endif

%if defined(CalibrateX1g) | defined(CalibrateY1g) | defined(CalibrateZ1g)
typedef struct {
  int16_t NxOff; /* offset for X axis */
  int16_t NyOff; /* offset for Y axis */
  int16_t NzOff; /* offset for Z axis */
} tAccelCal;

/* default calibration values from component properties */
static const tAccelCal InitialCalibration = { /* Initial default calibration values */
  %xCalibrationOffset, /* X offset */
  %yCalibrationOffset, /* Y offset */
  %zCalibrationOffset, /* Z offset */
};
static tAccelCal sCalValues; /* calibration values in RAM */

#define CalNxOff   sCalValues.NxOff
#define CalNyOff   sCalValues.NyOff
#define CalNzOff   sCalValues.NzOff
%elif %UseConstantOffsets='yes'
/* constant offsets specified in properties */
#define CalNxOff %xCalibrationOffset
#define CalNyOff %yCalibrationOffset
#define CalNzOff %zCalibrationOffset
%elif %UseConstantOffsets='no'
/* no constant offsets specified in properties */
#define CalNxOff 0
#define CalNyOff 0
#define CalNzOff 0
%endif %- CalibrateY1g

%if defined(Shell)
static uint8_t PrintStatus(const %@Shell@'ModuleName'%.StdIOType *io) {
  unsigned char buf[42];
  int8_t temperature;
  uint16_t val;
  uint8_t val8;
  bool isEnabled;
  int16_t val16s;

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"%'ModuleName'", (unsigned char*)"FXOS8700 sensor status\r\n", io->stdOut);

  %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"0x");
  %@Utility@'ModuleName'%.strcatNum8Hex(buf, sizeof(buf), (uint8_t)%'ModuleName'_I2C_ADDR);
  %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)"\r\n");
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  I2C addr", buf, io->stdOut);

  if (%'ModuleName'%.isEnabled(&isEnabled)!=ERR_OK) {
    %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"FAIL!\r\n");
  } else {
    if (isEnabled) {
      %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"yes\r\n");
    } else {
      %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"no\r\n");
    }
  }
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  enabled", buf, io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  raw", (unsigned char*)"0x", io->stdOut);
  val = %'ModuleName'%.MeasureGetRawX();
  buf[0] = '\0';
  %@Utility@'ModuleName'%.strcatNum16Hex(buf, sizeof(buf), (uint16_t)val);
  %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" (", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s((int16_t)val, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"), 0x", io->stdOut);

  val = %'ModuleName'%.MeasureGetRawY();
  buf[0] = '\0';
  %@Utility@'ModuleName'%.strcatNum16Hex(buf, sizeof(buf), (uint16_t)val);
  %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" (", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s((int16_t)val, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"), 0x", io->stdOut);

  val = %'ModuleName'%.MeasureGetRawZ();
  buf[0] = '\0';
  %@Utility@'ModuleName'%.strcatNum16Hex(buf, sizeof(buf), (uint16_t)val);
  %@Shell@'ModuleName'%.SendStr(buf, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" (", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s((int16_t)val, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)")\r\n", io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  calibOffset", (unsigned char*)"", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetXOffset(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetYOffset(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetZOffset(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  calib 1g", (unsigned char*)"", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetX1gValue(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetY1gValue(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetZ1gValue(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  GetX,Y,Z", (unsigned char*)"", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetX(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetY(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetZ(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" (raw+offset)\r\n", io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  mg X,Y,Z", (unsigned char*)"", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetXmg(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetYmg(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  %@Shell@'ModuleName'%.SendNum16s(%'ModuleName'%.GetZmg(), io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" (milli-g)\r\n", io->stdOut);

  if (%'ModuleName'%.%GetTemperature(&temperature)==ERR_OK) {
    %@Utility@'ModuleName'%.Num8sToStr(buf, sizeof(buf), temperature);
    %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)" degree C (offset ");
    %@Utility@'ModuleName'%.strcatNum8s(buf, sizeof(buf), %'ModuleName'_DIE_TEMP_OFFSET);
    %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)" degree C)\r\n");
  } else {
    %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"FAILED\r\n");
  }
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  Temperature", buf, io->stdOut);

  if (%'ModuleName'%.%WhoAmI(&val8)==ERR_OK) {
    %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"0x");
    %@Utility@'ModuleName'%.strcatNum8Hex(buf, sizeof(buf), val8);
    %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)"\r\n");
  } else {
    %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"FAILED\r\n");
  }
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  Who am I", buf, io->stdOut);

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  GetMagX,Y,Z", (unsigned char*)"", io->stdOut);
  val16s = 0;
  (void)%'ModuleName'%.GetMagX(&val16s);
  %@Shell@'ModuleName'%.SendNum16s(val16s, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  (void)%'ModuleName'%.GetMagY(&val16s);
  %@Shell@'ModuleName'%.SendNum16s(val16s, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)" ", io->stdOut);
  (void)%'ModuleName'%.GetMagZ(&val16s);
  %@Shell@'ModuleName'%.SendNum16s(val16s, io->stdOut);
  %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);

  return ERR_OK;
}

static uint8_t PrintHelp(const %@Shell@'ModuleName'%.StdIOType *io) {
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"%'ModuleName'", (unsigned char*)"Group of %'ModuleName' commands\r\n", io->stdOut);
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  help|status", (unsigned char*)"Print help or status information\r\n", io->stdOut);
%if defined(CalibrateX1g) | defined(CalibrateY1g) | defined(CalibrateZ1g)
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  calibrate x|y|z", (unsigned char*)"Performs accelerometer calibration\r\n", io->stdOut);
%endif
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  swreset", (unsigned char*)"Performs a device software reset\r\n", io->stdOut);
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  magreset", (unsigned char*)"Performs a magenetometer sensor reset\r\n", io->stdOut);
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  enable|disable", (unsigned char*)"Enables or disables the accelerometer sensor\r\n", io->stdOut);
  %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  mag enable|disable", (unsigned char*)"Enables or disables the magnet sensor\r\n", io->stdOut);
  return ERR_OK;
}

%endif
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetRaw8XYZ
%ifdef GetRaw8XYZ
%define! Parxyz
%define! RetVal
%include Common\FXOS8700CQGetRaw8XYZ.inc
uint8_t %'ModuleName'%.%GetRaw8XYZ(uint8_t *xyz)
{
%CODE_BEGIN
  static const uint8_t addr = %'ModuleName'_OUT_X_MSB;

  return %@I2C@'ModuleName'%.ReadAddress(%'ModuleName'_I2C_ADDR, (uint8_t*)&addr, sizeof(addr), &xyz[0], 3);
%CODE_END
}
%endif %-GetRaw8XYZ
%-BW_METHOD_END GetRaw8XYZ

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%define! RetVal
%include Common\FXOS8700CQDeinit.inc
uint8_t %'ModuleName'%.%Deinit(void)
{
%CODE_BEGIN
  return ERR_OK; /* nothing to do */
%CODE_END
}
%endif %-Deinit
%-BW_METHOD_END Deinit

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%define! RetVal
%include Common\FXOS8700CQInit.inc
uint8_t %'ModuleName'%.%Init(void)
{
%CODE_BEGIN
%if defined(CalibrateX1g) | defined(CalibrateY1g) | defined(CalibrateZ1g)
  sCalValues.NxOff = InitialCalibration.NxOff;
  sCalValues.NyOff = InitialCalibration.NyOff;
  sCalValues.NzOff = InitialCalibration.NzOff;
%endif %- CalibrateY1g
  return %@I2C@'ModuleName'%.WriteByteAddress8(%'ModuleName'_I2C_ADDR, %'ModuleName'_CTRL_REG_1, %'ModuleName'_ACTIVE_BIT_MASK); /* enable device */
%CODE_END
}
%endif %-Init
%-BW_METHOD_END Init

%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateX1g
%ifdef CalibrateX1g
%include Common\FXOS8700CQCalibrateX1g.Inc
void %'ModuleName'%.%CalibrateX1g(void)
{
  /* assumption is that accelerometer is placed with 1g for X and 0g for Y and Z */
  int32_t X=0, Y=0, Z=0;
  uint8_t i;

  /* Get the raw data and remove 2 bits (16bit to 14bit) */
  for (i=0; i<8; i++) {
   X += ((int16_t)%'ModuleName'%.%MeasureGetRawX() >> 2);
   Y += ((int16_t)%'ModuleName'%.%MeasureGetRawY() >> 2);
   Z += ((int16_t)%'ModuleName'%.%MeasureGetRawZ() >> 2);
  }
  /* build average of 8 measured values */
  X >>= 3;
  Y >>= 3;
  Z >>= 3;
  /* store the calibration values */
  /* offset: both Y and Z shall have zero g */
  sCalValues.NzOff = (X - (1000 << 2));
  sCalValues.NyOff = (int16_t)Y;
  sCalValues.NzOff = (int16_t)Z;
}

%endif %- CalibrateX1g
%-BW_METHOD_END CalibrateX1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateY1g
%ifdef CalibrateY1g
%include Common\FXOS8700CQCalibrateY1g.Inc
void %'ModuleName'%.%CalibrateY1g(void)
{
  /* assumption is that accelerometer is placed with 1g for Y and 0g for X and Z */
  int32_t X=0, Y=0, Z=0;
  uint8_t i;

  /* Get the raw data and remove 2 bits (16bit to 14bit) */
  for (i=0; i<8; i++) {
   X += ((int16_t)%'ModuleName'%.%MeasureGetRawX() >> 2);
   Y += ((int16_t)%'ModuleName'%.%MeasureGetRawY() >> 2);
   Z += ((int16_t)%'ModuleName'%.%MeasureGetRawZ() >> 2);
  }
  /* build average of 8 measured values */
  X >>= 3;
  Y >>= 3;
  Z >>= 3;
  /* store the calibration values */
  /* offset: both X and Z shall have zero g */
  sCalValues.NxOff = X;
  sCalValues.NzOff = (Y - (1000 << 2));
  sCalValues.NzOff = Z;
}

%endif %- CalibrateY1g
%-BW_METHOD_END CalibrateY1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN CalibrateZ1g
%ifdef CalibrateZ1g
%include Common\FXOS8700CQCalibrateZ1g.Inc
void %'ModuleName'%.%CalibrateZ1g(void)
{
  /* assumption is that accelerometer is placed with 1g for Z and 0g for X and Y */
  int32_t X=0, Y=0, Z=0;
  uint8_t i;

  /* Get the raw data and remove 2 bits (16bit to 14bit) */
  for (i=0; i<8; i++) {
   X += ((int16_t)%'ModuleName'%.%MeasureGetRawX() >> 2);
   Y += ((int16_t)%'ModuleName'%.%MeasureGetRawY() >> 2);
   Z += ((int16_t)%'ModuleName'%.%MeasureGetRawZ() >> 2);
  }
  /* build average of 8 measured values */
  X >>= 3;
  Y >>= 3;
  Z >>= 3;
  /* store the calibration values */
  /* offset: both X and Y shall have zero g (midpoint) */
  sCalValues.NxOff = X;
  sCalValues.NyOff = Y;
  sCalValues.NzOff = (Z - (1000 << 2));
}

%endif %- CalibrateZ1g
%-BW_METHOD_END CalibrateZ1g
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetXmg
%ifdef GetXmg
%define! RetVal
%include Common\FXOS8700CQGetXmg.Inc
int16_t %'ModuleName'%.%GetXmg(void)
{
  return %'ModuleName'%.%GetX() / 4;
}

%endif %- GetXmg
%-BW_METHOD_END GetXmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetYmg
%ifdef GetYmg
%define! RetVal
%include Common\FXOS8700CQGetYmg.Inc
int16_t %'ModuleName'%.%GetYmg(void)
{
  return %'ModuleName'%.%GetY() / 4;
}

%endif %- GetYmg
%-BW_METHOD_END GetYmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZmg
%ifdef GetZmg
%define! RetVal
%include Common\FXOS8700CQGetZmg.Inc
int16_t %'ModuleName'%.%GetZmg(void)
{
  return %'ModuleName'%.%GetZ() / 4;
}

%endif %- GetZmg
%-BW_METHOD_END GetZmg
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawX
%ifdef MeasureGetRawX
%define! RetVal
%include Common\FXOS8700CQMeasureGetRawX.Inc
uint16_t %'ModuleName'%.%MeasureGetRawX(void)
{
  union {
    uint8_t buf[2]; /* value from device is in big endian */
    uint16_t be;
  } val;
  static const uint8_t addr = %'ModuleName'_OUT_X_MSB;

  val.be = 0; /* init */
  if(%@I2C@'ModuleName'%.ReadAddress(%'ModuleName'_I2C_ADDR, (uint8_t*)&addr, sizeof(addr), &val.buf[0], sizeof(val.buf))!=ERR_OK) {
  %if defined(OnError)
    %OnError();
  %endif
    return 0; /* failure */
  }
#if %'ModuleName'_CPU_IS_LITTLE_ENDIAN
  return (uint16_t)((val.buf[0]<<8)|val.buf[1]); /* transform into LE value */
#else
  return val.be; /* already in BE */
#endif
}

%endif %- MeasureGetRawX
%-BW_METHOD_END MeasureGetRawX
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawY
%ifdef MeasureGetRawY
%define! RetVal
%include Common\FXOS8700CQMeasureGetRawY.Inc
uint16_t %'ModuleName'%.%MeasureGetRawY(void)
{
  union {
    uint8_t buf[2]; /* value from device is in big endian */
    uint16_t be;
  } val;
  static const uint8_t addr = %'ModuleName'_OUT_Y_MSB;

  val.be = 0; /* init */
  if(%@I2C@'ModuleName'%.ReadAddress(%'ModuleName'_I2C_ADDR, (uint8_t*)&addr, sizeof(addr), &val.buf[0], sizeof(val.buf))!=ERR_OK) {
  %if defined(OnError)
    %OnError();
  %endif
    return 0; /* failure */
  }
#if %'ModuleName'_CPU_IS_LITTLE_ENDIAN
  return (uint16_t)((val.buf[0]<<8)|val.buf[1]); /* transform into LE value */
#else
  return val.be; /* already in BE */
#endif
}

%endif %- MeasureGetRawY
%-BW_METHOD_END MeasureGetRawY
%-************************************************************************************************************
%-BW_METHOD_BEGIN MeasureGetRawZ
%ifdef MeasureGetRawZ
%define! RetVal
%include Common\FXOS8700CQMeasureGetRawZ.Inc
uint16_t %'ModuleName'%.%MeasureGetRawZ(void)
{
  union {
    uint8_t buf[2]; /* value from device is in big endian */
    uint16_t be;
  } val;
  static const uint8_t addr = %'ModuleName'_OUT_Z_MSB;

  val.be = 0; /* init */
  if(%@I2C@'ModuleName'%.ReadAddress(%'ModuleName'_I2C_ADDR, (uint8_t*)&addr, sizeof(addr), &val.buf[0], sizeof(val.buf))!=ERR_OK) {
  %if defined(OnError)
    %OnError();
  %endif
    return 0; /* failure */
  }
#if %'ModuleName'_CPU_IS_LITTLE_ENDIAN
  return (uint16_t)((val.buf[0]<<8)|val.buf[1]); /* transform into LE value */
#else
  return val.be; /* already in BE */
#endif
}

%endif %- MeasureGetRawZ
%-BW_METHOD_END MeasureGetRawZ
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetXOffset
%ifdef GetXOffset
%define! RetVal
%include Common\FXOS8700CQGetXOffset.Inc
int16_t %'ModuleName'%.%GetXOffset(void)
{
  return CalNxOff;
}

%endif %- GetXOffset
%-BW_METHOD_END GetXOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetYOffset
%ifdef GetYOffset
%define! RetVal
%include Common\FXOS8700CQGetYOffset.Inc
int16_t %'ModuleName'%.%GetYOffset(void)
{
  return CalNyOff;
}

%endif %- GetYOffset
%-BW_METHOD_END GetYOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZOffset
%ifdef GetZOffset
%define! RetVal
%include Common\FXOS8700CQGetZOffset.Inc
int16_t %'ModuleName'%.%GetZOffset(void)
{
  return CalNzOff;
}

%endif %- GetZOffset
%-BW_METHOD_END GetZOffset
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetX1gValue
%ifdef GetX1gValue
%define! RetVal
%include Common\FXOS8700CQGetX1gValue.Inc
int16_t %'ModuleName'%.%GetX1gValue(void)
{
  return 4096;
}

%endif %- GetX1gValue
%-BW_METHOD_END GetX1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetY1gValue
%ifdef GetY1gValue
%define! RetVal
%include Common\FXOS8700CQGetY1gValue.Inc
int16_t %'ModuleName'%.%GetY1gValue(void)
{
  return 4096;
}

%endif %- GetY1gValue
%-BW_METHOD_END GetY1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZ1gValue
%ifdef GetZ1gValue
%define! RetVal
%include Common\FXOS8700CQGetZ1gValue.Inc
int16_t %'ModuleName'%.%GetZ1gValue(void)
{
  return 4096;
}

%endif %- GetZ1gValue
%-BW_METHOD_END GetZ1gValue
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetX
%ifdef GetX
%define! RetVal
%include Common\FXOS8700CQGetX.Inc
int16_t %'ModuleName'%.%GetX(void)
{
  int16_t value;

  value = (int16_t)%'ModuleName'%.%MeasureGetRawX() >> 2; /* remove 2 bits (16bit to 14bit) */
  value -= CalNxOff; /* adjust with calibration offset */
  return value;
}

%endif %- GetX
%-BW_METHOD_END GetX
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetY
%ifdef GetY
%define! RetVal
%include Common\FXOS8700CQGetY.Inc
int16_t %'ModuleName'%.%GetY(void)
{
  int16_t value;

  value = (int16_t)%'ModuleName'%.%MeasureGetRawY() >> 2; /* remove 2 bits (16bit to 14bit) */
  value -= CalNyOff; /* adjust with calibration offset */
  return value;
}

%endif %- GetY
%-BW_METHOD_END GetY
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetZ
%ifdef GetZ
%define! RetVal
%include Common\FXOS8700CQGetZ.Inc
int16_t %'ModuleName'%.%GetZ(void)
{
  int16_t value;

  value = (int16_t)%'ModuleName'%.%MeasureGetRawZ() >> 2; /* remove 2 bits (16bit to 14bit) */
  value -= CalNzOff; /* adjust with calibration offset */
  return value;
}

%endif %- GetZ
%-BW_METHOD_END GetZ
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\FXOS8700CQParseCommand.Inc
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io)
{
  if (%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_HELP)==0 || %@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' help")==0) {
    *handled = TRUE;
    return PrintHelp(io);
  } else if ((%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_STATUS)==0) || (%@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' status")==0)) {
    *handled = TRUE;
    return PrintStatus(io);
%if defined(CalibrateX1g)
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, (char*)"%'ModuleName' calibrate x")==0) {
    %'ModuleName'%.CalibrateX1g();
    *handled = TRUE;
%endif
%if defined(CalibrateY1g)
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, (char*)"%'ModuleName' calibrate y")==0) {
    %'ModuleName'%.CalibrateY1g();
    *handled = TRUE;
%endif
%if defined(CalibrateZ1g)
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, (char*)"%'ModuleName' calibrate z")==0) {
    %'ModuleName'%.CalibrateZ1g();
    *handled = TRUE;
%endif
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, (char*)"%'ModuleName' enable")==0) {
    %'ModuleName'%.Enable();
    *handled = TRUE;
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, (char*)"%'ModuleName' disable")==0) {
    %'ModuleName'%.Disable();
    *handled = TRUE;
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, (char*)"%'ModuleName' mag enable")==0) {
    %'ModuleName'%.MagEnable();
    *handled = TRUE;
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, (char*)"%'ModuleName' mag disable")==0) {
    %'ModuleName'%.MagDisable();
    *handled = TRUE;
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, (char*)"%'ModuleName' swreset")==0) {
    *handled = TRUE;
    if (%'ModuleName'%.SwReset()!=ERR_OK) {
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"SW reset failed!\r\n", io->stdErr);
      return ERR_FAILED;
    }
  } else if (%@Utility@'ModuleName'%.strcmp((char*)cmd, (char*)"%'ModuleName' magreset")==0) {
    *handled = TRUE;
    if (%'ModuleName'%.MagneticSensorReset()!=ERR_OK) {
      %@Shell@'ModuleName'%.SendStr((unsigned char*)"Magnetometer sensor reset failed!\r\n", io->stdErr);
      return ERR_FAILED;
    }
  }
  return ERR_OK;
}

%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN SetFastMode
%ifdef SetFastMode
%define! Paron
%define! RetVal
%include Common\FXOS8700CQSetFastMode.Inc
uint8_t %'ModuleName'%.%SetFastMode(bool on)
{
  uint8_t val, res;

  res = %@I2C@'ModuleName'%.ReadByteAddress8(%'ModuleName'_I2C_ADDR, %'ModuleName'_CTRL_REG_1, &val);
  if (res!=ERR_OK) {
  %if defined(OnError)
    %OnError();
  %endif
    return res;
  }
  if (on) {
    val |= %'ModuleName'_F_READ_BIT_MASK; /* enable F_READ: Fast read mode, data format limited to single byte (auto increment counter will skip LSB) */
  } else {
    val &= ~%'ModuleName'_F_READ_BIT_MASK; /* disable F_READ: Fast read mode, data format limited to single byte (auto increment counter will skip LSB) */
  }
  return %@I2C@'ModuleName'%.WriteByteAddress8(%'ModuleName'_I2C_ADDR, %'ModuleName'_CTRL_REG_1, val);
}

%endif %- SetFastMode
%-BW_METHOD_END SetFastMode
%-************************************************************************************************************
%-BW_METHOD_BEGIN MagEnable
%ifdef MagEnable
%define! RetVal
%include Common\FXOS8700CQMagEnable.Inc
uint8_t %'ModuleName'%.%MagEnable(void)
{
  uint8_t val, res;

  // write 0001 1111 = 0x1F to magnetometer control register 1
  // [7]: m_acal=0: auto calibration disabled
  // [6]: m_rst=0: no one-shot magnetic reset
  // [5]: m_ost=0: no one-shot magnetic measurement
  // [4-2]: m_os=111=7: 8x oversampling (for 200Hz) to reduce magnetometer noise
  // [1-0]: m_hms=11=3: select hybrid mode with accel and magnetometer active
  val = 0x1F;
  res = %@I2C@'ModuleName'%.WriteByteAddress8(%'ModuleName'_I2C_ADDR, %'ModuleName'_M_CTRL_REG_1, val);
  if (res!=ERR_OK) {
    return res;
  }

  // write 0010 0000 = 0x20 to magnetometer control register 2
  // [7]: reserved
  // [6]: reserved
  // [5]: hyb_autoinc_mode=1 to map the magnetometer registers to follow the
  // accelerometer registers
  // [4]: m_maxmin_dis=0 to retain default min/max latching even though not used
  // [3]: m_maxmin_dis_ths=0
  // [2]: m_maxmin_rst=0
  // [1-0]: m_rst_cnt=00 to enable magnetic reset each cycle
  val = 0x20;
  res = %@I2C@'ModuleName'%.WriteByteAddress8(%'ModuleName'_I2C_ADDR, %'ModuleName'_M_CTRL_REG_2, val);
  if (res!=ERR_OK) {
    return res;
  }
  return ERR_OK;
}

%endif %- MagEnable
%-BW_METHOD_END MagEnable
%-************************************************************************************************************
%-BW_METHOD_BEGIN MagDisable
%ifdef MagDisable
%define! RetVal
%include Common\FXOS8700CQMagDisable.Inc
uint8_t %'ModuleName'%.%MagDisable(void)
{
  return ERR_OK; /* not doing anything */
}

%endif %- MagDisable
%-BW_METHOD_END MagDisable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
%define! RetVal
%include Common\FXOS8700CQEnable.Inc
uint8_t %'ModuleName'%.%Enable(void)
{
  uint8_t val, res;

  res = %@I2C@'ModuleName'%.ReadByteAddress8(%'ModuleName'_I2C_ADDR, %'ModuleName'_CTRL_REG_1, &val);
  if (res!=ERR_OK) {
  %if defined(OnError)
    %OnError();
  %endif
    return res;
  }
  if (val&%'ModuleName'_ACTIVE_BIT_MASK) {
    return ERR_OK; /* already enabled */
  }
  %@Wait@'ModuleName'%.Waitms(1); /* for unknown reasons, need to wait for 1 ms after reading the register */
  val |= %'ModuleName'_ACTIVE_BIT_MASK; /* enable device */
  return %@I2C@'ModuleName'%.WriteByteAddress8(%'ModuleName'_I2C_ADDR, %'ModuleName'_CTRL_REG_1, val);
}

%endif %- Enable
%-BW_METHOD_END Enable
%-************************************************************************************************************
%-BW_METHOD_BEGIN Disable
%ifdef Disable
%define! RetVal
%include Common\FXOS8700CQDisable.Inc
uint8_t %'ModuleName'%.%Disable(void)
{
  uint8_t val, res;

  res = %@I2C@'ModuleName'%.ReadByteAddress8(%'ModuleName'_I2C_ADDR, %'ModuleName'_CTRL_REG_1, &val);
  if (res!=ERR_OK) {
  %if defined(OnError)
    %OnError();
  %endif
    return res;
  }
  if ((val&%'ModuleName'_ACTIVE_BIT_MASK)==0) {
    return ERR_OK; /* already disabled */
  }
  %@Wait@'ModuleName'%.Waitms(1); /* for unknown reasons, need to wait for 1 ms after reading the register */
  val &= ~%'ModuleName'_ACTIVE_BIT_MASK; /* disable device */
  return %@I2C@'ModuleName'%.WriteByteAddress8(%'ModuleName'_I2C_ADDR, %'ModuleName'_CTRL_REG_1, val);
}

%endif %- Disable
%-BW_METHOD_END Disable
%-************************************************************************************************************
%-BW_METHOD_BEGIN isEnabled
%ifdef isEnabled
%define! ParisEnabled
%define! RetVal
%include Common\FXOS8700CQisEnabled.Inc
uint8_t %'ModuleName'%.%isEnabled(bool *isEnabled)
{
  uint8_t val, res;

  res = %@I2C@'ModuleName'%.ReadByteAddress8(%'ModuleName'_I2C_ADDR, %'ModuleName'_CTRL_REG_1, &val);
  if (res!=ERR_OK) {
  %if defined(OnError)
    %OnError();
  %endif
    return ERR_FAILED;
  }
  *isEnabled = (val&%'ModuleName'_ACTIVE_BIT_MASK)!=0; /* TRUE if bit is set, FALSE otherwise */
  return ERR_OK;
}

%endif %- isEnabled
%-BW_METHOD_END isEnabled
%-************************************************************************************************************
%-BW_METHOD_BEGIN WhoAmI
%ifdef WhoAmI
%define! Parvalue
%define! RetVal
%include Common\FXOS8700CQWhoAmI.Inc
uint8_t %'ModuleName'%.%WhoAmI(uint8_t *value)
{
  return %@I2C@'ModuleName'%.ReadByteAddress8(%'ModuleName'%.I2C_ADDR, %'ModuleName'%.WHO_AM_I, value);
}

%endif %- WhoAmI
%-BW_METHOD_END WhoAmI
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetTemperature
%ifdef GetTemperature
%define! Partemperature
%define! RetVal
%include Common\FXOS8700CQGetTemperature.Inc
uint8_t %'ModuleName'%.%GetTemperature(int8_t *temperature)
{
  int8_t temp;

  if (%@I2C@'ModuleName'%.ReadByteAddress8(%'ModuleName'%.I2C_ADDR, %'ModuleName'%.DIE_TEMP, (uint8_t*)&temp) != ERR_OK) {
  %if defined(OnError)
    %OnError();
  %endif
    return ERR_FAILED;
  }
  *temperature = (int8_t)(temp+%'ModuleName'_DIE_TEMP_OFFSET);
  return ERR_OK;
}

%endif %- GetTemperature
%-BW_METHOD_END GetTemperature
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetMagX
%ifdef GetMagX
%define! Parvalue
%define! RetVal
%include Common\FXOS8700CQGetMagX.Inc
uint8_t %'ModuleName'%.%GetMagX(int16_t *value)
{
  union {
    uint8_t buf[2]; /* value from device is in big endian */
    int16_t be;
  } val;
  static const uint8_t addr = %'ModuleName'%.M_OUT_X_MSB;

  if(%@I2C@'ModuleName'%.ReadAddress(%'ModuleName'%.I2C_ADDR, (uint8_t*)&addr, sizeof(addr), &val.buf[0], sizeof(val.buf))!=ERR_OK) {
    return ERR_FAILED; /* failure */
  }
#if %'ModuleName'_CPU_IS_LITTLE_ENDIAN
  *value = (int16_t)((val.buf[0]<<8)|val.buf[1]); /* transform into LE value */
#else
  *value = val.be; /* already in BE */
#endif
  return ERR_OK;
}

%endif %- GetMagX
%-BW_METHOD_END GetMagX
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetMagY
%ifdef GetMagY
%define! Parvalue
%define! RetVal
%include Common\FXOS8700CQGetMagY.Inc
uint8_t %'ModuleName'%.%GetMagY(int16_t *value)
{
  union {
    uint8_t buf[2]; /* value from device is in big endian */
    int16_t be;
  } val;
  static const uint8_t addr = %'ModuleName'%.M_OUT_Y_MSB;

  if(%@I2C@'ModuleName'%.ReadAddress(%'ModuleName'%.I2C_ADDR, (uint8_t*)&addr, sizeof(addr), &val.buf[0], sizeof(val.buf))!=ERR_OK) {
  %if defined(OnError)
    %OnError();
  %endif
    return ERR_FAILED; /* failure */
  }
#if %'ModuleName'_CPU_IS_LITTLE_ENDIAN
  *value = (int16_t)((val.buf[0]<<8)|val.buf[1]); /* transform into LE value */
#else
  *value = val.be; /* already in BE */
#endif
  return ERR_OK;
}

%endif %- GetMagY
%-BW_METHOD_END GetMagY
%-************************************************************************************************************
%-BW_METHOD_BEGIN GetMagZ
%ifdef GetMagZ
%define! Parvalue
%define! RetVal
%include Common\FXOS8700CQGetMagZ.Inc
uint8_t %'ModuleName'%.%GetMagZ(int16_t *value)
{
  union {
    uint8_t buf[2]; /* value from device is in big endian */
    int16_t be;
  } val;
  static const uint8_t addr = %'ModuleName'%.M_OUT_Z_MSB;

  if(%@I2C@'ModuleName'%.ReadAddress(%'ModuleName'%.I2C_ADDR, (uint8_t*)&addr, sizeof(addr), &val.buf[0], sizeof(val.buf))!=ERR_OK) {
    return ERR_FAILED; /* failure */
  }
#if %'ModuleName'_CPU_IS_LITTLE_ENDIAN
  *value = (int16_t)((val.buf[0]<<8)|val.buf[1]); /* transform into LE value */
#else
  *value = val.be; /* already in BE */
#endif
  return ERR_OK;
}

%endif %- GetMagZ
%-BW_METHOD_END GetMagZ
%-************************************************************************************************************
%-BW_METHOD_BEGIN MagneticSensorReset
%ifdef MagneticSensorReset
%define! RetVal
%include Common\FXOS8700CQMagneticSensorReset.Inc
uint8_t %'ModuleName'%.%MagneticSensorReset(void)
{
  uint8_t val;

  if (%@I2C@'ModuleName'%.ReadByteAddress8(%'ModuleName'%.I2C_ADDR, %'ModuleName'%.CTRL_REG_2, &val)!=ERR_OK) {
  %if defined(OnError)
    %OnError();
  %endif
    return ERR_FAILED;
  }
  val |= %'ModuleName'_CTRL_REG_2_MASK_RST; /* set one shot reset bit */
  return %@I2C@'ModuleName'%.WriteByteAddress8(%'ModuleName'%.I2C_ADDR, %'ModuleName'%.CTRL_REG_2, val);
}

%endif %- MagneticSensorReset
%-BW_METHOD_END MagneticSensorReset
%-************************************************************************************************************
%-BW_METHOD_BEGIN ReadReg8
%ifdef ReadReg8
%define! Paraddr
%define! Parval
%define! RetVal
%include Common\FXOS8700CQReadReg8.Inc
uint8_t %'ModuleName'%.%ReadReg8(uint8_t addr, uint8_t *val)
{
  if (%@I2C@'ModuleName'%.ReadByteAddress8(%'ModuleName'%.I2C_ADDR, addr, val)!=ERR_OK) {
  %if defined(OnError)
    %OnError();
  %endif
    return ERR_FAILED;
  }
  return ERR_OK;
}

%endif %- ReadReg8
%-BW_METHOD_END ReadReg8
%-************************************************************************************************************
%-BW_METHOD_BEGIN WriteReg8
%ifdef WriteReg8
%define! Paraddr
%define! Parval
%define! RetVal
%include Common\FXOS8700CQWriteReg8.Inc
uint8_t %'ModuleName'%.%WriteReg8(uint8_t addr, uint8_t val)
{
  return %@I2C@'ModuleName'%.WriteByteAddress8(%'ModuleName'%.I2C_ADDR, addr, val);
}

%endif %- WriteReg8
%-BW_METHOD_END WriteReg8
%-************************************************************************************************************
%-BW_METHOD_BEGIN SwReset
%ifdef SwReset
%define! RetVal
%include Common\FXOS8700CQSwReset.Inc
uint8_t %'ModuleName'%.%SwReset(void)
{
  uint8_t val, res;

  res = %@I2C@'ModuleName'%.ReadByteAddress8(%'ModuleName'_I2C_ADDR, %'ModuleName'_CTRL_REG_2, &val);
  if (res!=ERR_OK) {
  %if defined(OnError)
    %OnError();
  %endif
    return res;
  }
  val |= %'ModuleName'_CTRL_REG_2_MASK_RST; /* reset device */
  res = %@I2C@'ModuleName'%.WriteByteAddress8(%'ModuleName'_I2C_ADDR, %'ModuleName'_CTRL_REG_2, val);
  if (res!=ERR_OK) {
  %if defined(OnError)
    %OnError();
  %endif
    return res;
  }
  %@Wait@'ModuleName'%.Waitms(1); /* wait for one ms after sending the software reset */
  return ERR_OK;
}

%endif %- SwReset
%-BW_METHOD_END SwReset
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_METHOD_BEGIN OnError
%ifdef OnError
%IMPLEMENTATION OnError
%include Common\FXOS8700CQOnError.Inc
void %OnError(void)
{
  /* Write your code here ... */
}

%endif %- OnError
%-BW_METHOD_END OnError
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  /* Write code here ... */
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for FXOS8700CQ accelerometer
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is used to configure settings of the FXOS8700CQ module.
 */

#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

#ifdef __cplusplus
extern "C" {
#endif

#if !defined(%'ModuleName'%.CONFIG_I2C_DEVICE_ADDRESS)
  #define %'ModuleName'%.CONFIG_I2C_DEVICE_ADDRESS  (%I2CSlaveAddress)
    /*!< I2C 7bit device address */
    /*       SDA0  SDA1
       0x1E  low   low
       0x1D  high  low
       0x1C  low   high
       0x1F  high  high
    */
#endif

#if !defined(%'ModuleName'%.CONFIG_TEMP_OFFSET)
  #define %'ModuleName'%.CONFIG_TEMP_OFFSET  (%DieTempOffset)
    /*!< die temperature offset for real temperature calculation */
#endif

#if !defined(%'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED)
%ifdef ParseCommand
  #define %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED  1
%else
  #define %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED  0
%endif %- ParseCommand
    /*!< 1: shell support enabled, 0: otherwise */
#endif

#ifdef __cplusplus
}  /* extern "C" */
#endif

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
