%-Driver generated by the Component Wizard
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_METHOD_BEGIN
%-  %-BW_METHOD_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Wizard will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Author
%define DriverVersion 01.00
%define DriverDate    18.04.2014
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
%-
%include minIni_Files.prg
%-
%-
%-
%INTERFACE
%define! Settings Common\minIniSettings.Inc
%define! Abstract Common\minIniAbstract.Inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */
#include "%@sdk@ModuleName.h" /* SDK and API used */
#include "%'ModuleName'config.h" /* configuration */

#if %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED
%if defined(Shell)
  #include "%@Shell@ModuleName.h" /* Command line shell */
%else
  #include "McuShell.h" /* Command line shell */
%endif
#endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
#include "minIni.h" /* minIni Header file */
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger;
%-
%-BW_CUSTOM_USERTYPE_END


%-BW_DEFINITION_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_getkey
%ifdef ini_getkey
#define %'ModuleName'%.%ini_getkey(Section, idx, Buffer, BufferSize, Filename) \
  ini_getkey(Section, idx, Buffer, BufferSize, Filename)
%define! ParSection
%define! Paridx
%define! ParBuffer
%define! ParBufferSize
%define! ParFilename
%define! RetVal
%include Common\minIniini_getkey.Inc

%endif %- ini_getkey
%-BW_METHOD_END ini_getkey
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_getbool
%ifdef ini_getbool
#define %'ModuleName'%.%ini_getbool(Section, Key, DefValue, Filename) \
  ini_getbool(Section, Key, DefValue, Filename)
%define! ParSection
%define! ParKey
%define! ParDefValue
%define! ParFilename
%define! RetVal
%include Common\minIniini_getbool.Inc

%endif %- ini_getbool
%-BW_METHOD_END ini_getbool
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_gets
%ifdef ini_gets
#define %'ModuleName'%.%ini_gets(Section, Key, DefValue, Buffer, BufferSize, Filename) \
  ini_gets(Section, Key, DefValue, Buffer, BufferSize, Filename)
%define! ParSection
%define! ParKey
%define! ParDefValue
%define! ParFilename
%define! ParBuffer
%define! ParBufferSize
%define! RetVal
%include Common\minIniini_gets.Inc

%endif %- ini_gets
%-BW_METHOD_END ini_gets
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_getl
%ifdef ini_getl
#define %'ModuleName'%.%ini_getl(Section, Key, DefValue, Filename) \
  ini_getl(Section, Key, DefValue, Filename)
%define! ParSection
%define! ParKey
%define! ParDefValue
%define! ParFilename
%define! RetVal
%include Common\minIniini_getl.Inc

%endif %- ini_getl
%-BW_METHOD_END ini_getl
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_getsection
%ifdef ini_getsection
#define %'ModuleName'%.%ini_getsection(idx, Buffer, BufferSize, Filename) \
  ini_getsection(idx, Buffer, BufferSize, Filename)
%define! Paridx
%define! ParBuffer
%define! ParBufferSize
%define! ParFilename
%define! RetVal
%include Common\minIniini_getsection.Inc

%endif %- ini_getsection
%-BW_METHOD_END ini_getsection
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_getf
%ifdef ini_getf
#define %'ModuleName'%.%ini_getf(Section, Key, DefValue, Filename) \
  ini_getf(Section, Key, DefValue, Filename)
%define! ParSection
%define! ParKey
%define! ParDefValue
%define! ParFilename
%define! RetVal
%include Common\minIniini_getf.Inc

%endif %- ini_getf
%-BW_METHOD_END ini_getf
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_putl
%ifdef ini_putl
#define %'ModuleName'%.%ini_putl(Section, Key, Value, Filename) \
  ini_putl(Section, Key, Value, Filename)
%define! ParSection
%define! ParKey
%define! ParValue
%define! ParFilename
%define! RetVal
%include Common\minIniini_putl.Inc

%endif %- ini_putl
%-BW_METHOD_END ini_putl
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_puts
%ifdef ini_puts
#define %'ModuleName'%.%ini_puts(Section, Key, Value, Filename) \
   ini_puts(Section, Key, Value, Filename);
%define! ParSection
%define! ParKey
%define! ParValue
%define! ParFilename
%define! RetVal
%include Common\minIniini_puts.Inc

%endif %- ini_puts
%-BW_METHOD_END ini_puts
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_putf
%ifdef ini_putf
#define %'ModuleName'%.%ini_putf(Section, Key, Value, Filename) \
  ini_putf(Section, Key, Value, Filename)
%define! ParSection
%define! ParKey
%define! ParValue
%define! ParFilename
%define! RetVal
%include Common\minIniini_putf.Inc

%endif %- ini_putf
%-BW_METHOD_END ini_putf
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_browse
%ifdef ini_browse
#define %'ModuleName'%.%ini_browse(Callback, UserData, Filename) \
  ini_browse(Callback, UserData, Filename)
%define! ParCallback
%define! ParUserData
%define! ParFilename
%define! RetVal
%include Common\minIniini_browse.Inc

%endif %- ini_browse
%-BW_METHOD_END ini_browse
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
%if defined(Shell)
#if %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io);
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\minIniParseCommand.Inc

#endif
%endif %- defined(Shell)
%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
void %'ModuleName'%.%Deinit(void);
%include Common\minIniDeinit.Inc

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
void %'ModuleName'%.%Init(void);
%include Common\minIniInit.Inc

%endif %- Init
%-BW_METHOD_END Init
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\minIniSettings.Inc
%define! Abstract Common\minIniAbstract.Inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
#include "%@Utility@ModuleName.h" /* various utility functions */

%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;
#if %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED
%if defined(Shell)
static uint8_t PrintStatus(const %@Shell@'ModuleName'%.StdIOType *io) {
  uint8_t buf[16];

  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"ini", (unsigned char*)"MinINI status\r\n", io->stdOut);
  %@Utility@'ModuleName'%.Num32uToStr(buf, sizeof(buf), INI_BUFFERSIZE);
  %@Utility@'ModuleName'%.strcat(buf, sizeof(buf), (unsigned char*)" bytes\r\n");
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  buffer", buf, io->stdOut);

#if defined(INI_REAL)
  %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"supported\r\n");
#else
  %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"not supported\r\n");
#endif
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  real", buf, io->stdOut);

#if defined(INI_READONLY)
  %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"read-only\r\n");
#else
  %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"read-write\r\n");
#endif
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  mode", buf, io->stdOut);

  switch(%'ModuleName'%.CONFIG_FS) {
    case %'ModuleName'%.CONFIG_FS_TYPE_GENERIC:
      %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"Generic\r\n"); break;
    case %'ModuleName'%.CONFIG_FS_TYPE_TINY_FS:
      %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"TinyFS\r\n"); break;
    case %'ModuleName'%.CONFIG_FS_TYPE_FAT_FS:
      %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"FatFS\r\n"); break;
    default:
      %@Utility@'ModuleName'%.strcpy(buf, sizeof(buf), (unsigned char*)"ERROR\r\n"); break;
    }
  %@Shell@'ModuleName'%.SendStatusStr((unsigned char*)"  FS", buf, io->stdOut);
  return ERR_OK;
}
%endif
#endif
%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_getkey
%ifdef ini_getkey
%define! ParSection
%define! Paridx
%define! ParBuffer
%define! ParBufferSize
%define! ParFilename
%define! RetVal
%include Common\minIniini_getkey.Inc
/**
int %'ModuleName'%.%ini_getkey(const mTCHAR *Section, int idx, mTCHAR *Buffer, int BufferSize, const mTCHAR *Filename)
{
  Implemented as macro in the header file
}
*/

%endif %- ini_getkey
%-BW_METHOD_END ini_getkey
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_getbool
%ifdef ini_getbool
%define! ParSection
%define! ParKey
%define! ParDefValue
%define! ParFilename
%define! RetVal
%include Common\minIniini_getbool.Inc
/**
int %'ModuleName'%.%ini_getbool(const mTCHAR *Section, const mTCHAR *Key, int DefValue, const mTCHAR *Filename)
{
  Implemented as macro in the header file
}
*/

%endif %- ini_getbool
%-BW_METHOD_END ini_getbool
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_gets
%ifdef ini_gets
%define! ParSection
%define! ParKey
%define! ParDefValue
%define! ParFilename
%define! ParBuffer
%define! ParBufferSize
%define! RetVal
%include Common\minIniini_gets.Inc
/**
int %'ModuleName'%.%ini_gets(const mTCHAR *Section, const mTCHAR *Key, const mTCHAR *DefValue, nTCHAR *Buffer, int BufferSize, const mTCHAR *Filename)
{
  Implemented as macro in the header file
}
*/

%endif %- ini_gets
%-BW_METHOD_END ini_gets
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_getl
%ifdef ini_getl
%define! ParSection
%define! ParKey
%define! ParDefValue
%define! ParFilename
%define! RetVal
%include Common\minIniini_getl.Inc
/**
long %'ModuleName'%.%ini_getl(const mTCHAR *Section, const mTCHAR *Key, long DefValue, const mTCHAR *Filename)
{
  Implemented as macro in the header file
}
*/

%endif %- ini_getl
%-BW_METHOD_END ini_getl
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_getsection
%ifdef ini_getsection
%define! Paridx
%define! ParBuffer
%define! ParBufferSize
%define! ParFilename
%define! RetVal
%include Common\minIniini_getsection.Inc
/**
int %'ModuleName'%.%ini_getsection(int idx, mTCHAR *Buffer, int BufferSize, const mTCHAR *Filename)
{
  Implemented as macro in the header file
}
*/

%endif %- ini_getsection
%-BW_METHOD_END ini_getsection
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_getf
%ifdef ini_getf
%define! ParSection
%define! ParKey
%define! ParDefValue
%define! ParFilename
%define! RetVal
%include Common\minIniini_getf.Inc
/**
INI_REAL %'ModuleName'%.%ini_getf(const mTCHAR *Section, const mTCHAR *Key, INI_REAL DefValue, const mTCHAR *Filename)
{
  Implemented as macro in the header file
}
*/

%endif %- ini_getf
%-BW_METHOD_END ini_getf
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_putl
%ifdef ini_putl
%define! ParSection
%define! ParKey
%define! ParValue
%define! ParFilename
%define! RetVal
%include Common\minIniini_putl.Inc
/**
int %'ModuleName'%.%ini_putl(const mTCHAR *Section, const mTCHAR *Key, long Value, const mTCHAR *Filename)
{
  Implemented as macro in the header file
}
*/

%endif %- ini_putl
%-BW_METHOD_END ini_putl
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_puts
%ifdef ini_puts
%define! ParSection
%define! ParKey
%define! ParValue
%define! ParFilename
%define! RetVal
%include Common\minIniini_puts.Inc
/**
int %'ModuleName'%.%ini_puts(const mTCHAR *Section, const mTCHAR *Key, const mTCHAR *Value, const mTCHAR *Filename)
{
  Implemented as macro in the header file
}
*/

%endif %- ini_puts
%-BW_METHOD_END ini_puts
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_putf
%ifdef ini_putf
%define! ParSection
%define! ParKey
%define! ParValue
%define! ParFilename
%define! RetVal
%include Common\minIniini_putf.Inc
/**
int %'ModuleName'%.%ini_putf(const mTCHAR *Section, const mTCHAR *Key, INI_REAL Value, const mTCHAR *Filename)
{
  Implemented as macro in the header file
}
*/

%endif %- ini_putf
%-BW_METHOD_END ini_putf
%-************************************************************************************************************
%-BW_METHOD_BEGIN ini_browse
%ifdef ini_browse
%define! ParCallback
%define! ParUserData
%define! ParFilename
%define! RetVal
%include Common\minIniini_browse.Inc
/**
int %'ModuleName'%.%ini_browse(INI_CALLBACK Callback, const void *UserData, const TCHAR *Filename)
{
  Implemented as macro in the header file
}
*/

%endif %- ini_browse
%-BW_METHOD_END ini_browse
%-************************************************************************************************************
%-BW_METHOD_BEGIN ParseCommand
%ifdef ParseCommand
%define! Parcmd
%define! Parhandled
%define! Pario
%define! RetVal
%include Common\minIniParseCommand.Inc
%if defined(Shell)
uint8_t %'ModuleName'%.%ParseCommand(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io)
{
  const unsigned char *p;
  unsigned char section[48], key[48], value[96], fileName[64];
  size_t lenRead;

  if (%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_HELP)==0 || %@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' help")==0) {
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"%'ModuleName'", (const unsigned char*)"Group of %'ModuleName' commands\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  help|status", (unsigned char*)"Print help or status information\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  read <f> <s> <k>", (const unsigned char*)"Read a key from a section in a file\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  write <f> <s> <k> <v>", (const unsigned char*)"Write a key with value to a section in a file\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  delkey <f> <s> <k>", (const unsigned char*)"Delete a key in a section of file\r\n", io->stdOut);
    %@Shell@'ModuleName'%.SendHelpStr((unsigned char*)"  delsec <f> <s>", (const unsigned char*)"Delete a section in a file\r\n", io->stdOut);
    *handled = TRUE;
    return ERR_OK;
  } else if ((%@Utility@'ModuleName'%.strcmp((char*)cmd, %@Shell@'ModuleName'%.CMD_STATUS)==0) || (%@Utility@'ModuleName'%.strcmp((char*)cmd, "%'ModuleName' status")==0)) {
    *handled = TRUE;
    return PrintStatus(io);
  } else if (%@Utility@'ModuleName'%.strncmp((char*)cmd, "%'ModuleName' read ", sizeof("%'ModuleName' read ")-1)==0) {
    *handled = TRUE;
    p = cmd + sizeof("%'ModuleName' read ")-1;
    if (%@Utility@'ModuleName'%.ReadEscapedName(p, fileName, sizeof(fileName), &lenRead, NULL, NULL)!=ERR_OK || lenRead==0) {
      return ERR_FAILED;
    }
    p += lenRead;
    %@Utility@'ModuleName'%.SkipSpaces(&p);
    if (%@Utility@'ModuleName'%.ReadEscapedName(p, section, sizeof(section), &lenRead, NULL, NULL)!=ERR_OK || lenRead==0) {
      return ERR_FAILED;
    }
    p += lenRead;
    %@Utility@'ModuleName'%.SkipSpaces(&p);
    if (%@Utility@'ModuleName'%.ReadEscapedName(p, key, sizeof(key), NULL, &lenRead, NULL)!=ERR_OK || lenRead==0) {
      return ERR_FAILED;
    }
    p += lenRead;
    if (*p != '\0') { /* still some arguments? */
      return ERR_FAILED;
    }
    if (ini_gets((const TCHAR *)section, (const TCHAR *)key, (const TCHAR *)"", (TCHAR *)value, sizeof(value), (const TCHAR *)fileName) == 0) {
      return ERR_FAILED;
    }
    %@Shell@'ModuleName'%.SendStr(key, io->stdOut);
    %@Shell@'ModuleName'%.SendStr((unsigned char*)"=", io->stdOut);
    %@Shell@'ModuleName'%.SendStr(value, io->stdOut);
    %@Shell@'ModuleName'%.SendStr((unsigned char*)"\r\n", io->stdOut);
    return ERR_OK;
  } else if (%@Utility@'ModuleName'%.strncmp((char*)cmd, "%'ModuleName' write ", sizeof("%'ModuleName' write ")-1)==0) {
    *handled = TRUE;
    p = cmd + sizeof("%'ModuleName' write ")-1;
    if (%@Utility@'ModuleName'%.ReadEscapedName(p, fileName, sizeof(fileName), &lenRead, NULL, NULL)!=ERR_OK || lenRead==0) {
      return ERR_FAILED;
    }
    p += lenRead;
    %@Utility@'ModuleName'%.SkipSpaces(&p);
    if (%@Utility@'ModuleName'%.ReadEscapedName(p, section, sizeof(section), &lenRead, NULL, NULL)!=ERR_OK || lenRead==0) {
      return ERR_FAILED;
    }
    p += lenRead;
    %@Utility@'ModuleName'%.SkipSpaces(&p);
    if (%@Utility@'ModuleName'%.ReadEscapedName(p, key, sizeof(key), &lenRead, NULL, NULL)!=ERR_OK || lenRead==0) {
      return ERR_FAILED;
    }
    p += lenRead;
    %@Utility@'ModuleName'%.SkipSpaces(&p);
    if (%@Utility@'ModuleName'%.ReadEscapedName(p, value, sizeof(value), &lenRead, NULL, NULL)!=ERR_OK || lenRead==0) {
      return ERR_FAILED;
    }
    p += lenRead;
    if (*p != '\0') { /* still some arguments? */
      return ERR_FAILED;
    }
    if (ini_puts((const TCHAR *)section, (const TCHAR *)key, (const TCHAR *)value, (const TCHAR *)fileName) == 0) {
      return ERR_FAILED;
    }
    return ERR_OK;
  } else if (%@Utility@'ModuleName'%.strncmp((char*)cmd, "%'ModuleName' delkey ", sizeof("%'ModuleName' delkey ")-1)==0) {
    *handled = TRUE;
    p = cmd + sizeof("%'ModuleName' delkey ")-1;
    if (%@Utility@'ModuleName'%.ReadEscapedName(p, fileName, sizeof(fileName), &lenRead, NULL, NULL)!=ERR_OK || lenRead==0) {
      return ERR_FAILED;
    }
    p += lenRead;
    %@Utility@'ModuleName'%.SkipSpaces(&p);
    if (%@Utility@'ModuleName'%.ReadEscapedName(p, section, sizeof(section), &lenRead, NULL, NULL)!=ERR_OK || lenRead==0) {
      return ERR_FAILED;
    }
    p += lenRead;
    %@Utility@'ModuleName'%.SkipSpaces(&p);
    if (%@Utility@'ModuleName'%.ReadEscapedName(p, key, sizeof(key), &lenRead, NULL, NULL)!=ERR_OK || lenRead==0) {
      return ERR_FAILED;
    }
    p += lenRead;
    if (*p != '\0') { /* still some arguments? */
      return ERR_FAILED;
    }
    if (ini_puts((const TCHAR *)section, (const TCHAR *)key, NULL, (const TCHAR *)fileName) == 0) {
      return ERR_FAILED;
    }
    return ERR_OK;
  } else if (%@Utility@'ModuleName'%.strncmp((char*)cmd, "%'ModuleName' delsec ", sizeof("%'ModuleName' delsec ")-1)==0) {
    *handled = TRUE;
    p = cmd + sizeof("%'ModuleName' delsec ")-1;
    if (%@Utility@'ModuleName'%.ReadEscapedName(p, fileName, sizeof(fileName), &lenRead, NULL, NULL)!=ERR_OK || lenRead==0) {
      return ERR_FAILED;
    }
    p += lenRead;
    %@Utility@'ModuleName'%.SkipSpaces(&p);
    if (%@Utility@'ModuleName'%.ReadEscapedName(p, section, sizeof(section), &lenRead, NULL, NULL)!=ERR_OK || lenRead==0) {
      return ERR_FAILED;
    }
    p += lenRead;
    if (*p != '\0') { /* still some arguments? */
      return ERR_FAILED;
    }
    if (ini_puts((const TCHAR *)section, NULL, NULL, (const TCHAR *)fileName) == 0) {
      return ERR_FAILED;
    }
    return ERR_OK;
  }
  return ERR_OK;
}
%endif %- defined(Shell)
%endif %- ParseCommand
%-BW_METHOD_END ParseCommand
%-************************************************************************************************************
%-BW_METHOD_BEGIN Deinit
%ifdef Deinit
%include Common\minIniDeinit.Inc
void %'ModuleName'%.%Deinit(void)
{
  (void)ini_deinit(); /* call low level function */
}

%endif %- Deinit
%-BW_METHOD_END Deinit
%-************************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\minIniInit.Inc
void %'ModuleName'%.%Init(void)
{
  (void)ini_init(); /* call low level function */
}

%endif %- Init
%-BW_METHOD_END Init
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%-----------------------------------------------------------------------------------------
%if defined(sdk) & %@sdk@ConfigFilesFolderName <> ""
  %define  ConfigSrcDirFolder %%@sdk@ConfigFilesFolderName/
%else
  %define  ConfigSrcDirFolder
%endif
%----------------------------
%FILE %'DirRel_Code'%'ConfigSrcDirFolder'%'ModuleName'config.h
/**
 * \file
 * \brief Configuration header file for MinINI
 * Copyright (c) 2020, Erich Styger
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * This header file is used to configure settings of the MinINI module.
 */
#ifndef __%'ModuleName'_CONFIG_H
#define __%'ModuleName'_CONFIG_H

#define %'ModuleName'%.CONFIG_FS_TYPE_GENERIC  (0) /* Generic File System */
#define %'ModuleName'%.CONFIG_FS_TYPE_FAT_FS   (1) /* FatFS File System */
#define %'ModuleName'%.CONFIG_FS_TYPE_TINY_FS  (2) /* TinyFS File System */

#ifndef %'ModuleName'%.CONFIG_FS
%if defined(FatFSenabled) & %FatFSenabled='yes'
  #define %'ModuleName'%.CONFIG_FS      (%'ModuleName'%.CONFIG_FS_TYPE_FAT_FS)
%else
  #define %'ModuleName'%.CONFIG_FS      (%'ModuleName'%.CONFIG_FS_TYPE_GENERIC)
%endif
    /*!< File System integration used, one of %'ModuleName'%.CONFIG_FS_TYPE_GENERIC, %'ModuleName'%.CONFIG_FS_TYPE_FAT_FS, %'ModuleName'%.CONFIG_FS_TYPE_TINY_FS */
#endif

%if defined(portableStrnicmp) & %portableStrnicmp='yes'
#define PORTABLE_STRNICMP
%else
//#define PORTABLE_STRNICMP
%endif

%if defined(useReal) & %useReal='yes'
#define INI_REAL double
%else
//#define INI_REAL double
%endif

%if defined(isReadOnly) & %isReadOnly='yes'
#define INI_READONLY
%else
//#define INI_READONLY
%endif

#ifndef NDEBUG
%if defined(isNoDebug) & %isNoDebug='yes'
  #define NDEBUG
%else
  //#define NDEBUG
%endif
#endif

%if defined(useGlobalBuffer) & %useGlobalBuffer='yes'
#define INI_USE_GLOBAL_BUFFER   1 /* 0: use stack for buffer; 1: use global memory for buffer */
%else
#define INI_USE_GLOBAL_BUFFER   0 /* 0: use stack for buffer; 1: use global memory for buffer */
%endif

#if !defined(%'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED)
%if defined(ParseCommand) & defined(Shell)
  #define %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED  (1)
%else
  #define %'ModuleName'%.CONFIG_PARSE_COMMAND_ENABLED  (0)
%endif %- ParseCommand
    /*!< 1: shell support enabled, 0: otherwise */
#endif

#endif /* __%'ModuleName'_CONFIG_H */
%-----------------------------------------------------------------------------------------
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
