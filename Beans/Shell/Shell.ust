<?xml version="1.0" encoding="UTF-8"?>
<!--User types for component-->
<UserTypes>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>StdIO_OutErr_FctType</Name>
    <Hint>Callback for an output or error I/O function</Hint>
    <Generate>yes</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>yes</GenerateHelp>
    <PreparedHint>typedef void (*%'ModuleName'%.StdIO_OutErr_FctType)(uint8_t); /* Callback for an output or error I/O function */\n
</PreparedHint>
    <Type>typedef void (*%'ModuleName'%.StdIO_OutErr_FctType)(uint8_t);</Type>
    <HWTestType>pointer</HWTestType>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>StdIO_In_FctType</Name>
    <Hint>Callback for an I/O input function.</Hint>
    <Generate>yes</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>yes</GenerateHelp>
    <PreparedHint>typedef void (*%'ModuleName'%.StdIO_In_FctType)(uint8_t *); /* Callback for an I/O input function. */\n
</PreparedHint>
    <Type>typedef void (*%'ModuleName'%.StdIO_In_FctType)(uint8_t *);</Type>
    <HWTestType>pointer</HWTestType>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>StdIO_KeyPressed_FctType</Name>
    <Hint>Callback which returns true if a key has been pressed</Hint>
    <Generate>yes</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>yes</GenerateHelp>
    <PreparedHint>typedef bool (*%'ModuleName'%.StdIO_KeyPressed_FctType)(void); /* Callback which returns true if a key has been pressed */\n
</PreparedHint>
    <Type>typedef bool (*%'ModuleName'%.StdIO_KeyPressed_FctType)(void);</Type>
    <HWTestType>pointer</HWTestType>
  </Type>
  <Type>
    <UsrType>TRecordType</UsrType>
    <Name>StdIOType</Name>
    <Hint>Record containing input, output and error callback (stdin, stdout, stderr).</Hint>
    <Generate>yes</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>yes</GenerateHelp>
    <PreparedHint>  typedef struct { /* Record containing input, output and error callback (stdin, stdout, stderr). */\n
    %'ModuleName'_StdIO_In_FctType stdIn; /* standard input */\n
    %'ModuleName'_StdIO_OutErr_FctType stdOut; /* standard output */\n
    %'ModuleName'_StdIO_OutErr_FctType stdErr; /* standard error */\n
    %'ModuleName'_StdIO_KeyPressed_FctType keyPressed; /* key pressed callback */\n
  } %'ModuleName'_StdIOType;\n
</PreparedHint>
    <RecordItem>
      <ItemName>stdIn</ItemName>
      <ItemType>StdIO_In_FctType</ItemType>
      <ItemHint>standard input</ItemHint>
      <ItemPointer>no</ItemPointer>
    </RecordItem>
    <RecordItem>
      <ItemName>stdOut</ItemName>
      <ItemType>StdIO_OutErr_FctType</ItemType>
      <ItemHint>standard output</ItemHint>
      <ItemPointer>no</ItemPointer>
    </RecordItem>
    <RecordItem>
      <ItemName>stdErr</ItemName>
      <ItemType>StdIO_OutErr_FctType</ItemType>
      <ItemHint>standard error</ItemHint>
      <ItemPointer>no</ItemPointer>
    </RecordItem>
    <RecordItem>
      <ItemName>keyPressed</ItemName>
      <ItemType>StdIO_KeyPressed_FctType</ItemType>
      <ItemHint>key pressed callback</ItemHint>
      <ItemPointer>no</ItemPointer>
    </RecordItem>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>ConstStdIOType</Name>
    <Hint>constant StdIOType</Hint>
    <Generate>yes</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>yes</GenerateHelp>
    <PreparedHint>typedef const %'ModuleName'%.StdIOType %'ModuleName'%.ConstStdIOType; /* constant StdIOType */\n
</PreparedHint>
    <Type>typedef const %'ModuleName'%.StdIOType %'ModuleName'%.ConstStdIOType;</Type>
    <HWTestType>pointer</HWTestType>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>ParseCommandCallback</Name>
    <Hint>Callback for parsing a shell command</Hint>
    <Generate>yes</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>yes</GenerateHelp>
    <PreparedHint>typedef uint8_t (*%'ModuleName'%.ParseCommandCallback)(const uint8_t *cmd, bool *handled, const %'ModuleName'%.StdIOType *io); /* Callback for parsing a shell command */\n
</PreparedHint>
    <Type>typedef uint8_t (*%'ModuleName'%.ParseCommandCallback)(const uint8_t *cmd, bool *handled, const %'ModuleName'%.StdIOType *io);</Type>
    <HWTestType>pointer</HWTestType>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>ConstStdIOTypePtr</Name>
    <Hint>Pointer to constant standard I/O descriptor</Hint>
    <Generate>yes</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>yes</GenerateHelp>
    <PreparedHint>typedef const %'ModuleName'%.ConstStdIOType *%'ModuleName'%.ConstStdIOTypePtr; /* Pointer to constant standard I/O descriptor */\n
</PreparedHint>
    <Type>typedef const %'ModuleName'%.ConstStdIOType *%'ModuleName'%.ConstStdIOTypePtr;</Type>
    <HWTestType>pointer</HWTestType>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>ConstParseCommandCallback</Name>
    <Hint>Callback for parsing a shell command</Hint>
    <Generate>yes</Generate>
    <Unique>yes</Unique>
    <GenerateHelp>yes</GenerateHelp>
    <PreparedHint>typedef const %'ModuleName'%.ParseCommandCallback %'ModuleName'%.ConstParseCommandCallback; /* Callback for parsing a shell command */\n
</PreparedHint>
    <Type>typedef const %'ModuleName'%.ParseCommandCallback %'ModuleName'%.ConstParseCommandCallback;</Type>
    <HWTestType>pointer</HWTestType>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>uint8_t</Name>
    <Hint/>
    <Generate>no</Generate>
    <Unique>no</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint>\n
</PreparedHint>
    <Type/>
    <HWTestType>pointer</HWTestType>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>uint32_t</Name>
    <Hint/>
    <Generate>no</Generate>
    <Unique>no</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint>\n
</PreparedHint>
    <Type/>
    <HWTestType>pointer</HWTestType>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>uint16_t</Name>
    <Hint/>
    <Generate>no</Generate>
    <Unique>no</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint>\n
</PreparedHint>
    <Type/>
    <HWTestType>pointer</HWTestType>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>int8_t</Name>
    <Hint/>
    <Generate>no</Generate>
    <Unique>no</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint>\n
</PreparedHint>
    <Type/>
    <HWTestType>pointer</HWTestType>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>int32_t</Name>
    <Hint/>
    <Generate>no</Generate>
    <Unique>no</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint>\n
</PreparedHint>
    <Type/>
    <HWTestType>pointer</HWTestType>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>int16_t</Name>
    <Hint/>
    <Generate>no</Generate>
    <Unique>no</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint>\n
</PreparedHint>
    <Type/>
    <HWTestType>pointer</HWTestType>
  </Type>
  <Type>
    <UsrType>TUserType</UsrType>
    <Name>size_t</Name>
    <Hint/>
    <Generate>no</Generate>
    <Unique>no</Unique>
    <GenerateHelp>no</GenerateHelp>
    <PreparedHint>\n
</PreparedHint>
    <Type/>
    <HWTestType/>
  </Type>
</UserTypes>
