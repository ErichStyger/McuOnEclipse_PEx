%set FreeRTOSVersion Value V10.4.1
%set FreeRTOSVersion ExtraText V10.4.1
%ifdef CPUfamily
%if (CPUfamily = "ColdFireV1")
  %set ColdFireV1CPUSpecific ReadOnly no
  %set ColdFireV1CPUSpecific Value Enabled
  %set ColdFireV2CPUSpecific ReadOnly yes
  %set ColdFireV2CPUSpecific Value Disabled
  %set KinetisCPUSpecific ReadOnly yes
  %set KinetisCPUSpecific Value Disabled
  %set KinetisSDKGroup ReadOnly yes
  %set KinetisSDKGroup Value Disabled
%elif (CPUfamily = "MCF")
  %set ColdFireV1CPUSpecific ReadOnly yes
  %set ColdFireV1CPUSpecific Value Disabled
  %set ColdFireV2CPUSpecific ReadOnly no
  %set ColdFireV2CPUSpecific Value Enabled
  %set KinetisCPUSpecific ReadOnly yes
  %set KinetisCPUSpecific Value Disabled
  %set KinetisSDKGroup ReadOnly yes
  %set KinetisSDKGroup Value Disabled
%elif (CPUfamily = "Kinetis") || (CPUfamily = "S32K")
  %set ColdFireV1CPUSpecific ReadOnly yes
  %set ColdFireV1CPUSpecific Value Disabled
  %set ColdFireV2CPUSpecific ReadOnly yes
  %set ColdFireV2CPUSpecific Value Disabled
  %set KinetisCPUSpecific ReadOnly no
  %set KinetisCPUSpecific Value Enabled
  %set KinetisSDKGroup ReadOnly no
%else %- S08
  %set ColdFireV1CPUSpecific ReadOnly yes
  %set ColdFireV1CPUSpecific Value Disabled
  %set ColdFireV2CPUSpecific ReadOnly yes
  %set ColdFireV2CPUSpecific Value Disabled
  %set KinetisCPUSpecific ReadOnly yes
  %set KinetisCPUSpecific Value Disabled
  %set KinetisSDKGroup ReadOnly yes
  %set KinetisSDKGroup Value Disabled
%endif
%- only Kinetis has Low Level Drivers
%if (CPUfamily = "Kinetis") || (CPUfamily = "S32K")
  %- %set useARMSysTickTimer ExtraText xxx
  %if defined(useARMSysTickTimer) & useARMSysTickTimer='yes'
    %set LDDTickGroup Value Disabled
    %if defined(ARMFamilyType) & ARMFamilyType="M0+"
      %if defined(useARMSysTickTimer) & defined(useARMSysTickUseCoreClock) & useARMSysTickTimer='yes'
        %set useARMSysTickUseCoreClock ReadOnly no
        %if %useARMSysTickUseCoreClock='yes'
          %set useARMSysTickTimer ExtraText CoreClock
        %else
          %set useARMSysTickTimer ExtraText CoreClock/16
        %endif
      %endif
    %else %- Kinetis K does not supporte external clock bit for SysTick
      %set useARMSysTickTimer ExtraText CoreClock
      %if defined(useARMSysTickUseCoreClock)
        %set useARMSysTickUseCoreClock Value yes
        %set useARMSysTickUseCoreClock ReadOnly yes
      %endif
    %endif
  %else
    %set LDDTickGroup Value Enabled
  %endif
  %set LDDTickGroup ReadOnly yes
  %- Runtime counter settings
  %if defined(RuntimeCounterUseTickCounter) & %RuntimeCounterUseTickCounter='yes'
    %set LDDRuntimeCounterGroup Value Disabled
  %else
    %set LDDRuntimeCounterGroup Value Enabled
  %endif
  %set LDDRuntimeCounterGroup ReadOnly yes
  %set NonLDDTickGroup Value Disabled
  %set NonLDDTickGroup ReadOnly yes
  %set NonLDDSWIGroup Value Disabled
  %set NonLDDSWIGroup ReadOnly yes
  %set NonLDDRuntimeCounterGroup Value Disabled
  %set NonLDDRuntimeCounterGroup ReadOnly yes
%elif (CPUfamily = "56800")
  %- no SWI needed, as context switch is done programmically
  %set NonLDDSWIGroup Value Disabled
  %set NonLDDSWIGroup ReadOnly yes
%else
  %set LDDTickGroup Value Disabled
  %set LDDTickGroup ReadOnly yes
  %set LDDRuntimeCounterGroup Value Disabled
  %set LDDRuntimeCounterGroup ReadOnly yes
  %set NonLDDTickGroup Value Enabled
  %set NonLDDTickGroup ReadOnly yes
  %set NonLDDSWIGroup Value Enabled
  %set NonLDDSWIGroup ReadOnly yes
  %set NonLDDRuntimeCounterGroup Value Enabled
  %set NonLDDRuntimeCounterGroup ReadOnly yes
%endif
%if defined(Compiler) & Compiler = 'CodeWarriorARM'
  %set CompilerOptimizationLevel ReadOnly no
%else %- not applicable for GCC
  %set CompilerOptimizationLevel ReadOnly yes
%endif
%if defined(UseTraceFacility) & UseTraceFacility='yes'
  %set vTaskList Selection always
%else
  %set vTaskList Selection never
%endif
%if defined(CollectRuntimeStatisticsGroup) & CollectRuntimeStatisticsGroup='yes'
  %set vTaskGetRunTimeStats Selection always
%else
  %set vTaskGetRunTimeStats Selection never
%endif
%if defined(UseRecursiveMutexes) & %UseRecursiveMutexes='yes'
  %set xSemaphoreTakeRecursive Selection always
  %set xSemaphoreGiveRecursive Selection always
  %set xSemaphoreCreateRecursiveMutex Selection always
%else
  %set xSemaphoreTakeRecursive Selection never
  %set xSemaphoreGiveRecursive Selection never
  %set xSemaphoreCreateRecursiveMutex Selection never
%endif
%if defined(UseApplicationTaskTags) & %UseApplicationTaskTags='yes'
  %set vTaskSetApplicationTaskTag Selection always
  %set xTaskGetApplicationTaskTag Selection always
  %set xTaskCallApplicationTaskHook Selection always
%else
  %set vTaskSetApplicationTaskTag Selection never
  %set xTaskGetApplicationTaskTag Selection never
  %set xTaskCallApplicationTaskHook Selection never
%endif
%if defined(UseTraceHooksGroup) & %UseTraceHooksGroup='yes'
  %set UseTraceFacility Value yes
%endif

%if (CPUfamily = "Kinetis" || CPUfamily = "S32K")
  %- %if %CPUDB_prph_has_feature(CPU,ARM_CORTEX_M0P) = 'yes'
    %- %set ARMFamilyType Value "M0+"
  %- %elif %CPUDB_prph_has_feature(CPU,ARM_CORTEX_M7) = 'yes'
  %- %else %- M4 or M4F core
  %- somehow the code below does NOT work???
  %-  %if %CPUDB_prph_has_feature(CPU, FPU) = 'no'
  %-    %set ARMFamilyType Value "M4"
  %-    %warning M4
  %-  %else
  %-    %set ARMFamilyType Value "M4F"
  %-    %warning M4F
  %-  %endif
  %- %endif
  %- %set ARMFamilyType ReadOnly no
  %- %set ARMFamilyType Value Enabled
  %if defined(ARMFamilyType) & ARMFamilyType="M0+" %- 2 bits, 0..3
    %set ARMLowestInterruptPriority Value d:3
    %set ARMLowestInterruptPriority ExtraText 192, 0xC0, 0b1100'0000
  %elif defined(ARMFamilyType) & ARMFamilyType="M4F" %- 4 bits, 0..15
    %set ARMLowestInterruptPriority Value d:15
    %set ARMLowestInterruptPriority ExtraText 240, 0xF0, 0b1111'0000
  %elif defined(ARMFamilyType) & ARMFamilyType="M4" %- 4 bits, 0..15
    %set ARMLowestInterruptPriority Value d:15
    %set ARMLowestInterruptPriority ExtraText 240, 0xF0, 0b1111'0000
  %else %- M7(F), 4 bits, 0..15
    %set ARMLowestInterruptPriority Value d:15
    %set ARMLowestInterruptPriority ExtraText 240, 0xF0, 0b1110'1000
  %endif
  %if defined(TickTimerLDD) & %@TickTimerLDD@MainModule != "SysTick"
    %error FreeRTOS Tick Timer: Only SysTick/SYST_CVR is supported, but %@TickTimerLDD@MainModule is used! Please use SysTick/SYST_CVR (with or without 'Low Power Timer') for ARM/Kinetis.
  %endif
  %if defined(KinetisLibraryLowestInterruptPriority) & defined(ARMLowestInterruptPriority) & defined(KinetisLibraryMaxInterruptPriority)
    %if KinetisLibraryLowestInterruptPriority >. ARMLowestInterruptPriority
      %error "Library Lowest Interrupt Priority (%KinetisLibraryLowestInterruptPriority) is larger than Lowest Interrupt Priority (%ARMLowestInterruptPriority). Priority shall be <= %ARMLowestInterruptPriority."
    %endif
    %if KinetisLibraryMaxInterruptPriority >. KinetisLibraryLowestInterruptPriority
      %error "Max SysCall Interrupt Priority (%KinetisLibraryMaxInterruptPriority) is larger than Lowest Interrupt Priority (%KinetisLibraryLowestInterruptPriority). Priority shall be <= %KinetisLibraryLowestInterruptPriority."
    %endif
  %endif
%endif

%ifndef Shell
  %set ParseCommand Selection never
%else
  %set ParseCommand Selection always
%endif

%- %if defined(TicklessIdleModeEnabled) & %TicklessIdleModeEnabled='yes'
  %set vOnPreSleepProcessing Selection always
  %set vOnPostSleepProcessing Selection always
%- %else
%-  %set vOnPreSleepProcessing Selection never
%-  %set vOnPostSleepProcessing Selection never
%- %endif

%if defined(useQueueSets) & %useQueueSets='yes'
  %set xQueueCreateSet Selection always
  %set xQueueAddToSet Selection always
  %set xQueueRemoveFromSet Selection always
  %set xQueueSelectFromSet Selection always
  %set xQueueSelectFromSetFromISR Selection always
%else
  %set xQueueCreateSet Selection never
  %set xQueueAddToSet Selection never
  %set xQueueRemoveFromSet Selection never
  %set xQueueSelectFromSet Selection never
  %set xQueueSelectFromSetFromISR Selection never
%endif

%- heap scheme
%if defined(MemoryScheme) & %MemoryScheme='Scheme3'
  %set TotalHeapSize ReadOnly yes
  %set LinkerHeapSizeSymbolName ReadOnly yes
  %set LinkerHeapBaseSymbolName ReadOnly yes
  %set LinkerHeapLimitSymbolName ReadOnly yes
%elif defined(MemoryScheme) & %MemoryScheme='Scheme6'
  %set TotalHeapSize ReadOnly yes
  %set LinkerHeapSizeSymbolName ReadOnly no
  %set LinkerHeapBaseSymbolName ReadOnly no
  %set LinkerHeapLimitSymbolName ReadOnly no
%else
  %set TotalHeapSize ReadOnly no
  %set LinkerHeapSizeSymbolName ReadOnly yes
  %set LinkerHeapBaseSymbolName ReadOnly yes
  %set LinkerHeapLimitSymbolName ReadOnly yes
%endif

%endif %- CPUfamily

%- disabled for now. In the past the shell needed the trace facility, this is not needed any more
%- %if defined(ShellEnabled) & %ShellEnabled='yes'
%- %set UseTraceFacility Value yes
%- %set UseTraceFacility ReadOnly yes
%- %else
%set UseTraceFacility ReadOnly no
%- %endif
