<?xml version="1.0" encoding="UTF-8"?>
<Bean>
  <Header>
    <Name>FontDisplay</Name>
    <Description>Graphical font driver</Description>
    <Author>Damian Schmid, Erich Styger</Author>
    <Version>01.201</Version>
    <Icon>FontDisplay</Icon>
    <TypesFiles>PE,FontDisplay\FontDisplay</TypesFiles>
    <FileVersion>6</FileVersion>
  </Header>
  <Options>
    <BW_HelpType>BasicPlusUsage</BW_HelpType>
    <BW_HelpFiles>,Properties,Methods,Events,"Typical Usage"</BW_HelpFiles>
    <BW_AutoSaveHelp>yes</BW_AutoSaveHelp>
    <BW_AutoSaveDriver>yes</BW_AutoSaveDriver>
    <BW_DetailedHelp>yes</BW_DetailedHelp>
    <BW_NeedTps>no</BW_NeedTps>
    <BW_NeedUst>4</BW_NeedUst>
    <BW_NeedCns>0</BW_NeedCns>
    <BeanStatus>PROPOSAL</BeanStatus>
    <Copyright> * Copyright (c) 2011-2020, Erich Styger\n * Web:         https://mcuoneclipse.com\n * SourceForge: https://sourceforge.net/projects/mcuoneclipse\n * Git:         https://github.com/ErichStyger/McuOnEclipse_PEx\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * - Redistributions of source code must retain the above copyright notice, this list\n *   of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</Copyright>
    <Category>CPU External Devices-Display</Category>
    <DemoDriver>no</DemoDriver>
    <BeanLevel>High</BeanLevel>
    <Shortcut>FDisp</Shortcut>
  </Options>
  <PropertyList>
    <Property>
      <TCompNameItem>
        <Name>Component name</Name>
        <Symbol>DeviceName</Symbol>
        <Hint>Name of the component.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>true</EditLine>
        <DefaultValue/>
      </TCompNameItem>
    </Property>
    <Property>
      <TGrupItem>
        <Name>System</Name>
        <Symbol>SystemGroug</Symbol>
        <Hint>Interface to the system</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description/>
        <Expanded>Yes</Expanded>
        <Children>
          <GrupItem>
            <TInhrLinkItem>
              <Name>SDK</Name>
              <Symbol>sdk</Symbol>
              <TypeSpec>FontDisplay\sdk</TypeSpec>
              <Hint>SDK to be used</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <DefaultValue/>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <SortStyle/>
            </TInhrLinkItem>
          </GrupItem>
          <GrupItem>
            <TInhrLinkItem>
              <Name>Display</Name>
              <Symbol>GDisplay</Symbol>
              <TypeSpec>FontDisplay\Display</TypeSpec>
              <Hint>Interface to the display</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <DefaultValue/>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <SortStyle/>
            </TInhrLinkItem>
          </GrupItem>
          <GrupItem>
            <TInhrLinkItem>
              <Name>Font</Name>
              <Symbol>font</Symbol>
              <TypeSpec>FontDisplay\font</TypeSpec>
              <Hint>Interface to fonts</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <DefaultValue/>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <SortStyle/>
            </TInhrLinkItem>
          </GrupItem>
        </Children>
      </TGrupItem>
    </Property>
    <Property>
      <TBoolGrupItem>
        <Name>Watchdog</Name>
        <Symbol>WatchdogEnabled</Symbol>
        <TypeSpec>typeEnaDis</TypeSpec>
        <Hint>Font operations with the display may take some time. If using a watchdog, then the font driver needs to kick the dog too.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>Disabled</Description>
        <Expanded>No</Expanded>
        <DefaultValue>false</DefaultValue>
        <DefineSymbol>YES_NO</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <Children>
          <GrupItem>
            <TInhrLinkItem>
              <Name>Watchdog</Name>
              <Symbol>Watchdog</Symbol>
              <TypeSpec>Watchdog_I</TypeSpec>
              <Hint>Watchdog interface</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <DefaultValue/>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <SortStyle/>
            </TInhrLinkItem>
          </GrupItem>
        </Children>
      </TBoolGrupItem>
    </Property>
  </PropertyList>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>GetFontHeight</Name>
        <Symbol>GetFontHeight</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>returns the height (in pixels) of a font.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>font</ParName>
          <ParType>Font</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to font information</ParHint>
        </Parameter>
        <Parameter>
          <ParName>charHeight</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to height of the character in pixels.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>totalHeight</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the total height of the character, including to the space below the character.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(%'ModuleName'_Font *font, %'ModuleName'_PixelDim *charHeight, %'ModuleName'_PixelDim *totalHeight)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetStringHeight</Name>
        <Symbol>GetStringHeight</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>returns the height (in pixels) of a font string. For multiple line strings (separated by newline) or for strings with \\r it returns the longest list.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>PixelDim</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the string.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>font</ParName>
          <ParType>Font</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to font information</ParHint>
        </Parameter>
        <Parameter>
          <ParName>lastLineSpace</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the height of the last line space, useful if you combine multiple strings. The pointer may be NULL.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_PixelDim #M#_#C#(uint8_t *str, %'ModuleName'_Font *font, %'ModuleName'_PixelDim *lastLineSpace)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetCharWidth</Name>
        <Symbol>GetCharWidth</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>returns the width (in pixels) of a font character.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>ch</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>character for which to calculate the width</ParHint>
        </Parameter>
        <Parameter>
          <ParName>charWidth</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to width of the character in pixels (this is only for the character, without the space after the character)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>totalWidth</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the total width of the character, including to the space after the character.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>font</ParName>
          <ParType>Font</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to font information</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(uint8_t ch, %'ModuleName'_PixelDim *charWidth, %'ModuleName'_PixelDim *totalWidth, %'ModuleName'_Font *font)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>GetStringWidth</Name>
        <Symbol>GetStringWidth</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>returns the width (in pixels) of a font string. For multiple line strings (separated by \\\n
) or for strings with \\r it returns the longest string length.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>PixelDim</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the string.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>font</ParName>
          <ParType>Font</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to font information</ParHint>
        </Parameter>
        <Parameter>
          <ParName>lastCharSpace</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the width of the last character space, useful if you combine multiple strings. The pointer may be NULL.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_PixelDim #M#_#C#(uint8_t *str, %'ModuleName'_Font *font, %'ModuleName'_PixelDim *lastCharSpace)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>WriteString</Name>
        <Symbol>WriteString</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Function to write a string or character at the startpoint. Set the startpoint with the function setCursor.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the character string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>color</ParName>
          <ParType>PixelColor</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Foreground color to be used (for the character pixels)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>xCursor</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to x position of first character (upper left corner). On return this will contain the next y position.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>yCursor</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to y position of character (upper left corner). On return this will contain the next y position.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>font</ParName>
          <ParType>Font</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to font information</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(uint8_t *str, %'ModuleName'_PixelColor color, %'ModuleName'_PixelDim *xCursor, %'ModuleName'_PixelDim *yCursor, %'ModuleName'_Font *font)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>WriteStringWidth</Name>
        <Symbol>WriteStringWidth</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Function to write a string or character at the startpoint. Set the startpoint with the function setCursor. If the string reaches the given width, the text gets wrapped to a new line.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>6</ParamCount>
        <Parameter>
          <ParName>str</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the character string</ParHint>
        </Parameter>
        <Parameter>
          <ParName>color</ParName>
          <ParType>PixelColor</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Foreground color to be used (for the character pixels)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>xCursor</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to x position of first character (upper left corner). On return this will contain the next y position.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>yCursor</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to y position of character (upper left corner). On return this will contain the next y position.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>font</ParName>
          <ParType>Font</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to font information</ParHint>
        </Parameter>
        <Parameter>
          <ParName>width</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Maximum of width of the text box. If text reaches the end of the box, the text gets wrapped to a new line.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(uint8_t *str, %'ModuleName'_PixelColor color, %'ModuleName'_PixelDim *xCursor, %'ModuleName'_PixelDim *yCursor, %'ModuleName'_Font *font, %'ModuleName'_PixelDim width)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>WriteChar</Name>
        <Symbol>WriteChar</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Function to write a character at the start point. Set the start point with the function setCursor.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>ch</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>the character to print</ParHint>
        </Parameter>
        <Parameter>
          <ParName>color</ParName>
          <ParType>PixelColor</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Foreground color to be used (for the character pixels)</ParHint>
        </Parameter>
        <Parameter>
          <ParName>xCursor</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to x position of character (upper left corner). On return this will contain the next x position.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>yCursor</ParName>
          <ParType>PixelDim</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to y position of character (upper left corner). On return this will contain the next y position.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>font</ParName>
          <ParType>Font</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to font information</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(uint8_t ch, %'ModuleName'_PixelColor color, %'ModuleName'_PixelDim *xCursor, %'ModuleName'_PixelDim *yCursor, %'ModuleName'_Font *font)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Deinit</Name>
        <Symbol>Deinit</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Driver de-initialization</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Init</Name>
        <Symbol>Init</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Driver initialization</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <Links>
    <EmptySection_DummyValue/>
  </Links>
  <Revisions>
    <RevisionVersion>2</RevisionVersion>
  </Revisions>
</Bean>
