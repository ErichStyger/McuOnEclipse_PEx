<?xml version="1.0" encoding="UTF-8"?>
<Bean>
  <Header>
    <Name>Timeout</Name>
    <Description>Component to manage timeouts, e.g. to be used in loops.</Description>
    <Author>Erich Styger</Author>
    <Version>01.038</Version>
    <Icon>Timeout</Icon>
    <TypesFiles>PE,Timeout\Timeout</TypesFiles>
    <FileVersion>6</FileVersion>
  </Header>
  <Options>
    <BW_HelpType>BasicPlusUsage</BW_HelpType>
    <BW_HelpFiles>,Properties,Methods,Events,"Typical Usage"</BW_HelpFiles>
    <BW_AutoSaveHelp>yes</BW_AutoSaveHelp>
    <BW_AutoSaveDriver>yes</BW_AutoSaveDriver>
    <BW_DetailedHelp>yes</BW_DetailedHelp>
    <BW_NeedTps>no</BW_NeedTps>
    <BW_NeedUst>5</BW_NeedUst>
    <BW_NeedCns>0</BW_NeedCns>
    <BeanStatus>PROPOSAL</BeanStatus>
    <Copyright> * Copyright (c) 2011-2020, Erich Styger\n * Web:         https://mcuoneclipse.com\n * SourceForge: https://sourceforge.net/projects/mcuoneclipse\n * Git:         https://github.com/ErichStyger/McuOnEclipse_PEx\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *\n * - Redistributions of source code must retain the above copyright notice, this list\n *   of conditions and the following disclaimer.\n *\n * - Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</Copyright>
    <Category>SW-User Components</Category>
    <DemoDriver>no</DemoDriver>
    <BeanLevel>High</BeanLevel>
    <Shortcut>TMOUT</Shortcut>
  </Options>
  <PropertyList>
    <Property>
      <TCompNameItem>
        <Name>Component name</Name>
        <Symbol>DeviceName</Symbol>
        <Hint>Name of the component.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>true</EditLine>
        <DefaultValue/>
      </TCompNameItem>
    </Property>
    <Property>
      <TInhrLinkItem>
        <Name>SDK</Name>
        <Symbol>sdk</Symbol>
        <TypeSpec>Timeout\sdk</TypeSpec>
        <Hint>Link to SDK</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <DefaultValue/>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <SortStyle/>
      </TInhrLinkItem>
    </Property>
    <Property>
      <TInhrLinkItem>
        <Name>Critical Section</Name>
        <Symbol>CriticalSection</Symbol>
        <TypeSpec>CriticalSection_I</TypeSpec>
        <Hint>Interface to critical section handling</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <DefaultValue/>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <SortStyle/>
      </TInhrLinkItem>
    </Property>
    <Property>
      <TIntgItem>
        <Name>Maximum counters</Name>
        <Symbol>MaxTimeoutCounters</Symbol>
        <Hint>Maximum number of available counters</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>true</EditLine>
        <DefaultValue>1</DefaultValue>
        <MinValue>1</MinValue>
        <MaxValue>-1</MaxValue>
        <Bases>DEC</Bases>
        <DefaultBase>DEC</DefaultBase>
        <ExtraHintDisabled>false</ExtraHintDisabled>
        <ChangeValueIntoRange>false</ChangeValueIntoRange>
        <RuntimeProperty>false</RuntimeProperty>
      </TIntgItem>
    </Property>
    <Property>
      <TIntgItem>
        <Name>Counter tick period (ms)</Name>
        <Symbol>CounterTickPeriod</Symbol>
        <Hint>This value in milliseconds corresponds to the rate which AddTick() is called. If using an RTOS, then the period is defined through the RTOS.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>true</EditLine>
        <DefaultValue>10</DefaultValue>
        <MinValue>1</MinValue>
        <MaxValue>-1</MaxValue>
        <Bases>DEC</Bases>
        <DefaultBase>DEC</DefaultBase>
        <ExtraHintDisabled>false</ExtraHintDisabled>
        <ChangeValueIntoRange>false</ChangeValueIntoRange>
        <RuntimeProperty>false</RuntimeProperty>
      </TIntgItem>
    </Property>
    <Property>
      <TBoolGrupItem>
        <Name>RTOS</Name>
        <Symbol>RTOSGroup</Symbol>
        <TypeSpec>typeEnaDis</TypeSpec>
        <Hint>If using an RTOS, then it is assumed that the RTOS provides the timout ticks. As such, the the coutner tick period is defined trough the RTOS component.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>Disabled</Description>
        <Expanded>No</Expanded>
        <DefaultValue>false</DefaultValue>
        <DefineSymbol>YES_NO</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <Children>
          <GrupItem>
            <TInhrLinkItem>
              <Name>RTOS</Name>
              <Symbol>RTOS</Symbol>
              <TypeSpec>Timeout\RTOS</TypeSpec>
              <Hint>RTOS to be used to provide the ticks</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <DefaultValue/>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <SortStyle/>
            </TInhrLinkItem>
          </GrupItem>
        </Children>
      </TBoolGrupItem>
    </Property>
  </PropertyList>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>GetCounter</Name>
        <Symbol>GetCounter</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Initializes a new timeout counter and returns the handle to it. At the end, use LeaveCounter() to free up the resource.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>CounterHandle</ReturnType>
        <RetHint>Handle to the counter, to be used for further API calls.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>nofTicks</ParName>
          <ParType>CounterType</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Number of ticks for the counter until it expires.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_CounterHandle #M#_#C#(%'ModuleName'_CounterType nofTicks)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>LeaveCounter</Name>
        <Symbol>LeaveCounter</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>To be called to return the counter. Note that a counter always should be returned so it can be reused.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>handle</ParName>
          <ParType>CounterHandle</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Counter handle</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(%'ModuleName'_CounterHandle handle)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Value</Name>
        <Symbol>Value</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Return the current value of the counter (in ticks)</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>CounterType</ReturnType>
        <RetHint>Returns the value of the timeout counter.</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>handle</ParName>
          <ParType>CounterHandle</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Handle of the timeout counter</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_CounterType #M#_#C#(%'ModuleName'_CounterHandle handle)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>SetCounter</Name>
        <Symbol>SetCounter</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Sets the counter to a new value and returns the value just prior to the call.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>CounterType</ReturnType>
        <RetHint>Value of counter before reset.</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>handle</ParName>
          <ParType>CounterHandle</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Counter handle which shall get a new value.</ParHint>
        </Parameter>
        <Parameter>
          <ParName>nofTicks</ParName>
          <ParType>CounterType</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>New value (tick count) of the timeout counter. Pass zero to have it expire immediately.</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>%'ModuleName'_CounterType #M#_#C#(%'ModuleName'_CounterHandle handle, %'ModuleName'_CounterType nofTicks)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>CounterExpired</Name>
        <Symbol>CounterExpired</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Returns true if the timeout counter has been expired</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>Boolean</ReturnType>
        <RetHint>Returns TRUE if the counter has been expired, FALSE otherwise</RetHint>
        <ParamCount>1</ParamCount>
        <Parameter>
          <ParName>handle</ParName>
          <ParType>CounterHandle</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>The timeout handle retrieved using GetCounter()</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>bool #M#_#C#(%'ModuleName'_CounterHandle handle)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>AddTick</Name>
        <Symbol>AddTick</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Method to be called from a periodic timer or interrupt. It will decrement all current counters by one down to zero.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Init</Name>
        <Symbol>Init</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Initialization of the driver</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>none</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <Links>
    <EmptySection_DummyValue/>
  </Links>
  <Revisions>
    <RevisionVersion>2</RevisionVersion>
  </Revisions>
</Bean>
