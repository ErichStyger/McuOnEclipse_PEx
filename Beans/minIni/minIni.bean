<?xml version="1.0" encoding="UTF-8"?>
<Bean>
  <Header>
    <Name>minIni</Name>
    <Description>minIni is a programmerâ€™s library to read and write 'ini' files in embedded systems.</Description>
    <Author>Erich Styger</Author>
    <Version>01.060</Version>
    <Icon>CPU_CHIP</Icon>
    <TypesFiles>PE,minIni\minIni</TypesFiles>
    <FileVersion>6</FileVersion>
  </Header>
  <Options>
    <BW_HelpType>Basic</BW_HelpType>
    <BW_HelpFiles>,Properties,Methods,Events</BW_HelpFiles>
    <BW_AutoSaveHelp>yes</BW_AutoSaveHelp>
    <BW_AutoSaveDriver>yes</BW_AutoSaveDriver>
    <BW_DetailedHelp>yes</BW_DetailedHelp>
    <BW_NeedTps>no</BW_NeedTps>
    <BW_NeedUst>4</BW_NeedUst>
    <BW_NeedCns>0</BW_NeedCns>
    <BeanStatus>PROPOSAL</BeanStatus>
    <Copyright>(c) Copyright 2008-2021, CompuPhase;\nhttp      : www.compuphase.com\nProcessor Expert port: Erich Styger, 2014-2022, http://www.mcuoneclipse.com\nLicense: See miniIni_LICENSE.txt and minIni_NOTICE.txt\nAdaptions for Processor Expert: (c) Copyright 2012-2020, Erich Styger</Copyright>
    <Category>SW-User Components</Category>
    <DemoDriver>no</DemoDriver>
    <Shortcut>MINI</Shortcut>
    <BeanLevel>High</BeanLevel>
  </Options>
  <PropertyList>
    <Property>
      <TCompNameItem>
        <Name>Component name</Name>
        <Symbol>DeviceName</Symbol>
        <Hint>Name of the component.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>true</EditLine>
        <DefaultValue/>
      </TCompNameItem>
    </Property>
    <Property>
      <TStrgItem>
        <Name>minIni Version</Name>
        <Symbol>minIniVersion</Symbol>
        <Hint>Identifies the minIni version</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <ReadOnly>true</ReadOnly>
        <EditLine>true</EditLine>
        <DefaultValue/>
        <StrDefine>nothing</StrDefine>
        <MinLength>0</MinLength>
        <MaxLength>-1</MaxLength>
      </TStrgItem>
    </Property>
    <Property>
      <TInhrLinkItem>
        <Name>SDK</Name>
        <Symbol>sdk</Symbol>
        <TypeSpec>minIni\sdk</TypeSpec>
        <Hint>Link to SDK used</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <DefaultValue/>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <SortStyle/>
      </TInhrLinkItem>
    </Property>
    <Property>
      <TInhrLinkItem>
        <Name>Utility</Name>
        <Symbol>Utility</Symbol>
        <TypeSpec>minIni\Utility</TypeSpec>
        <Hint>Interface to utility string frunctions</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <DefaultValue/>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <SortStyle/>
      </TInhrLinkItem>
    </Property>
    <Property>
      <TBoolItem>
        <Name>Portable strnicmp()</Name>
        <Symbol>portableStrnicmp</Symbol>
        <TypeSpec>typeYesNo</TypeSpec>
        <Hint>If set to yes, it enables PORTABLE_STRNICMP in the configuration header file. With this, the minIni.c implements the strnicmp() function .</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
      </TBoolItem>
    </Property>
    <Property>
      <TBoolItem>
        <Name>Use Real</Name>
        <Symbol>useReal</Symbol>
        <TypeSpec>typeYesNo</TypeSpec>
        <Hint>If set to yes, defines INI_REAL in the configuration header file. If enabled, then the function ini_getf() is available to read floating point values.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
      </TBoolItem>
    </Property>
    <Property>
      <TBoolItem>
        <Name>Read Only</Name>
        <Symbol>isReadOnly</Symbol>
        <TypeSpec>typeYesNo</TypeSpec>
        <Hint>If set to yes, defines INI_READONLY in the configuration header file. Then access to the ini file is read only.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>1</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>false</DefaultValue>
        <Popup>false</Popup>
      </TBoolItem>
    </Property>
    <Property>
      <TBoolItem>
        <Name>No Debug</Name>
        <Symbol>isNoDebug</Symbol>
        <TypeSpec>typeYesNo</TypeSpec>
        <Hint>If set to yes, then it defines NDEBUG in the configuration header file, so assert() calls are not performed.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
      </TBoolItem>
    </Property>
    <Property>
      <TBoolGrupItem>
        <Name>Shell</Name>
        <Symbol>ShellEnabledGroup</Symbol>
        <TypeSpec>typeEnaDis</TypeSpec>
        <Hint>Optional interface to the shell</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>Disabled</Description>
        <Expanded>No</Expanded>
        <DefaultValue>false</DefaultValue>
        <DefineSymbol>YES_NO</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <Children>
          <GrupItem>
            <TInhrLinkItem>
              <Name>Shell</Name>
              <Symbol>Shell</Symbol>
              <TypeSpec>minIni\Shell</TypeSpec>
              <Hint>Optional interface to the shell</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <DefaultValue/>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <SortStyle/>
            </TInhrLinkItem>
          </GrupItem>
        </Children>
      </TBoolGrupItem>
    </Property>
    <Property>
      <TBoolGrupItem>
        <Name>FatFS</Name>
        <Symbol>FatFSenabled</Symbol>
        <TypeSpec>typeEnaDis</TypeSpec>
        <Hint>FatFS configuration items</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description>Enabled</Description>
        <Expanded>Yes</Expanded>
        <DefaultValue>true</DefaultValue>
        <DefineSymbol>YES_NO</DefineSymbol>
        <IfDisabled>setNOTHING</IfDisabled>
        <Children>
          <GrupItem>
            <TIntgItem>
              <Name>Buffer Size</Name>
              <Symbol>FatFsIniBufferSize</Symbol>
              <Hint>Configures the macro INI_BUFFERSIZE which configures the maximum line length adn maxium path length.</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue>64</DefaultValue>
              <MinValue>2</MinValue>
              <MaxValue>-1</MaxValue>
              <Bases>DEC</Bases>
              <DefaultBase>DEC</DefaultBase>
              <ExtraHintDisabled>false</ExtraHintDisabled>
              <ChangeValueIntoRange>false</ChangeValueIntoRange>
              <RuntimeProperty>false</RuntimeProperty>
            </TIntgItem>
          </GrupItem>
          <GrupItem>
            <TInhrLinkItem>
              <Name>FatFS</Name>
              <Symbol>FatFS</Symbol>
              <TypeSpec>minIni\FatFS</TypeSpec>
              <Hint>Link to FatFS (FAT File System) component.</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>false</EditLine>
              <DefaultValue/>
              <CanDelete>false</CanDelete>
              <IconPopup>false</IconPopup>
              <SortStyle/>
            </TInhrLinkItem>
          </GrupItem>
        </Children>
      </TBoolGrupItem>
    </Property>
    <Property>
      <TGrupItem>
        <Name>Source Folders</Name>
        <Symbol>FolderGroup</Symbol>
        <Hint>Configures the source folder names</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <BoldName>true</BoldName>
        <EditLine>false</EditLine>
        <Description/>
        <Expanded>Yes</Expanded>
        <Children>
          <GrupItem>
            <TStrgItem>
              <Name>Source Folder</Name>
              <Symbol>MinIniSrcFolderName</Symbol>
              <Hint>Folder name where to store the source files. Setting can be empty.</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue/>
              <StrDefine>nothing</StrDefine>
              <MinLength>0</MinLength>
              <MaxLength>-1</MaxLength>
            </TStrgItem>
          </GrupItem>
          <GrupItem>
            <TStrgItem>
              <Name>Config Folder</Name>
              <Symbol>MinIniConfigFolderName</Symbol>
              <Hint>Folder name where to store the configuration source files. Setting can be empty.</Hint>
              <ItemLevel>BASIC</ItemLevel>
              <EditLine>true</EditLine>
              <DefaultValue/>
              <StrDefine>nothing</StrDefine>
              <MinLength>0</MinLength>
              <MaxLength>-1</MaxLength>
            </TStrgItem>
          </GrupItem>
        </Children>
      </TGrupItem>
    </Property>
  </PropertyList>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>ini_getbool</Name>
        <Symbol>ini_getbool</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Return a boolean key.  A true boolean is found if one of the following is matched:\n
  - A string starting with 'y' or 'Y'\n
  - A string starting with 't' or 'T'\n
  - A string starting with '1'\n
A false boolean is found if one of the following is matched:\n
  - A string starting with 'n' or 'N'\n
  - A string starting with 'f' or 'F'\n
  - A string starting with '0'</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>int</ReturnType>
        <RetHint>The true/false flag as interpreted at Key</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>Section</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name of the section to search for</ParHint>
          <ParUserDeclaration>const mTCHAR *Section</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Key</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name of the entry to find the value of</ParHint>
          <ParUserDeclaration>const mTCHAR *Key</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>DefValue</ParName>
          <ParType>int</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Default value in the event of a failed read; it should be zero (0) or one (1).</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Filename</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name and full path of the .ini file to read from</ParHint>
          <ParUserDeclaration>const mTCHAR *Filename</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>int #M#_#C#(const mTCHAR *Section, const mTCHAR *Key, int DefValue, const mTCHAR *Filename)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ini_gets</Name>
        <Symbol>ini_gets</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Return the string for a given section and key.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>int</ReturnType>
        <RetHint>The number of characters copied into the supplied buffer</RetHint>
        <ParamCount>6</ParamCount>
        <Parameter>
          <ParName>Section</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name of the section to search for</ParHint>
          <ParUserDeclaration>const mTCHAR *Section</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Key</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the name of the entry to find the value of</ParHint>
          <ParUserDeclaration>const mTCHAR *Key</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>DefValue</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the default value in the event of a failed read</ParHint>
          <ParUserDeclaration>const mTCHAR *DefValue</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Buffer</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>A pointer to the buffer to copy into</ParHint>
          <ParUserDeclaration>nTCHAR *Buffer</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>BufferSize</ParName>
          <ParType>int</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>The maximum number of characters to copy</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Filename</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name and full path of the .ini file to read from</ParHint>
          <ParUserDeclaration>const mTCHAR *Filename</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>int #M#_#C#(const mTCHAR *Section, const mTCHAR *Key, const mTCHAR *DefValue, nTCHAR *Buffer, int BufferSize, const mTCHAR *Filename)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ini_puts</Name>
        <Symbol>ini_puts</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Writes a string value for a given section and key. Method is only enabled if 'Read only' is set to  'no' in the properties.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>int</ReturnType>
        <RetHint>1 if successful, otherwise 0</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>Section</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name of the section to write the string in</ParHint>
          <ParUserDeclaration>const mTCHAR *Section</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Key</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name of the entry to write</ParHint>
          <ParUserDeclaration>const mTCHAR *Key</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Value</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the buffer the string, or NULL to erase the key</ParHint>
          <ParUserDeclaration>const mTCHAR *Value</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Filename</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name and full path of the .ini file to write to</ParHint>
          <ParUserDeclaration>const mTCHAR *Filename</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>int #M#_#C#(const mTCHAR *Section, const mTCHAR *Key, const mTCHAR *Value, const mTCHAR *Filename)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ini_getl</Name>
        <Symbol>ini_getl</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Return the long integral value for a given section and key.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>long</ReturnType>
        <RetHint>The value located at Key</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>Section</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name of the section to search for</ParHint>
          <ParUserDeclaration>const mTCHAR *Section</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Key</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the name of the entry to find the value of</ParHint>
          <ParUserDeclaration>const mTCHAR *Key</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>DefValue</ParName>
          <ParType>long</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Default value in the event of a failed read</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Filename</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name and full path of the .ini file to read from</ParHint>
          <ParUserDeclaration>const mTCHAR *Filename</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>long #M#_#C#(const mTCHAR *Section, const mTCHAR *Key, long DefValue, const mTCHAR *Filename)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ini_putl</Name>
        <Symbol>ini_putl</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Writes a long integral value for a given section and key. Method is only enabled if 'Read only' is set to  'no' in the properties.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>int</ReturnType>
        <RetHint>1 if successful, otherwise 0</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>Section</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name of the section to write the value in</ParHint>
          <ParUserDeclaration>const mTCHAR *Section</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Key</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name of the entry to write</ParHint>
          <ParUserDeclaration>const mTCHAR *Key</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Value</ParName>
          <ParType>long</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>The value to write</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Filename</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name and full path of the .ini file to write to</ParHint>
          <ParUserDeclaration>const mTCHAR *Filename</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>int #M#_#C#(const mTCHAR *Section, const mTCHAR *Key, long Value, const mTCHAR *Filename)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ini_getf</Name>
        <Symbol>ini_getf</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Return the long integral value for a given section and key. Only enabled if 'Use Real' is enabled in properties.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>INI_REAL</ReturnType>
        <RetHint>The value located at Key</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>Section</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name of the section to search for</ParHint>
          <ParUserDeclaration>const mTCHAR *Section</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Key</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to the name of the entry to find the value of</ParHint>
          <ParUserDeclaration>const mTCHAR *Key</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>DefValue</ParName>
          <ParType>INI_REAL</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Default value in the event of a failed read</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Filename</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name and full path of the .ini file to read from</ParHint>
          <ParUserDeclaration>const mTCHAR *Filename</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>INI_REAL #M#_#C#(const mTCHAR *Section, const mTCHAR *Key, INI_REAL DefValue, const mTCHAR *Filename)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ini_putf</Name>
        <Symbol>ini_putf</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Writes a long float value for a given section and key. Method is only enabled if 'Read only' is set to  'no' in the properties and 'Use Real' is enabled.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>int</ReturnType>
        <RetHint>1 if successful, otherwise 0</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>Section</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name of the section to write the value in</ParHint>
          <ParUserDeclaration>const mTCHAR *Section</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Key</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name of the entry to write</ParHint>
          <ParUserDeclaration>const mTCHAR *Key</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Value</ParName>
          <ParType>INI_REAL</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>The value to write</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Filename</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name and full path of the .ini file to write to</ParHint>
          <ParUserDeclaration>const mTCHAR *Filename</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>int #M#_#C#(const mTCHAR *Section, const mTCHAR *Key, INI_REAL Value, const mTCHAR *Filename)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ini_hassection</Name>
        <Symbol>ini_hassection</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Used to find out if section exists. Returns 1 if the section has been found, 0 otherwise.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>int</ReturnType>
        <RetHint>The number of characters copied into the supplied buffer</RetHint>
        <ParamCount>2</ParamCount>
        <Parameter>
          <ParName>Section</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name of the section</ParHint>
          <ParUserDeclaration>const mTCHAR *Section</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Filename</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name and full path of the .ini file to read from</ParHint>
          <ParUserDeclaration>const mTCHAR *Filename</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>int #M#_#C#(const mTCHAR *Section, const mTCHAR *Filename)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ini_getsection</Name>
        <Symbol>ini_getsection</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Return the key inside a section</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>int</ReturnType>
        <RetHint>The number of characters copied into the supplied buffer</RetHint>
        <ParamCount>4</ParamCount>
        <Parameter>
          <ParName>idx</ParName>
          <ParType>int</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>The zero-based sequence number of the section to return</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Buffer</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>A pointer to the buffer to copy into</ParHint>
          <ParUserDeclaration>mTCHAR *Buffer</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>BufferSize</ParName>
          <ParType>int</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>The maximum number of characters to copy</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Filename</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name and full path of the .ini file to read from</ParHint>
          <ParUserDeclaration>const mTCHAR *Filename</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>int #M#_#C#(int idx, mTCHAR *Buffer, int BufferSize, const mTCHAR *Filename)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ini_haskey</Name>
        <Symbol>ini_haskey</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Used to find if a key exists. Returns 1 if key has been found, 0 otherwise.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>int</ReturnType>
        <RetHint>1 if successful, otherwise 0</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>Section</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name of the section</ParHint>
          <ParUserDeclaration>const mTCHAR *Section</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Key</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name of the entry to find</ParHint>
          <ParUserDeclaration>const mTCHAR *Key</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Filename</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name and full path of the .ini file</ParHint>
          <ParUserDeclaration>const mTCHAR *Filename</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>int #M#_#C#(const mTCHAR *Section, const mTCHAR *Key, const mTCHAR *Filename)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ini_getkey</Name>
        <Symbol>ini_getkey</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Return the key inside a section</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>int</ReturnType>
        <RetHint>The number of characters copied into the supplied buffer</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>Section</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name of the section to browse through, or NULL to browse through the keys outside any section</ParHint>
          <ParUserDeclaration>const mTCHAR *Section</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>idx</ParName>
          <ParType>int</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>The zero-based sequence number of the key to return</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Buffer</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>A pointer to the buffer to copy into</ParHint>
          <ParUserDeclaration>mTCHAR *Buffer</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>BufferSize</ParName>
          <ParType>int</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>The maximum number of characters to copy</ParHint>
        </Parameter>
        <Parameter>
          <ParName>Filename</ParName>
          <ParType>char</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>The name and full path of the .ini file to read from</ParHint>
          <ParUserDeclaration>const mTCHAR *Filename</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>int #M#_#C#(const mTCHAR *Section, int idx, mTCHAR *Buffer, int BufferSize, const mTCHAR *Filename)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ini_browse</Name>
        <Symbol>ini_browse</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Function to browse the ini file. With this function the file is opened only once.</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>int</ReturnType>
        <RetHint>1 on success, 0 on failure (INI file not found)</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>Callback</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>a pointer to a function that will be called for every setting in the INI file.</ParHint>
          <ParUserDeclaration>INI_CALLBACK Callback</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>UserData</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>arbitrary data, which the function passes on the the Callback function</ParHint>
          <ParUserDeclaration>const void *UserData</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>Filename</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>the name and full path of the .ini file to read from</ParHint>
          <ParUserDeclaration>const TCHAR *Filename</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>int #M#_#C#(INI_CALLBACK Callback, const void *UserData, const TCHAR *Filename)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>ParseCommand</Name>
        <Symbol>ParseCommand</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Shell Command Line parser</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>uint8_t</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>3</ParamCount>
        <Parameter>
          <ParName>cmd</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to command line</ParHint>
          <ParUserDeclaration>const unsigned char *cmd</ParUserDeclaration>
        </Parameter>
        <Parameter>
          <ParName>handled</ParName>
          <ParType>Boolean</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to variable which tells if the command has been handled or not</ParHint>
        </Parameter>
        <Parameter>
          <ParName>io</ParName>
          <ParType>uint8_t</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to I/O structure</ParHint>
          <ParUserDeclaration>const %@Shell@'ModuleName'%.StdIOType *io</ParUserDeclaration>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>uint8_t #M#_#C#(const unsigned char *cmd, bool *handled, const %@Shell@'ModuleName'%.StdIOType *io)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Deinit</Name>
        <Symbol>Deinit</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Module de-initialization</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>Init</Name>
        <Symbol>Init</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Module initialization</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <ReturnType>void</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>0</ParamCount>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>void #M#_#C#(void)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <Links>
    <EmptySection_DummyValue/>
  </Links>
  <Revisions>
    <RevisionVersion>2</RevisionVersion>
  </Revisions>
</Bean>
